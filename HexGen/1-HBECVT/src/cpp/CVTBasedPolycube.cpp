#include "CVTBasedPolycube.h"
#include "StaticVars.h"
#include "CellQueue.h"
#include <sstream>
#include <array>

//const double CVTBasedPolycube::WEIGHT_LENGTH_EWCVT = 0.1f; //0.5 For complicateCAD Model, 8.0 for squirrel, 10 for bunny, 100 before

//const double CVTBasedPolycube::OCTREE_TOL_ERR = 0.001f; //0.02 for sphere

const double CVTBasedPolycube::DOMAIN_SIZE = 2048.0f; //64.0f, 8.0 before

CVTBasedPolycube::CVTBasedPolycube(void)
{


}

CVTBasedPolycube::CVTBasedPolycube(string inputFileName)
{

	inputName = inputFileName;

	string tempName;

	//tempName = inputName + "_Output_Centroids.txt";

	//outputCentroids.open(tempName);

	//tempName = inputName + "_Output_CornerPoints.txt";

	//outputCornerPoints.open(tempName);

	//tempName = inputName + "_Output_SpecialElements.txt";

	//outputSpecialElements.open(tempName);

}

CVTBasedPolycube::~CVTBasedPolycube(void)
{

	//outputCentroids.close();

	//outputCornerPoints.close();

	//outputSpecialElements.close();

}


bool CVTBasedPolycube::ReadKTri(const char * filename)
{
	FILE *input;
	int i, j, elementType;
	int v[8];

	ifstream infile;
	string oneLine, oneWrod, formerLine;

	infile.open(filename);
	if (infile.is_open())
	{
		while (1)
		{
			getline(infile, oneLine);

			if (oneLine.find("ELEMENT_SHELL") != std::string::npos)
			{
				break;
			}
		}

		elementNumber = 0;
		while (1)
		{
			getline(infile, oneLine);

			if (oneLine.find("NODE") != std::string::npos)
			{
				break;
			}
			elementNumber++;
		}
		vertexNumber = 0;
		while (1)
		{
			getline(infile, oneLine);

			if (oneLine.find("*") != std::string::npos)
			{
				break;
			}
			vertexNumber++;
		}
		cout << "Triangle information: vertex number " << vertexNumber << " element number " << elementNumber << endl;
		if (!CreateNewMesh(TRIANGLE, vertexNumber, elementNumber)) {
			return false;
		}
		

		infile.clear();
		infile.seekg(0);

		while (1)
		{
			getline(infile, oneLine);

			if (oneLine.find("ELEMENT_SHELL") != std::string::npos)
			{
				break;
			}
		}

		for (i = 0; i < elementNumber; ++i)
		{

			getline(infile, oneLine);
			std::istringstream iss(oneLine); // string stream
			std::string token;
			size_t pos = -1;
			int location_assign_value = 0;
			while (iss >> token) {
				//cout << token << endl;
				while ((pos = token.rfind(',')) != std::string::npos) {
					token.erase(pos, 1);
				}
				//cout << token << endl;
				//getchar();
				/*std::cout << token << '\n';
				getchar();*/
				if (location_assign_value>=2&& location_assign_value <= 4)
				{
					std::istringstream(token)>>element[i][location_assign_value-2];
				}
				location_assign_value++;
			}			
		}
		for (i = 0; i < elementNumber; ++i)
		{
			element[i][0] = element[i][0] - 1;
			element[i][1] = element[i][1] - 1;
			element[i][2] = element[i][2] - 1;
			/*cout << element[i][0] << " "<<element[i][1] << " " << element[i][2] << endl;
			getchar();*/
		}
		
		while (1)
		{
			getline(infile, oneLine);

			if (oneLine.find("NODE") != std::string::npos)
			{
				break;
			}
			
		}

		for (i = 0; i < vertexNumber; ++i)
		{

			getline(infile, oneLine);
			std::istringstream iss(oneLine); // string stream
			std::string token;
			size_t pos = -1;
			int location_assign_value = 0;
			while (iss >> token) {
				while ((pos = token.rfind(',')) != std::string::npos) {
					token.erase(pos, 1);
				}
				/*std::cout << token << '\n';
				getchar();*/
				if (location_assign_value >= 1 && location_assign_value <= 3)
				{
					std::istringstream(token) >> vertex[i][location_assign_value - 1];
				}
				location_assign_value++;
			}
		}

		
		//getline(infile, oneLine);
		//istringstream strStream(oneLine);
		//strStream >> oneWrod >> vertexNumber >> oneWrod;
		////cout << vertexNumber << endl;

		////vector<array<double, 3>> pts;
		////pts.resize(vertexNumber);
		//vector<vector<double> > pts(vertexNumber, vector<double>(3));

		//for (i = 0; i < vertexNumber; ++i)
		//{
		//	infile >> pts[i][0] >> pts[i][1] >> pts[i][2];
		//	//cout << pts[i][0] << endl;
		//}

		//while (1)
		//{
		//	getline(infile, oneLine);
		//	if (oneLine.find("CELLS") != std::string::npos) {
		//		break;
		//	}
		//}
		//strStream.clear();
		//strStream.str(oneLine);
		//strStream >> oneWrod >> elementNumber >> oneWrod;

		//if (!CreateNewMesh(HEXAHEDRON, vertexNumber, elementNumber)) {
		//	return false;
		//}

		//for (i = 0; i < vertexNumber; ++i)
		//{
		//	vertex[i][0] = pts[i][0];
		//	vertex[i][1] = pts[i][1];
		//	vertex[i][2] = pts[i][2];
		//	//cout << vertex[i][0] << endl;
		//}
		////cout << elementNumber << endl;
		//for (i = 0; i < elementNumber; ++i)
		//{
		//	infile >> oneWrod >> element[i][0] >> element[i][1] >> element[i][2] >> element[i][3] >>
		//		element[i][4] >> element[i][5] >> element[i][6] >> element[i][7];
		//	//cout << element[i][0] << endl;
		//}

		infile.close();
	}
	else
	{
		cerr << "Cannot open " << filename << "!\n";
	}
	return true;
}


bool CVTBasedPolycube::Initialization(const char *inputName)
{

	ReadKTri(inputName);
	Write("check_tri.raw");
	//getchar();
	GetMeshInfo();
	
	//Set the error tolerance for octree subdivision
	OCTREE_TOL_ERR = meshInfo.biggestSize * 0.004f; //0.005f

	////

	//DeleteDuplicatedPoint();
	//Write("deleteDup_tri.raw");

	////

	elementArray.resize(elementNumber);

	InitializeElement();

	generators.resize(NUM_CLUSTER);

	InitializeSegments();

	SearchNei();

	

	return true;

}


bool CVTBasedPolycube::InitializeElement()
{
	double tempVec[3];
	int i, j;

	ComputeNormal(2); //compute normal of each element
	if (elementValence == NULL)
	{
		InitiateElementValence();
	}

	for (i = 0; i < elementNumber; i++)
	{
		
		// Assign the index to each element
		elementArray[i].index = i;


		for (j = 0; j < 3; j++)
		{

			tempVec[j] = elementNormal[i][j];

		}

		Normalize(tempVec);

		for (j = 0; j < 3; j++)
		{

			elementArray[i].normal[j] = tempVec[j];

		}

		//GetNeighboringElementByElement(i);
		GetDirectNeighboringElementByElement(i);

		//Find all neighboring elements

		elementArray[i].numNeiElements = 1;

		elementArray[i].neiElements.push_back(i);

		//End

	}

	GetNeighboringElementInRings();

	return true;

}

bool CVTBasedPolycube::GetNeighboringElementByElement(int elementID)
{

	int i, iVert, j, jElem, k, kSize;

	for (i = 0; i < 3; i++)
	{

		iVert = element[elementID][i];

		for (j = 0; j < elementValenceNumber[iVert]; j++)
		{

			jElem = elementValence[iVert][j];

			kSize = elementArray[elementID].directNei.size();

			for (k = 0; k < kSize; k++)
			{

				if (jElem == elementID || jElem == elementArray[elementID].directNei[k])
				{

					break;

				}

			}
			if (k == kSize && jElem != elementID) //Very important when kSize = 0
			{

				elementArray[elementID].directNei.push_back(jElem);

			}

		}

	}

	elementArray[elementID].numDirectNei = elementArray[elementID].directNei.size();

	return true;

}

bool CVTBasedPolycube::GetDirectNeighboringElementByElement(int elementID)
{

	int i, iVert, j, jElem, k, kSize;

	vector<int> tempElements;

	for (i = 0; i < 3; i++)
	{

		iVert = element[elementID][i];

		for (j = 0; j < elementValenceNumber[iVert]; j++)
		{

			jElem = elementValence[iVert][j];

			kSize = tempElements.size();

			for (k = 0; k < kSize; k++)
			{

				if (jElem == elementID || jElem == tempElements[k])
				{

					break;

				}

			}
			if (k == kSize && jElem != elementID) //Very important when kSize = 0
			{

				tempElements.push_back(jElem);

			}

		}

	}

	//Find three direct neighboring elements
	kSize = 0;

	for (i = 0; i < tempElements.size(); i++)
	{

		for (j = 0; j < 3; j++)
		{

			iVert = element[tempElements[i]][j];

			for (k = 0; k < 3; k++)
			{

				if (iVert == element[elementID][k])
				{
					kSize++;
				}

			}

		}

		if (kSize == 2)
		{

			elementArray[elementID].directNei.push_back(tempElements[i]);

		}

		kSize = 0;

	}

	elementArray[elementID].numDirectNei = elementArray[elementID].directNei.size();

	return true;

}


//Recursive function to find all neighboring elements in N rings
bool CVTBasedPolycube::GetNeighboringElementInRings(int ringNumber)
{

	int i, j, iSize, k, kk, kSize;

	int tempVertex, tempElement;
	//vector<int> tempNodes;

	for (i = 0; i < elementNumber; i++)
	{

		vector<int> tempNodes;

		iSize = elementArray[i].neiElements.size();

		for (j = 0; j < iSize; j++)
		{

			for (k = 0; k < 3; k++)
			{

				tempVertex = element[elementArray[i].neiElements[j]][k];

				kSize = tempNodes.size();

				for (kk = 0; kk < kSize; kk++)
				{

					if (tempVertex == tempNodes[kk])
					{
						break;
					}

				}
				if (kk == kSize)
				{
					tempNodes.push_back(tempVertex);
				}

			}

		}

		//Next step
		iSize = tempNodes.size();

		for (j = 0; j < iSize; j++)
		{

			tempVertex = tempNodes[j];

			for (k = 0; k < elementValenceNumber[tempVertex]; k++)
			{

				tempElement = elementValence[tempVertex][k];

				kSize = elementArray[i].neiElements.size();

				for (kk = 0; kk < kSize; kk++)
				{

					if (tempElement == elementArray[i].neiElements[kk])
					{
						break;
					}

				}
				if (kk == kSize)
				{
					elementArray[i].neiElements.push_back(tempElement);
				}

			}

		}

		elementArray[i].numNeiElements = elementArray[i].neiElements.size(); //numNeiElements
	}

	if (ringNumber < NUM_RING)
	{
		ringNumber++;
		GetNeighboringElementInRings(ringNumber);

	}
	else
	{

		return true;
	}
	//return true;

}


bool CVTBasedPolycube::InitializeSegments()
{

	if (INITIALIZATION_METHOD == 0)
	{

		InitializeGeneratorsByInput();

	}
	else
	{
		
		//random initialization

	}

	// Initialize the segments
	double tempDist, dist;
	int i, j, k;
	int indexNearestGenerator;

	for (i = 0; i < elementNumber; i++)
	{

		tempDist = 10000000.0f;
		indexNearestGenerator = 0;

		for (j = 0; j < NUM_CLUSTER; j++)
		{

			dist = GetNormalDist(generators[j], elementArray[i]);

			if (dist < tempDist)
			{

				indexNearestGenerator = j;
				tempDist = dist;

			}

		}

		// Initialize more info for each element
		elementArray[i].numNeiCluster = 1;

		for (k = 0; k < NUM_NEI_CLUSTER; k++)
		{

			elementArray[i].numNeiElementEachCluster[k] = 0;
			elementArray[i].indexNeiClusters[k] = -1;

		}

		elementArray[i].indexCluster = indexNearestGenerator;

		elementArray[i].indexNeiClusters[0] = elementArray[i].indexCluster;
		elementArray[i].numNeiElementEachCluster[0] = 1;

		generators[indexNearestGenerator].numElements++;

	}

	//Recalculate the generators

	int indexCluster;

	for (i = 0; i < NUM_CLUSTER; i++)
	{

		for (j = 0; j < 3; j++)
		{

			generators[i].normal[j] = 0.f;

		}

	}

	for (i = 0; i < elementNumber; i++)
	{

		indexCluster = elementArray[i].indexCluster;

		for (j = 0; j < 3; j++)
		{

			generators[indexCluster].normal[j] += elementArray[i].normal[j];

		}

	}

	for (i = 0; i < NUM_CLUSTER; i++)
	{

		for (j = 0; j < 3; j++)
		{

			generators[i].normal[j] /= generators[i].numElements;

		}

		NormalizeGeneratorNormal(generators[i]);

	}

	//end

	//RecalculateCentroids();

	return true;

}

bool CVTBasedPolycube::InitializeGeneratorsByInput()
{

	int i, j;

	for (i = 0; i < NUM_CLUSTER; i++)
	{

		generators[i].index = i;

		generators[i].numElements = 0;

		for (j = 0; j < 3; j++)
		{

			generators[i].normal[j] = prin_normal[i][j];

			//outputCentroids<<generators[i].normal[j]<<",";

		}

		//outputCentroids<<endl;

	}

	//outputCentroids<<endl;

	return true;

}

bool CVTBasedPolycube::SearchNei()
{

	int neiIndex;
	int neiClusterIndex;
	int i, j;
	int position;

	for (i = 0; i < elementNumber; i++)
	{

		for (j = 0; j < elementArray[i].numNeiElements; j++)
		{

			neiIndex = elementArray[i].neiElements[j];

			if (neiIndex != i)
			{

				neiClusterIndex = elementArray[neiIndex].indexCluster;

				IsCounted(elementArray[i], neiClusterIndex, position);

			}

		}

	}

	//Verification

	int error = 0;
	int numNei = 0;

	for (i = 0; i < elementNumber; i++)
	{

		numNei = 0;

		for (j = 0; j < elementArray[i].numNeiCluster; j++)
		{

			numNei = numNei + elementArray[i].numNeiElementEachCluster[j];

		}

		if (numNei != elementArray[i].numNeiElements)
		{

			error++;

		}
	}

	//printf("%d errors occured in searching the neighbor pixels\n", error);

	return true;

}

bool CVTBasedPolycube::IsCounted(CVTElement &currentElement, int indexClusterNeiElement, int &position)
{
	
	int i;

	bool counted = false; // Nice method!!! Learn how to use it!
	int numNeiCluster;

	for (i = 0; i < currentElement.numNeiCluster; i++)
	{

		if (currentElement.indexNeiClusters[i] == indexClusterNeiElement)
		{

			counted = true;
			currentElement.numNeiElementEachCluster[i]++;
			position = i;

			break;

		}

	}

	if (counted == false)
	{

		currentElement.numNeiCluster++;
		numNeiCluster = currentElement.numNeiCluster;

		if (numNeiCluster > NUM_NEI_CLUSTER)
		{

			printf("Warning! the predefined number of neighbor clusters is not OK!\n");
			printf("element index: %d\n", currentElement.index);
			exit(0);

		}
		else
		{

			currentElement.indexNeiClusters[numNeiCluster - 1] = indexClusterNeiElement;

			currentElement.numNeiElementEachCluster[numNeiCluster - 1]++;
			
			position = numNeiCluster - 1;

		}


	}

	return counted;

}

double CVTBasedPolycube::GetNormalDist(const Centroid &currentGenerator, const CVTElement & currentElement)
{

	double dist = 0.0f;

	double vec1[3] = {0.};
	double vec2[3] = {0.};

	int i;

	for (i = 0; i < 3; i++)
	{

		vec1[i] = currentGenerator.normal[i];
		vec2[i] = currentElement.normal[i];

	}

	dist = NormalDist(vec1, vec2);

	dist = dist / 2.0; // normalize the distance to [0, 1]

	return dist;

}

double CVTBasedPolycube::NormalDist(double veca[], double vecb[])
{

	double dist = 0.;

	int i = 0;

	for (i = 0; i < 3; i++)
	{

		dist = dist + (veca[i] - vecb[i]) * (veca[i] - vecb[i]);

	}

	dist = sqrt(dist);

	return dist;

}

bool CVTBasedPolycube::ClassicalCVT()
{

	cout<<"**********************************************************"<<endl;
	cout<<"The Classic CVT algorithm is running"<<endl;

	int i, j, k;

	int numTransfer = elementNumber;
	int threshold = 3;

	int newNearestGenerator;
	int oldNearestGenerator;

	int step = 0;

	while(numTransfer >= threshold)
	{

		numTransfer = 0;

		for (i = 0; i < elementNumber; i++)
		{

			if (IsBoundaryElement(elementArray[i]))
			//if(true)
			{

				newNearestGenerator = GetShortestNormalDist(elementArray[i]);

				oldNearestGenerator = elementArray[i].indexCluster;

				if (newNearestGenerator != oldNearestGenerator)
				{

					DataTransfer(elementArray[i], newNearestGenerator);

					UpdateGenerator(generators[newNearestGenerator], elementArray[i], 1);

					UpdateGenerator(generators[oldNearestGenerator], elementArray[i], 0);

					numTransfer++;

				}

			}

		}

		//RecalculateCentroids();

		//for (j = 0; j < NUM_CLUSTER; j++)
		//{

		//	for (k = 0; k < 3; k++)
		//	{

		//		outputCentroids<<generators[j].normal[k]<<",";

		//	}

		//	outputCentroids<<endl;

		//}

		//outputCentroids<<endl;

		step++;
		printf("..");
		//printf("step %d    %d\n", step, numTransfer);
		if(step > 50)
		{
			break;
		}

	}

	printf("\n Classic CVT is done!\n");

	return true;

}

bool CVTBasedPolycube::IsBoundaryElement(CVTElement &currentElement)
{

	int i;
	int neiIndex;

	bool isOnBoundary = false;

	for (i = 0; i < currentElement.numDirectNei; i++)
	{

		neiIndex = currentElement.directNei[i];

		if (currentElement.indexCluster != elementArray[neiIndex].indexCluster)
		{

			isOnBoundary = true;
			break;

		}

	}

	return isOnBoundary;

}

int CVTBasedPolycube::GetShortestNormalDist(CVTElement &currentElement)
{

	double shortestNormalDist = 0.;
	double tempShortestNormalDist = 0.;

	int indexCluster_shortestNormalDist;
	int currentCluster;
	int indexNeiCluster;
	int i;

	indexCluster_shortestNormalDist = currentElement.indexCluster;
	currentCluster = currentElement.indexCluster;

	shortestNormalDist = GetNormalDist(generators[currentCluster], currentElement);

	for (i = 0; i < currentElement.numNeiCluster; i++)
	{

		if (currentElement.numNeiElementEachCluster[i] != 0) //This condition is some how still necessary???
		{

			if (currentCluster != currentElement.indexNeiClusters[i])
			{

				indexNeiCluster = currentElement.indexNeiClusters[i];

				tempShortestNormalDist = GetNormalDist(generators[indexNeiCluster], currentElement);

				if (tempShortestNormalDist < shortestNormalDist)
				{

					shortestNormalDist = tempShortestNormalDist;

					indexCluster_shortestNormalDist = indexNeiCluster;

				}

			}

		}

	}

	return indexCluster_shortestNormalDist;

}

bool CVTBasedPolycube::DataTransfer(CVTElement &currentElement, int newIndex)
{

	int oldIndex = currentElement.indexCluster;

	int i;
	int newIndexPosition;
	int oldIndexPosition;

	bool oldIndexCounted = false;

	IsCounted(currentElement, newIndex, newIndexPosition);

	for (i = 0; i < currentElement.numNeiCluster; i++)
	{

		if (currentElement.indexNeiClusters[i] == oldIndex)
		{

			currentElement.numNeiElementEachCluster[i]--;

			oldIndexPosition = i;
			oldIndexCounted = true;

			break;

		}

	}

	if(oldIndexCounted == false)
	{
		printf("warning! can not find the cluster for the current pixel in the indexNeiClusters array!\n");
		exit(0);
	}

	oldIndexCounted = false;

	int j;
	int indexNeiData;

	for (i = 0; i < currentElement.numNeiElements; i++)
	{

		indexNeiData = currentElement.neiElements[i];

		if (indexNeiData != currentElement.index)
		{

			IsCounted(elementArray[indexNeiData], newIndex, newIndexPosition);

			for (j = 0; j < elementArray[indexNeiData].numNeiCluster; j++)
			{

				if (elementArray[indexNeiData].indexNeiClusters[j] == oldIndex)
				{

					elementArray[indexNeiData].numNeiElementEachCluster[j]--;

					oldIndexPosition = j;
					oldIndexCounted = true;


					//test

					if (elementArray[indexNeiData].numNeiElementEachCluster[j] == -1)
					{

						j = j;

					}

					//end test

					break;

				}

			}

			if(oldIndexCounted == false)
			{
				printf("warning! can not find the cluster for the current pixel in the indexNeiClusters array!\n");
				exit(0);
			}

		}

	}

	currentElement.indexCluster = newIndex;

	return true;
}

bool CVTBasedPolycube::UpdateGenerator(Centroid &currentGenerator, CVTElement &currentElement, int inOut)
{

	int i;

	if (inOut == 1)
	{

		for (i = 0; i < 3; i++)
		{

			currentGenerator.normal[i] = (currentGenerator.normal[i]*currentGenerator.numElements + currentElement.normal[i]);

			currentGenerator.normal[i] /= (currentGenerator.numElements + 1);

		}

		NormalizeGeneratorNormal(currentGenerator);

		currentGenerator.numElements++;

		return true;
	}
	else if (inOut == 0)
	{

		if (currentGenerator.numElements > 1)
		{

			for (i = 0; i < 3; i++)
			{

				currentGenerator.normal[i] = (currentGenerator.normal[i]*currentGenerator.numElements - currentElement.normal[i]);

				currentGenerator.normal[i] /= (currentGenerator.numElements - 1);

			}

			NormalizeGeneratorNormal(currentGenerator);

			currentGenerator.numElements--;

			return true;

		}
		else
		{

			printf("cluster %d will disappear!\n", currentGenerator.index);
			return false;

		}

	}

	//return true;

}

bool CVTBasedPolycube::NormalizeGeneratorNormal(Centroid &currentGenerator)
{

	double sum = 0.;

	int i;

	for (i = 0; i < 3; i++)
	{
		sum += currentGenerator.normal[i]*currentGenerator.normal[i];
	}

	sum = sqrt(sum);

	for (i = 0; i < 3; i++)
	{
		currentGenerator.normal[i] /= sum;
	}

	return true;

}


bool CVTBasedPolycube::RecalculateCentroids()
{
	
	int i, j;

	double vec1[3] = {0.};
	double vec2[3] = {0.};
	double vec3[3] = {0.};

	for (i = 0; i < 3; i++)
	{

		vec1[i] = generators[0].normal[i];

	}

	vec2[0] = 0.f;
	vec2[1] = sqrt(vec1[2]*vec1[2] / (vec1[2]*vec1[2]+vec1[1]*vec1[1]));
	vec2[2] = -sqrt(vec1[1]*vec1[1] / (vec1[2]*vec1[2]+vec1[1]*vec1[1]));

	CrossProduct(vec1, vec2, vec3);

	for (i = 0; i < 3; i++)
	{

		generators[0].normal[i] = vec1[i];
		generators[1].normal[i] = -vec1[i];

		generators[2].normal[i] = vec2[i];
		generators[3].normal[i] = -vec2[i];

		generators[4].normal[i] = vec3[i];
		generators[5].normal[i] = -vec3[i];

	}

	return true;

}

//Edge-weighted CVT part

bool CVTBasedPolycube::EdgeWeightedCVT()
{

	cout<<"**********************************************************"<<endl;
	cout<<"The Edge-weighted CVT algorithm is running"<<endl;

	int i, j, k;

	int numTransfer = elementNumber;
	int threshold = 3;

	int newNearestGenerator;
	int oldNearestGenerator;

	int step = 0;

	while(numTransfer >= threshold)
	{

		numTransfer = 0;

		for (i = 0; i < elementNumber; i++)
		{

			if (IsBoundaryElement(elementArray[i]))
				//if(true)
			{

				newNearestGenerator = GetShortestEWDist(elementArray[i]);

				oldNearestGenerator = elementArray[i].indexCluster;

				if (newNearestGenerator != oldNearestGenerator)
				{

					DataTransfer(elementArray[i], newNearestGenerator);

					//UpdateGenerator(generators[newNearestGenerator], elementArray[i], 1);

					//UpdateGenerator(generators[oldNearestGenerator], elementArray[i], 0);

					numTransfer++;

				}

			}

		}

		//RecalculateCentroids();

		//for (j = 0; j < NUM_CLUSTER; j++)
		//{

		//	for (k = 0; k < 3; k++)
		//	{

		//		outputCentroids<<generators[j].normal[k]<<",";

		//	}

		//	outputCentroids<<endl;

		//}

		//outputCentroids<<endl;

		step++;
		printf("..");
		//printf("step %d    %d\n", step, numTransfer);
		if(step > 200)
		{
			break;
		}

	}

	printf("\n Edge-weighted CVT is done!\n");


	return true;

}

int CVTBasedPolycube::GetShortestEWDist(CVTElement &currentElement)
{

	double shortestEWDist = 0.;
	double tempshortestEWDist = 0.;

	int indexCluster_shortestEWDist = currentElement.indexCluster;
	int currentCluster = currentElement.indexCluster;
	int indexNeiCluster;

	int i;

	shortestEWDist = GetEWDist(generators[currentCluster], currentElement);

	for (i = 0; i < currentElement.numNeiCluster; i++)
	{

		if (currentElement.numNeiElementEachCluster[i] != 0)
		{

			if (currentCluster != currentElement.indexNeiClusters[i])
			{
				indexNeiCluster = currentElement.indexNeiClusters[i];
				tempshortestEWDist = GetEWDist(generators[indexNeiCluster], currentElement);

				if (tempshortestEWDist < shortestEWDist)
				{
					shortestEWDist = tempshortestEWDist;
					indexCluster_shortestEWDist = indexNeiCluster;
				}

			}

		}

	}

	return indexCluster_shortestEWDist;

}

double CVTBasedPolycube::GetEWDist(const Centroid &currentGenerator, const CVTElement & currentElement)
{

	double EWDist = 0.;

	int j;
	int indexNeiCluster = currentGenerator.index;
	int currentCluster = currentElement.indexCluster;

	EWDist = GetNormalDist(currentGenerator, currentElement);

	EWDist = EWDist * EWDist;

	for (j = 0; j < currentElement.numNeiCluster; j++)
	{

		if (currentElement.indexNeiClusters[j] == indexNeiCluster)
		{

			break;

		}

	}

	double normalizedEWPart = 0.;

	if (currentCluster == indexNeiCluster)
	{

		normalizedEWPart = 2 * WEIGHT_LENGTH_EWCVT * (currentElement.numNeiElements - currentElement.numNeiElementEachCluster[j]);

		normalizedEWPart /= currentElement.numNeiElements;

		EWDist += normalizedEWPart;

	}
	else
	{

		normalizedEWPart = 2 * WEIGHT_LENGTH_EWCVT * (currentElement.numNeiElements - currentElement.numNeiElementEachCluster[j] - 1);

		normalizedEWPart /= currentElement.numNeiElements;

		EWDist += normalizedEWPart;

	}

	EWDist = sqrt(EWDist);

	return EWDist;

}


//Post processing part

bool CVTBasedPolycube::PostProcessing(const char *inputManualName)
{

	//EnforceLabelConnectivity();

	//EnforceBoundaryConnectivity();

	//ModifyWrongBoundaryElements();//commented before

	if (HAS_SPECIAL_ELEMENT == 1)
	{

		ModifySpecialElement(inputManualName);//complicateCAD needs this

		////special
		//int emod[2] = { 14487,14488 };
		//int ecnct[2][3] = { { 7794,7813,7795 },{ 7794,7795,7796 } };
		//int indClus[2] = { 4,2 };
		//for (int i = 0; i < 2; i++)
		//{
		//	elementArray[emod[i]].indexCluster = indClus[i];
		//	for (int j = 0; j < 3; j++)
		//	{
		//		elementArray[emod[i]].index[j] = ecnct[i][j];
		//	}
		//}
			
	}

	//CheckPolycubeValidity();

	

	return true;

}

bool CVTBasedPolycube::ModifySpecialElement(const char *inputManualName)
{

	string tempName;
	string oneLine;
	tempName = inputManualName;

	ifstream myFile(tempName);

	int tempElement, tempCluster;

	if (myFile.is_open())
	{

		while (getline(myFile, oneLine))
		{

			istringstream st(oneLine);

			st >> tempElement >> tempCluster; //>>, not <<

			

			elementArray[tempElement].indexCluster = tempCluster;

			//cout<< tempElement<<" " <<elementArray[tempElement].indexCluster <<" , ";

		}

		myFile.close();

	}
	else
	{
		cout<<"Unable to open file!";
	}

	return true;

}

bool CVTBasedPolycube::EnforceLabelConnectivity()
{

	//cout<<"Label connectivity needs to be enforced!"<<endl;

	int i, j, k, index;
	int label = 0;

	//const int MAX_NUM_CLUSTER = (int) sqrt(elementNumber); //Error may occur if number of clusters is vergy large

	vector<vector<int> > tempCluster(elementNumber);

	for (i = 0; i < elementNumber; i++)
	{

		tempCluster[i].push_back(-1);
		tempCluster[i].push_back(elementArray[i].indexCluster);

	}

	for (i = 0; i < elementNumber; i++)
	{

		if (0 > tempCluster[i][0])
		{

			tempCluster[i][0] = label;

			int count = 1;

			vector<int> tempIndex;

			tempIndex.push_back(i);

			for (int c = 0; c < count; c++)
			{

				for (int n = 0; n < elementArray[tempIndex[c]].numDirectNei; n++)
				{

					index = elementArray[tempIndex[c]].directNei[n];

					if (0 > tempCluster[index][0] && elementArray[i].indexCluster == elementArray[index].indexCluster)
					{

						tempCluster[index][0] = label;

						tempIndex.push_back(index);

						count++;

					}

				}

			}

			label++;

		}

	}

	const int MAX_NUM_CLUSTER = label; // total number of seperated clusters

	vector<CVTElement> elementArrayCopy;

	elementArrayCopy = elementArray;

	for (i = 0; i < elementNumber; i++)
	{

		elementArrayCopy[i].indexCluster = tempCluster[i][0];

	}

	vector<vector<int> > elementInCluster;
	vector<vector<int> > neighborCluster;
	int indexCluster, indexClusterNei;

	elementInCluster.resize(MAX_NUM_CLUSTER);
	neighborCluster.resize(MAX_NUM_CLUSTER, vector<int>(MAX_NUM_CLUSTER, 0));

	for (i = 0; i < elementNumber; i++)
	{

		//Search for all elements in each cluster
		elementInCluster[tempCluster[i][0]].push_back(i);

		if (IsBoundaryElement(elementArrayCopy[i]))
		{

			for (j = 0; j < elementArrayCopy[i].numDirectNei; j++)
			{

				index = elementArrayCopy[i].directNei[j];

				if (elementArrayCopy[i].indexCluster != elementArrayCopy[index].indexCluster)
				{

					indexCluster = elementArrayCopy[i].indexCluster;
					indexClusterNei = elementArrayCopy[index].indexCluster;

					neighborCluster[indexCluster][indexClusterNei]++;

				}

			}

		}

	}

	int kSize = 0;
	int maxClusterIndex;
	int indexNei;

	for (i = 0; i < MAX_NUM_CLUSTER; i++)
	{

		kSize = 0;

		for (j = 0; j < MAX_NUM_CLUSTER; j++)
		{

			if (neighborCluster[i][j] > 0)
			{

				kSize++;

			}

		}

		if (kSize < 4)
		{

			maxClusterIndex = 0;

			for (j = 0; j < MAX_NUM_CLUSTER; j++)
			{

				if (neighborCluster[i][j] > neighborCluster[i][maxClusterIndex])
				{

					maxClusterIndex = j;

				}

			}

			indexNei = elementInCluster[maxClusterIndex][0];

			for (k = 0; k < elementInCluster[i].size(); k++)
			{

				index = elementInCluster[i][k];

				elementArray[index].indexCluster = tempCluster[indexNei][1];

			}


		}


	}

	if (CheckLabelConnectivity() == false)
	{

		EnforceLabelConnectivity();

	}
	else
	{

		//cout<<"Label connectivity is now correct!"<<endl;

		return true;

	}

	//return true;

}

bool CVTBasedPolycube::CheckLabelConnectivity()
{

	int i, j, k, index;
	int label = 0;

	vector<vector<int> > tempCluster(elementNumber);

	for (i = 0; i < elementNumber; i++)
	{

		tempCluster[i].push_back(-1);
		tempCluster[i].push_back(elementArray[i].indexCluster);

	}

	for (i = 0; i < elementNumber; i++)
	{

		if (0 > tempCluster[i][0])
		{

			tempCluster[i][0] = label;

			int count = 1;

			vector<int> tempIndex;

			tempIndex.push_back(i);

			for (int c = 0; c < count; c++)
			{

				for (int n = 0; n < elementArray[tempIndex[c]].numDirectNei; n++)
				{

					index = elementArray[tempIndex[c]].directNei[n];

					if (0 > tempCluster[index][0] && elementArray[i].indexCluster == elementArray[index].indexCluster)
					{

						tempCluster[index][0] = label;

						tempIndex.push_back(index);

						count++;

					}

				}

			}

			label++;

		}

	}

	const int MAX_NUM_CLUSTER = label; // total number of seperated clusters

	vector<CVTElement> elementArrayCopy;

	elementArrayCopy = elementArray;

	for (i = 0; i < elementNumber; i++)
	{

		elementArrayCopy[i].indexCluster = tempCluster[i][0];

	}

	vector<vector<int> > elementInCluster;
	vector<vector<int> > neighborCluster;
	int indexCluster, indexClusterNei;

	elementInCluster.resize(MAX_NUM_CLUSTER);
	neighborCluster.resize(MAX_NUM_CLUSTER, vector<int>(MAX_NUM_CLUSTER, 0));

	for (i = 0; i < elementNumber; i++)
	{

		//Search for all elements in each cluster
		elementInCluster[tempCluster[i][0]].push_back(i);

		if (IsBoundaryElement(elementArrayCopy[i]))
		{

			for (j = 0; j < elementArrayCopy[i].numDirectNei; j++)
			{

				index = elementArrayCopy[i].directNei[j];

				if (elementArrayCopy[i].indexCluster != elementArrayCopy[index].indexCluster)
				{

					indexCluster = elementArrayCopy[i].indexCluster;
					indexClusterNei = elementArrayCopy[index].indexCluster;

					neighborCluster[indexCluster][indexClusterNei]++;

				}

			}

		}

	}

	int kSize = 0;
	int maxClusterIndex;
	int indexNei;

	for (i = 0; i < MAX_NUM_CLUSTER; i++)
	{

		kSize = 0;

		for (j = 0; j < MAX_NUM_CLUSTER; j++)
		{

			if (neighborCluster[i][j] > 0)
			{

				kSize++;

			}

		}

		if (kSize < 4)
		{

			return false;

		}


	}


	return true;

}

bool CVTBasedPolycube::EnforceBoundaryConnectivity()
{

	//cout<<"Boundary connectivity needs to be enforced!"<<endl;

	int i, j, k, index;
	int label = 0;

	vector<vector<int> > tempCluster(elementNumber);

	for (i = 0; i < elementNumber; i++)
	{

		tempCluster[i].push_back(-1);
		tempCluster[i].push_back(elementArray[i].indexCluster);

	}

	for (i = 0; i < elementNumber; i++)
	{

		if (0 > tempCluster[i][0])
		{

			tempCluster[i][0] = label;

			int count = 1;

			vector<int> tempIndex;

			tempIndex.push_back(i);

			for (int c = 0; c < count; c++)
			{

				for (int n = 0; n < elementArray[tempIndex[c]].numDirectNei; n++)
				{

					index = elementArray[tempIndex[c]].directNei[n];

					if (0 > tempCluster[index][0] && elementArray[i].indexCluster == elementArray[index].indexCluster)
					{

						tempCluster[index][0] = label;

						tempIndex.push_back(index);

						count++;

					}

				}

			}

			label++;

		}

	}

	int tempNeiIndex[2] = {-1};

	for (i = 0; i < elementNumber; i++)
	{

		int kSize = 0;

		for (j = 0; j < elementArray[i].numDirectNei; j++)
		{

			if (tempCluster[i][0] != tempCluster[elementArray[i].directNei[j]][0])
			{

				tempNeiIndex[kSize] = elementArray[i].directNei[j];

				kSize++;
			}

		}

		if (kSize > 1 && tempCluster[tempNeiIndex[0]][0] == tempCluster[tempNeiIndex[1]][0])
		{

			elementArray[i].indexCluster = elementArray[tempNeiIndex[0]].indexCluster;

			tempCluster[i][0] = tempCluster[tempNeiIndex[0]][0];
			tempCluster[i][1] = tempCluster[tempNeiIndex[0]][1];

		}

	}


	if (CheckBoundaryConnectivity() == false)
	{

		EnforceBoundaryConnectivity();

		//return false;

	}
	else
	{

		//cout<<"Label connectivity is now correct!"<<endl;

		return true;

	}


}

bool CVTBasedPolycube::SmoothBoundaryCurve()
{

	int i, j, k, p;
	int index;

	for (i = 0; i < NUM_POLYCUBE_PATCH; i++)
	{

		for (j = 0; j < polycubePatch[i].numCorner; j++)
		{

			for (k = 0; k < polycubePatch[i].boundaryEdge[j].size(); k++)
			{

				int count = 0;
				vector<int> neiElements;
				int indexCluster_one, indexCluster_two;

				indexCluster_one = polycubePatch[i].indexCluster;

				index = polycubePatch[i].boundaryEdge[j][k];

				if (IsCornerPoint(index) == true)
				{
					continue;
				}

				for (p = 0; p < elementValenceNumber[index]; p++)
				{
					int tempIndex = elementValence[index][p];

					if (elementArray[tempIndex].indexCluster == indexCluster_one)
					{
						count++;
						neiElements.push_back(tempIndex);
					}
					else
					{
						indexCluster_two = elementArray[tempIndex].indexCluster;
					}
				}

				if (count == 2)
				{

					int fourNodes[4];

					fourNodes[0] = polycubePatch[i].boundaryEdge[j][k];
					fourNodes[1] = polycubePatch[i].boundaryEdge[j][k+1];
					fourNodes[2] = polycubePatch[i].boundaryEdge[j][k-1];

					for (p = 0; p < 3; p++)
					{

						if (element[neiElements[0]][p] != fourNodes[0] && element[neiElements[0]][p] != fourNodes[1] && element[neiElements[0]][p] != fourNodes[2])
						{
							fourNodes[3] = element[neiElements[0]][p];
							break;
						}

					}

					double tempCenter[3];

					for (p = 0; p < 3; p++)
					{
						tempCenter[p] = 0.f;
					}

					for (p = 0; p < 3; p++)
					{
						tempCenter[p] += vertex[fourNodes[1]][p] + vertex[fourNodes[2]][p];
						tempCenter[p] += vertex[fourNodes[0]][p] + vertex[fourNodes[3]][p];
					}

					for (p = 0; p < 3; p++)
					{
						vertex[fourNodes[0]][p] = 0.25 * tempCenter[p]; // calculate the center point, assign it to the node!
					}

				}

			}

		}

	}

	return true;

}

bool CVTBasedPolycube::CurveFittingBoundaryCurve()
{

	int i, j, k, l;
	int index, indexPrev;
	int edgeSize;

	double totalLength, tempLength;

	vector<int> edgeValueVec;
	int edgeValue;
	bool used_edge;

	for (i = 0; i < NUM_POLYCUBE_PATCH; i++)
	{

		for (j = 0; j < polycubePatch[i].boundaryEdge.size(); j++)
		{

			edgeSize = polycubePatch[i].boundaryEdge[j].size();

			//////////////////////////////////////////////////////////////
			//Check if used already
			edgeValue = 0;
			used_edge = false;
			for (k = 0; k < edgeSize; k++)
			{
				edgeValue += polycubePatch[i].boundaryEdge[j][k];
			}

			for (k = 0; k < edgeValueVec.size(); k++)
			{

				if (edgeValue == edgeValueVec[k])
				{
					used_edge = true;
					break;
				}

			}

			if (used_edge == true)
			{
				continue;
			}
			else
			{
				edgeValueVec.push_back(edgeValue);
			}
			//////////////////////////////////////////////////////////////

			int N = edgeSize-1;
			vector<double> lengthRatio(edgeSize, 0.0);
			//XYZ inputNodes[N+1];

			vector<XYZ> inputNodes;
			inputNodes.resize(N+1);
			vector<XYZ> outputNodes(edgeSize);

			const int RESOLUTION = 1000;

			vector<XYZ> outputRes(RESOLUTION);

			for (k = 0; k < edgeSize; k++)
			{
				index = polycubePatch[i].boundaryEdge[j][k];
				inputNodes[k].x = vertex[index][0];
				inputNodes[k].y = vertex[index][1];
				inputNodes[k].z = vertex[index][2];
			}

			int T = 4;

			vector<int> knots;
			knots.resize(N+T+1);

			SplineKnots(knots, N, T);

			totalLength = 0.f;
			for (k = 1; k < edgeSize; k++)
			{

				index = polycubePatch[i].boundaryEdge[j][k];
				indexPrev = polycubePatch[i].boundaryEdge[j][k-1];

				tempLength = 0.f;

				for (l = 0; l < 3; l++)
				{
					tempLength += pow(vertex[index][l]-vertex[indexPrev][l], 2);
				}

				tempLength = sqrt(tempLength);
				totalLength += tempLength;

			}

			tempLength = 0.f;
			for (k = 1; k < edgeSize; k++)
			{
				double tempLengthOne = 0.f;
				index = polycubePatch[i].boundaryEdge[j][k];
				indexPrev = polycubePatch[i].boundaryEdge[j][k-1];

				for (l = 0; l < 3; l++)
				{
					tempLengthOne += pow(vertex[index][l]-vertex[indexPrev][l], 2);
				}

				tempLengthOne = sqrt(tempLengthOne);

				tempLength += tempLengthOne;

				lengthRatio[k] = tempLength / totalLength;
			}

			//SplineCurve(inputNodes, N, knots, T, outputNodes, lengthRatio);
			//for (k = 0; k < edgeSize; k++)
			//{
			//	index = polycubePatch[i].boundaryEdge[j][k];
			//	vertex[index][0] = outputNodes[k].x;
			//	vertex[index][1] = outputNodes[k].y;
			//	vertex[index][2] = outputNodes[k].z;
			//}
			
			SplineCurve(inputNodes, N, knots, T, outputRes, RESOLUTION);

			/*for (k = 0; k < edgeSize - 1; k++)
			{
				index = polycubePatch[i].boundaryEdge[j][k];

				int tempInt = (int) (lengthRatio[k] * RESOLUTION);

				vertex[index][0] = outputRes[tempInt].x;
				vertex[index][1] = outputRes[tempInt].y;
				vertex[index][2] = outputRes[tempInt].z;
			}

			index = polycubePatch[i].boundaryEdge[j][edgeSize-1];

			vertex[index][0] = outputRes[RESOLUTION-1].x;
			vertex[index][1] = outputRes[RESOLUTION-1].y;
			vertex[index][2] = outputRes[RESOLUTION-1].z;*/

			double tempMin = 10000000.0f;
			int tempCount;
			for (k = 0; k < edgeSize; k++)
			{
				tempMin = 10000000.0f;
				index = polycubePatch[i].boundaryEdge[j][k];
				for (l = 0; l < RESOLUTION; l++)
				{

					double tempDouble = 0;
					tempDouble += pow(vertex[index][0]-outputRes[l].x, 2);
					tempDouble += pow(vertex[index][1]-outputRes[l].y, 2);
					tempDouble += pow(vertex[index][2]-outputRes[l].z, 2);

					tempDouble = sqrt(tempDouble);

					if (tempDouble < tempMin)
					{
						tempMin = tempDouble;
						tempCount = l;
					}

				}

				vertex[index][0] = outputRes[tempCount].x;
				vertex[index][1] = outputRes[tempCount].y;
				vertex[index][2] = outputRes[tempCount].z;

			}

		}

	}

	return true;

}

void CVTBasedPolycube::SplineKnots(vector<int> &u, int n, int t)
{

	int j;

	for (j = 0; j <= n+t; j++)
	{

		if (j < t)
		{
			u[j] = 0;
		}
		else if (j <= n)
		{
			u[j] = j - t + 1;
		}
		else if (j > n)
		{
			u[j] = n - t + 2;
		}

	}

}

void CVTBasedPolycube::SplineCurve(const vector<XYZ> &inp, int n, const vector<int> &knots, int t, vector<XYZ> &outp, const vector<double> &ratio)
{

	int i;
	int numNodes;
	XYZ tempOutp;

	numNodes = ratio.size();

	double tempDouble;

	//for (i = 0; i < numNodes; i++)
	//{
	//	tempDouble = (n - t + 2) * ratio[i];
	//	SplinePoint(knots, n, t, tempDouble, inp, tempOutp);
	//	outp[i] = tempOutp;
	//}

	for (i = 0; i < numNodes-1; i++)
	{
		tempDouble = (n - t + 2) * ratio[i];
		SplinePoint(knots, n, t, tempDouble, inp, tempOutp);
		outp[i] = tempOutp;
	}

	outp[numNodes-1] = inp[n];
}

void CVTBasedPolycube::SplineCurve(const vector<XYZ> &inp, int n, const vector<int> &knots, int t, vector<XYZ> &outp, int res)
{

	int i; 

	double interval, increment;

	interval = 0.f;
	increment = (n - t + 2) / (double)(res-1);

	for (i = 0; i < res-1; i++)
	{

		SplinePoint(knots, n, t, interval, inp, outp[i]);

		interval += increment;
	}

	outp[res-1] = inp[n];

}

void CVTBasedPolycube::SplinePoint(const vector<int> &u, int n, int t, double v, const vector<XYZ> &control, XYZ &output)
{

	int k;
	double b;

	output.x = 0.f;
	output.y = 0.f;
	output.z = 0.f;

	for (k = 0; k <= n; k++)
	{
		b = SplineBlend(k, t, u, v);

		output.x += control[k].x * b;
		output.y += control[k].y * b;
		output.z += control[k].z * b;
	}

}

//void CVTBasedPolycube::SplinePoint(const vector<int> &u, int n, int t, double v, const vector<XYZ> &control, vector<XYZ> &output)
//{
//
//	int k;
//	double b;
//
//	output.x = 0.f;
//	output.y = 0.f;
//	output.z = 0.f;
//
//	for (k = 0; k <= n; k++)
//	{
//		b = SplineBlend(k, t, u, v);
//
//		output.x += control[k].x * b;
//		output.y += control[k].y * b;
//		output.z += control[k].z * b;
//	}
//
//}

double CVTBasedPolycube::SplineBlend(int k, int t, const vector<int> &u, double v)
{

	double value;

	if (t == 1) 
	{
		if ((u[k] <= v) && (v < u[k+1]))
			value = 1;
		else
			value = 0;
	} 
	else 
	{
		if ((u[k+t-1] == u[k]) && (u[k+t] == u[k+1]))
			value = 0;
		else if (u[k+t-1] == u[k]) 
			value = (u[k+t] - v) / (u[k+t] - u[k+1]) * SplineBlend(k+1,t-1,u,v);
		else if (u[k+t] == u[k+1])
			value = (v - u[k]) / (u[k+t-1] - u[k]) * SplineBlend(k,t-1,u,v);
		else
			value = (v - u[k]) / (u[k+t-1] - u[k]) * SplineBlend(k,t-1,u,v) + 
			(u[k+t] - v) / (u[k+t] - u[k+1]) * SplineBlend(k+1,t-1,u,v);
	}

	return(value);

}

bool CVTBasedPolycube::ModifyWrongBoundaryElements()
{

	int i, j, k;
	int index;

	for (i = 0; i < NUM_POLYCUBE_PATCH; i++)
	{

		for (j = 0; j < polycubePatch[i].numCorner; j++)
		{

			int count = 0;
			vector<int> neiElements;

			index = polycubePatch[i].cornerPoint[j];

			for (k = 0; k < elementValenceNumber[index]; k++)
			{

				int tempIndex = elementValence[index][k];

				if (elementArray[tempIndex].indexCluster == polycubePatch[i].indexCluster)
				{

					count++;
					neiElements.push_back(tempIndex);

				}

			}

			if (count == 1)
			{

				if (neiElements.size() != 1)
				{
					cout <<"ERROR!!! neiElement.size != 1"<<endl;
				}

				EdgeFlipTwoElements(index, neiElements[0]);

			}

		}

	}

	//Reinitialization
	////////////////////////////////////////////////////////////////////////////
	InitiateElementValence();
	InitializeElement();
	///////////////////////////////////////////////////////////////////////////

	return true;

}

//This function will modify the original vertex and element of the mesh, be careful
bool CVTBasedPolycube::EdgeFlipTwoElements(int vertexID, int elementID)
{

	int i, j, indexVertex;
	int indexElement;
	int fourVertices[4];
	int twoElements[2];

	fourVertices[0] = vertexID;

	twoElements[0] = elementID;

	for (i = 0; i < 3; i++)
	{

		if (element[elementID][i] == vertexID)
		{

			fourVertices[1] = element[elementID][(i+1)%3];

			fourVertices[2] = element[elementID][(i+2)%3];

			break;

		}

	}

	indexVertex = fourVertices[1];

	for (i = 0; i < elementValenceNumber[indexVertex]; i++)
	{

		bool count = true;

		for (j = 0; j < 3; j++)
		{

			if (element[elementValence[indexVertex][i]][j] == indexVertex)
			{

				if (fourVertices[2] == element[elementValence[indexVertex][i]][(j+3-1)%3])
				{

					fourVertices[3] = element[elementValence[indexVertex][i]][(j+1)%3];

					twoElements[1] = elementValence[indexVertex][i];

					count = false;

					break;

				}

			}

		}

		if (count == false)
		{

			break;

		}

	}

	indexElement = twoElements[0];

	element[indexElement][0] = fourVertices[0];
	element[indexElement][1] = fourVertices[1];
	element[indexElement][2] = fourVertices[3];

	indexElement = twoElements[1];

	element[indexElement][0] = fourVertices[3];
	element[indexElement][1] = fourVertices[2];
	element[indexElement][2] = fourVertices[0];

	return true;

}


bool CVTBasedPolycube::CheckBoundaryConnectivity()
{

	int i, j, k, index;
	int label = 0;

	vector<vector<int> > tempCluster(elementNumber);

	for (i = 0; i < elementNumber; i++)
	{

		tempCluster[i].push_back(-1);
		tempCluster[i].push_back(elementArray[i].indexCluster);

	}

	for (i = 0; i < elementNumber; i++)
	{

		if (0 > tempCluster[i][0])
		{

			tempCluster[i][0] = label;

			int count = 1;

			vector<int> tempIndex;

			tempIndex.push_back(i);

			for (int c = 0; c < count; c++)
			{

				for (int n = 0; n < elementArray[tempIndex[c]].numDirectNei; n++)
				{

					index = elementArray[tempIndex[c]].directNei[n];

					if (0 > tempCluster[index][0] && elementArray[i].indexCluster == elementArray[index].indexCluster)
					{

						tempCluster[index][0] = label;

						tempIndex.push_back(index);

						count++;

					}

				}

			}

			label++;

		}

	}

	int tempNeiIndex[2] = {-1};

	for (i = 0; i < elementNumber; i++)
	{

		int kSize = 0;

		for (j = 0; j < elementArray[i].numDirectNei; j++)
		{

			if (tempCluster[i][0] != tempCluster[elementArray[i].directNei[j]][0])
			{

				tempNeiIndex[kSize] = elementArray[i].directNei[j];

				kSize++;

			}

		}

		if (kSize > 1 && tempCluster[tempNeiIndex[0]][0] == tempCluster[tempNeiIndex[1]][0])
		{

			return false;

		}

	}

	return true;

}


//Check the validity of the polycube
bool CVTBasedPolycube::CheckPolycubeValidity()
{

	int i, j, index;
	int indexCluster, indexClusterNei;

	vector<vector<int> > elementInCluster;
	vector<vector<int> > neighborCluster;

	elementInCluster.resize(NUM_CLUSTER);
	neighborCluster.resize(NUM_CLUSTER, vector<int>(NUM_CLUSTER, 0));

	for (i = 0; i < elementNumber; i++)
	{

		indexCluster = elementArray[i].indexCluster;

		elementInCluster[indexCluster].push_back(i);

		if (IsBoundaryElement(elementArray[i]))
		{

			for (j = 0; j < elementArray[i].numDirectNei; j++)
			{

				index = elementArray[i].directNei[j];

				if (elementArray[i].indexCluster != elementArray[index].indexCluster)
				{

					indexCluster = elementArray[i].indexCluster;
					indexClusterNei = elementArray[index].indexCluster;

					neighborCluster[indexCluster][indexClusterNei]++;

				}

			}

		}


	}

	int k, kSize = 0;
	int indexNei;
	vector<vector<int> > neiClusterIndex;

	neiClusterIndex.resize(NUM_CLUSTER);

	for (i = 0; i < NUM_CLUSTER; i++)
	{

		kSize = 0;

		for (j = 0; j < NUM_CLUSTER; j++)
		{

			if (neighborCluster[i][j] > 0)
			{

				neiClusterIndex[i].push_back(j);

				kSize++;

			}

		}

		if (kSize != 4)
		{

			cout<<"Wrong polycube: number of neighboring cluster != 4!!!"<<endl;

			return false;

		}
		else
		{

			switch (i % 2)
			{
				case 0:

					for (k = 0; k < 4; k++)
					{

						if (neiClusterIndex[i][k] == (i+1))
						{

							cout<<"Wrong polycube: two neighboring clusters intersect!!!"<<endl;
							cout<<"Error cluster ID: "<<i<<endl;

							return false;
						}

					}

				break;

				case 1:

					for (k = 0; k < 4; k++)
					{

						if (neiClusterIndex[i][k] == (i-1))
						{

							cout<<"Wrong polycube: two neighboring clusters intersect!!!"<<endl;
							cout<<"Error cluster ID: "<<i<<endl;

							return false;
						}

					}

					break;
				
			}

		}

	}

	//cout<<"Good polycube!!!"<<endl;

	return true;

}


//Output various results in the following

bool CVTBasedPolycube::OutputResults()
{

	int i, j;
	double tempVec[3];

	InitiateMatrix(vertexColor, vertexNumber);

	ComputeNormal();

	for (i = 0; i < vertexNumber; i++)
	{

		for (j = 0; j < 3; j++)
		{

			tempVec[j] = vertexNormal[i][j];

		}

		Normalize(tempVec);

		for (j = 0; j < 3; j++)
		{

			vertexColor[i][j] = (tempVec[j] + 1) * 0.5;

		}

	}

	Write("colorTest_tri.rawc");

	return true;
}


// Polycube construction part

bool CVTBasedPolycube::InitializePolycube()
{

	cout<<"**********************************************************"<<endl;
	cout<<"Initializing the polycube structure!"<<endl;

	int i, j, k, index;
	int label = 0;

	//const int MAX_NUM_CLUSTER = (int) sqrt(elementNumber); //Error may occur if number of clusters is vergy large

	vector<vector<int> > tempCluster(elementNumber);

	for (i = 0; i < elementNumber; i++)//here elements only divided into 6 groups (normal directions), each with a indexCluster
	{

		tempCluster[i].push_back(-1);
		tempCluster[i].push_back(elementArray[i].indexCluster);

	}

	for (i = 0; i < elementNumber; i++)//here further divide elements into patches, each with a label
	{

		if (0 > tempCluster[i][0])//meaning not yet assigned with a patch label
		{

			tempCluster[i][0] = label;

			int count = 1;

			vector<int> tempIndex;//elements with the same label

			tempIndex.push_back(i);

			for (int c = 0; c < count; c++)//count==tempIndex.size()
			{

				for (int n = 0; n < elementArray[tempIndex[c]].numDirectNei; n++)
				{

					index = elementArray[tempIndex[c]].directNei[n];

					if (0 > tempCluster[index][0] && elementArray[i].indexCluster == elementArray[index].indexCluster)
					{

						tempCluster[index][0] = label;

						tempIndex.push_back(index);

						count++;

					}

				}

			}

			label++;

		}

	}

	NUM_POLYCUBE_PATCH = label; // total number of separated polycube patches

	polycubePatch.resize(NUM_POLYCUBE_PATCH);

	//cout << polycubePatch.size() << "\n"; getchar();

	for (i = 0; i < NUM_POLYCUBE_PATCH; i++)
	{

		polycubePatch[i].index = i;

		polycubePatch[i].numCorner = 0;

		polycubePatch[i].numElements = 0;

	}

	for (i = 0; i < elementNumber; i++)
	{

		index = tempCluster[i][0];

		polycubePatch[index].element.push_back(i);
		polycubePatch[index].numElements++;

		///////////////////////////////////////////////////
		////assign each element to one patch, 12/18/2014
		elementArray[i].indexPatch = index;
		///////////////////////////////////////////////////

		////////////////////////////////////////////////////////
		/////////output special elements
		//if (index == 23)
		//{
		//	outputSpecialElements<< i << " " << 1 << endl;
		//}
		//else if (index == 27)
		//{
		//	outputSpecialElements<< i << " " << 0 << endl;
		//}
		///////////////////////////////////////////////////////

	}

	for (i = 0; i < NUM_POLYCUBE_PATCH; i++)
	{

		index = polycubePatch[i].element[0];

		polycubePatch[i].indexCluster = tempCluster[index][1];//assign each patch the cluster number

	}


	SearchCornerandBoundary();

	if (CURVE_SMOOTH == 1)
	{

		SmoothBoundaryCurve();
		OutputPatchesVTK("test.vtk");
	}

	ModifyWrongBoundaryElements();
	
	if (CURVE_FITTING == 1)
	{

		CurveFittingBoundaryCurve();

		OutputPatchesVTK("test2.vtk");
	}

	//OutputPatchesVTK("torus_coarse_tri_output_CleanUp_modified.vtk");

	ParametricMapping();

	return true;

}


bool CVTBasedPolycube::SearchCornerandBoundary()
{

	InitiateElementValence();

	int i, j;
	int index;
	int vertexCCW;

	vector<int> cornerPoints;

	for (i = 0; i < vertexNumber; i++)
	{

		if (IsCornerPoint(i))
		{

			cornerPoints.push_back(i);

		}

	}

	//cout << "Corner Points: ";
	//for (i = 0; i < cornerPoints.size(); i++)
	//{
	//	cout << cornerPoints[i] << ",";
	//}
	//cout << "\n"; getchar();


	int firstCorner;
	int tempIndex;

	for (i = 0; i < NUM_POLYCUBE_PATCH; i++)
	{

		vector<int> tempCornerPoints;

		for (j = 0; j < polycubePatch[i].numElements; j++)
		{

			index = polycubePatch[i].element[j];

			for (int k = 0; k < 3; k++)
			{

				tempIndex = element[index][k];
				
				if (IsCornerPoint(tempIndex))
				{

					bool kCount = true;

					for (int kk = 0; kk < tempCornerPoints.size(); kk++)
					{

						if (tempIndex == tempCornerPoints[kk])
						{

							kCount = false;

						}

					}

					if (kCount == true)
					{

						tempCornerPoints.push_back(tempIndex);

					}

				}

			}

		}

		polycubePatch[i].numCorner = tempCornerPoints.size();

		//polycubePatch[i].numCorner = 1;

		firstCorner = FindOneCornerPoint(polycubePatch[i]);

		polycubePatch[i].cornerPoint.push_back(firstCorner);

		int count = 1;

		vector<int> tempNodes;

		tempNodes.push_back(firstCorner);

		for (int c = 0; c < count; c++)
		{

			for (int n = 0; n < elementValenceNumber[tempNodes[c]]; n++)
			{

				index = elementValence[tempNodes[c]][n];

				vertexCCW = SearchCCWVertex(tempNodes[c], index);

				if (elementArray[index].indexCluster == polycubePatch[i].indexCluster && IsBoundaryPoint(vertexCCW) && IsBoundaryEdge(tempNodes[c], vertexCCW))
				{

					tempNodes.push_back(vertexCCW);

					count++;

				}
				else if (elementArray[index].indexCluster == polycubePatch[i].indexCluster && IsCornerPoint(vertexCCW) && IsBoundaryEdge(tempNodes[c], vertexCCW))
				{

					if (vertexCCW == firstCorner)
					{

						tempNodes.push_back(vertexCCW);
						polycubePatch[i].boundaryEdge.push_back(tempNodes);

						tempNodes.clear();
						
						if (polycubePatch[i].cornerPoint.size() == polycubePatch[i].numCorner)
						{

							count = -1;

							break;
						}
						else
						{					

							for (int ii = 0; ii < tempCornerPoints.size(); ii++)
							{

								bool tempCount = false;

								tempIndex = tempCornerPoints[ii];

								for (int jj = 0; jj < polycubePatch[i].cornerPoint.size(); jj++)
								{

									if (tempIndex == polycubePatch[i].cornerPoint[jj])
									{

										tempCount = true;

									}

								}

								if (tempCount == false)
								{

									firstCorner = tempIndex;

									break;

								}

							}

							polycubePatch[i].cornerPoint.push_back(firstCorner);

							tempNodes.push_back(firstCorner);

							count = 1;

							c = -1;

							break;

						}

					}
					else
					{

						tempNodes.push_back(vertexCCW);

						polycubePatch[i].cornerPoint.push_back(vertexCCW);

						//polycubePatch[i].numCorner++;

						polycubePatch[i].boundaryEdge.push_back(tempNodes);

						tempNodes.clear();

						tempNodes.push_back(vertexCCW);

						count = 1;

						c = -1; // Very important

						break;

					}
					
				}

			}

		}

	}

	////output patch boundary, me added
	//vector<int> vflag(vertexNumber, 0);
	//int nedge(0);
	//for (i = 0; i < polycubePatch.size(); i++)
	//{
	//	for (j = 0; j < polycubePatch[i].boundaryEdge.size(); j++)
	//	{
	//		for (int k = 0; k < polycubePatch[i].boundaryEdge[j].size(); k++)
	//		{
	//			vflag[polycubePatch[i].boundaryEdge[j][k]] = 1;
	//			if (k > 0) nedge++;
	//		}
	//	}
	//}
	//vector<int> vbedge(vertexNumber, -1);
	//int count(0);
	//for (i = 0; i < vertexNumber; i++)
	//{
	//	if (vflag[i] == 1)
	//	{
	//		vbedge[i] = count++;
	//	}
	//}

	//ofstream fout;
	//fout.open("../io/CAD/bedge.vtk");
	//if (fout.is_open())
	//{
	//	fout << "# vtk DataFile Version 3.1 " << "\n";
	//	fout << "for LSEConsole" << "\n";
	//	fout << "ASCII" << "\n";
	//	fout << "DATASET UNSTRUCTURED_GRID" << "\n";
	//	fout << "POINTS " << count << " FLOAT" << "\n";
	//	for (i = 0; i < vertexNumber; i++)
	//	{
	//		if (vflag[i] == 1)
	//		{
	//			fout << vertex[i][0] << "\t" << vertex[i][1] << "\t" << vertex[i][2] << "\n";
	//		}
	//	}
	//	fout << "CELLS " << nedge << " " << 3 * nedge << "\n";
	//	for (i = 0; i < polycubePatch.size(); i++)
	//	{
	//		for (j = 0; j < polycubePatch[i].boundaryEdge.size(); j++)
	//		{
	//			for (int k = 0; k < polycubePatch[i].boundaryEdge[j].size() - 1; k++)
	//			{
	//				int itmp[2] = { polycubePatch[i].boundaryEdge[j][k],polycubePatch[i].boundaryEdge[j][k + 1] };
	//				fout << "2 " << vbedge[itmp[0]] << " " << vbedge[itmp[1]] << "\n";
	//			}
	//		}
	//	}
	//	fout << "CELL_TYPES " << nedge << '\n';
	//	for (int i = 0; i < nedge; i++) fout << "3\n";
	//	fout.close();
	//}
	

	return true;

}


bool CVTBasedPolycube::IsCornerPoint(int vertexID)
{

	int i, j, index, indexCluster;
	int kSize = 0;

	//bool counted = true;

	vector<int> neiCluster;

	for (i = 0; i < elementValenceNumber[vertexID]; i++)
	{

		bool counted = true;

		index = elementValence[vertexID][i];

		indexCluster = elementArray[index].indexCluster;

		for (j = 0; j < neiCluster.size(); j++)
		{

			if (neiCluster[j] == indexCluster)
			{

				counted = false;

			}

		}

		if (counted == true)
		{

			neiCluster.push_back(indexCluster);

			kSize++;

		}

	}

	if (kSize == 3)
	{

		return true;

	}
	else
	{

		return false;

	}

}

int CVTBasedPolycube::FindOneCornerPoint(Polycube &currentPolycubePatch)
{

	int i, j;
	int index;
	int vertexID;

	for (i = 0; i < currentPolycubePatch.numElements; i++)
	{
		
		index = currentPolycubePatch.element[i];
		
		for (j = 0; j < 3; j++)
		{	

			vertexID = element[index][j];

			if (IsCornerPoint(vertexID))
			{

				return vertexID;

			}

		}

	}

}

bool CVTBasedPolycube::IsBoundaryPoint(int vertexID)
{

	int i, j, index, indexCluster;
	int kSize = 0;

	//bool counted = true;

	vector<int> neiCluster;

	for (i = 0; i < elementValenceNumber[vertexID]; i++)
	{

		bool counted = true;

		index = elementValence[vertexID][i];

		indexCluster = elementArray[index].indexCluster;

		for (j = 0; j < neiCluster.size(); j++)
		{

			if (neiCluster[j] == indexCluster)
			{

				counted = false;

			}

		}

		if (counted == true)
		{

			neiCluster.push_back(indexCluster);

			kSize++;

		}

	}

	if (kSize == 2)
	{

		return true;

	}
	else
	{

		return false;

	}


}

bool CVTBasedPolycube::IsInteriorPoint(int vertexID)
{

	int i, j, index, indexCluster;
	int kSize = 0;

	//bool counted = true;

	vector<int> neiCluster;

	for (i = 0; i < elementValenceNumber[vertexID]; i++)
	{

		bool counted = true;

		index = elementValence[vertexID][i];

		indexCluster = elementArray[index].indexCluster;

		for (j = 0; j < neiCluster.size(); j++)
		{

			if (neiCluster[j] == indexCluster)
			{

				counted = false;

			}

		}

		if (counted == true)
		{

			neiCluster.push_back(indexCluster);

			kSize++;

		}

	}

	if (kSize == 1)
	{

		return true;

	}
	else
	{

		return false;

	}
	
}


bool CVTBasedPolycube::IsBoundaryEdge(int vertexIDone, int vertexIDtwo)
{

	int twoElement[2] = {0};

	int i, j, index;

	int count = 0;

	for (i = 0; i < elementValenceNumber[vertexIDone]; i++)
	{

		index = elementValence[vertexIDone][i];

		for (j = 0; j < 3; j++)
		{

			if (element[index][j] == vertexIDtwo)
			{

				twoElement[count] = index;

				count++;

			}

		}

	}

	if (count != 2)
	{

		cout<<"Error in IsboundaryEdge!!!"<<endl;

		exit;

	}

	if (elementArray[twoElement[0]].indexCluster != elementArray[twoElement[1]].indexCluster)
	{

		return true;

	}
	else
	{

		return false;

	}

}


int CVTBasedPolycube::SearchCCWVertex(int vertexID, int elementID)
{

	int i;
	int vertexCCW;
	int position = 0;

	for (i = 0; i < 3; i++)
	{

		if (element[elementID][i] == vertexID)
		{

			position = i;

			break;
		}

	}

	if (position == 2)
	{
		position = 0;

		vertexCCW = element[elementID][position];
		
		return vertexCCW;
	}
	else
	{

		position++;

		vertexCCW = element[elementID][position];

		return vertexCCW;

	}

}

bool CVTBasedPolycube::ParametricMapping()
{
	
	polycubePara = NULL;

	CopyMesh(polycubePara);

	if (READ_IN_MAPPING == 1)
	{
		for (int i = 0; i < vertexNumber; i++)
		{

			if (IsCornerPoint(i))
			{

				cornerPoints.push_back(i);

			}

		}

		numberCornerPoints = cornerPoints.size();

		polycubePara->Read("mapping_tri.raw");//note that here need to get polycubePara

	}
	else
	{
		if (READ_IN_CORNERS == 1)
		{
			ParametricMappingCornerByInput();
			//ParametricMappingCornerByInput_ID();//by Xiaodong
		}
		else
		{
			ParametricMappingCorner();
		}	

		ParametricMappingEdge();

		//OutputPatchesVTKPara("../io/CAD/corner.vtk");

		ParametricMappingInterior();

		//polycubePara->Write("../io/honda2/mapping_tri.raw");

	}

	//cout << "Done parametric mapping!\n"; getchar();

	return true;

}


bool CVTBasedPolycube::ParametricMappingCorner()
{

	int i, j;

	for (i = 0; i < NUM_POLYCUBE_PATCH; i++)
	{

		CornerMappingMaxMin(polycubePatch[i]);

	}	

	//me added, for Honda2
	//for (i = 0; i < NUM_POLYCUBE_PATCH; i++)
	//{
	//	CornerMappingMaxMin_ManualAdjust(polycubePatch[i]);
	//}

	//int numberCornerPoints;
	//vector<int> cornerPoints;

	int index;

	double maxXYZ[3] = {-1000000.0}, minXYZ[3] = {1000000.0};

	double maxDimension = -1000000.0f;

	for (i = 0; i < vertexNumber; i++)
	{

		if (IsCornerPoint(i))
		{

			cornerPoints.push_back(i);

		}

	}

	numberCornerPoints = cornerPoints.size();

	for (i = 0; i < numberCornerPoints; i++)
	{

		index = cornerPoints[i];

		for (j = 0; j < 3; j++)
		{

			if (maxXYZ[j] < polycubePara->vertex[index][j])
			{

				maxXYZ[j] = polycubePara->vertex[index][j];

			}

			if (minXYZ[j] > polycubePara->vertex[index][j])
			{

				minXYZ[j] = polycubePara->vertex[index][j];

			}

		}

	}

	for (i = 0; i < 3; i++)
	{

		if (maxDimension < (maxXYZ[i] - minXYZ[i]))
		{

			maxDimension = maxXYZ[i] - minXYZ[i];

		}

	}

	for (i = 0; i < numberCornerPoints; i++)
	{

		index = cornerPoints[i];

		for (j = 0; j < 3; j++)
		{

			//int tempValue = (int) 0.f + (polycubePara->vertex[index][j]-minXYZ[j]) / (maxXYZ[j]-minXYZ[j]) * 64.0f + 0.5f;
			int tempValue = (int) 0.f + (polycubePara->vertex[index][j]-minXYZ[j]) / maxDimension * DOMAIN_SIZE + 0.5f;

			polycubePara->vertex[index][j] = tempValue;

			//outputCornerPoints << polycubePara->vertex[index][j] << " ";//", " before
		}

		//outputCornerPoints<<endl;

	}

	return true;

}

bool CVTBasedPolycube::ParametricMappingCornerByInput()
{

	string tempName;
	string oneLine;
	tempName = inputName + "_Output_CornerPoints.txt";

	ifstream myFile(tempName);

	int tempX, tempY, tempZ;

	int i = 0, index;

	for (i = 0; i < vertexNumber; i++)
	{

		if (IsCornerPoint(i))
		{

			cornerPoints.push_back(i);

		}

	}

	numberCornerPoints = cornerPoints.size();

	i = 0;

	if (myFile.is_open())
	{

		while (getline(myFile, oneLine))
		{

			istringstream st(oneLine);

			st >> tempX >> tempY >> tempZ; //>>, not <<

			index = cornerPoints[i];

			polycubePara->vertex[index][0] = tempX;
			polycubePara->vertex[index][1] = tempY;
			polycubePara->vertex[index][2] = tempZ;

			i++;
		}

		myFile.close();

	}
	else
	{
		cout<<"Unable to open file!";
	}

	return true;

}

bool CVTBasedPolycube::ParametricMappingCornerByInput_ID()
{
	//first read polycube
	string fn(inputName + "_paraHex_hex.raw");
	ifstream fin;
	fin.open(fn);
	vector<array<double, 3>> pts;
	vector<array<int, 8>> cnct;
	if (fin.is_open())
	{
		int npt, nel;
		double tmp;
		fin >> npt >> nel;
		pts.resize(npt);
		cnct.resize(nel);
		for (int i = 0; i < npt; i++)
		{
			fin >> pts[i][0] >> pts[i][1] >> pts[i][2] >> tmp;
		}
		for (int i = 0; i < nel; i++)
		{
			for (int j = 0; j < 8; j++)
			{
				fin >> cnct[i][j];
			}
		}
		fin.close();
	}
	else
	{
		cerr << "Can't open " << fn << "!\n";
		return false;
	}

	string tempName;
	string oneLine;
	tempName = inputName + "_Modify_CornerPoints.txt";
	ifstream myFile(tempName);
	if (myFile.is_open())
	{
		int itmp, jtmp, index;
		while (getline(myFile, oneLine))
		{
			istringstream st(oneLine);
			st >> itmp >> jtmp;
			cornerPoints.push_back(itmp);
			if (!IsCornerPoint(itmp))
			{
				cout << "not corner point " << itmp << "\n";
				getchar();
			}
			polycubePara->vertex[itmp][0] = pts[jtmp][0];
			polycubePara->vertex[itmp][1] = pts[jtmp][1];
			polycubePara->vertex[itmp][2] = pts[jtmp][2];
		}
		myFile.close();
	}
	else
	{
		cout << "Unable to open file!";
		return false;
	}
	numberCornerPoints = cornerPoints.size();

	int count(0);
	for (int i = 0; i < vertexNumber; i++)
	{
		if (IsCornerPoint(i))
		{
			count++;
		}
	}
	if (numberCornerPoints != count)
	{
		cerr << "# corner points not match!\n";
		getchar();
	}

	return true;

}

bool CVTBasedPolycube::CornerMappingMaxMin(Polycube &currentPolycubePatch)
{

	int indexCluster;
	int index;
	int i;
	double minMax = 0.f;

	indexCluster = currentPolycubePatch.indexCluster;

	switch (indexCluster)
	{
	case 0:

		minMax = -1000000.f;
		for (i = 0; i < currentPolycubePatch.numCorner; i++)
		{

			index = currentPolycubePatch.cornerPoint[i];
			if (minMax < polycubePara->vertex[index][0])
			{

				minMax = polycubePara->vertex[index][0];

			}

		}

		for (i = 0; i < currentPolycubePatch.numCorner; i++)
		{

			index = currentPolycubePatch.cornerPoint[i];
			polycubePara->vertex[index][0] = minMax;

		}

		break;

	case 1:

		minMax = 1000000.f;
		for (i = 0; i < currentPolycubePatch.numCorner; i++)
		{

			index = currentPolycubePatch.cornerPoint[i];
			if (minMax > polycubePara->vertex[index][0])
			{

				minMax = polycubePara->vertex[index][0];

			}

		}

		for (i = 0; i < currentPolycubePatch.numCorner; i++)
		{

			index = currentPolycubePatch.cornerPoint[i];
			polycubePara->vertex[index][0] = minMax;

		}

		break;

	case 2:

		minMax = -1000000.f;
		for (i = 0; i < currentPolycubePatch.numCorner; i++)
		{

			index = currentPolycubePatch.cornerPoint[i];
			if (minMax < polycubePara->vertex[index][1])
			{

				minMax = polycubePara->vertex[index][1];

			}

		}

		for (i = 0; i < currentPolycubePatch.numCorner; i++)
		{

			index = currentPolycubePatch.cornerPoint[i];
			polycubePara->vertex[index][1] = minMax;

		}

		break;

	case 3:

		minMax = 1000000.f;
		for (i = 0; i < currentPolycubePatch.numCorner; i++)
		{

			index = currentPolycubePatch.cornerPoint[i];
			if (minMax > polycubePara->vertex[index][1])
			{

				minMax = polycubePara->vertex[index][1];

			}

		}

		for (i = 0; i < currentPolycubePatch.numCorner; i++)
		{

			index = currentPolycubePatch.cornerPoint[i];
			polycubePara->vertex[index][1] = minMax;

		}

		break;

	case 4:

		minMax = -1000000.f;
		for (i = 0; i < currentPolycubePatch.numCorner; i++)
		{

			index = currentPolycubePatch.cornerPoint[i];
			if (minMax < polycubePara->vertex[index][2])
			{

				minMax = polycubePara->vertex[index][2];

			}

		}

		for (i = 0; i < currentPolycubePatch.numCorner; i++)
		{

			index = currentPolycubePatch.cornerPoint[i];
			polycubePara->vertex[index][2] = minMax;

		}

		break;

	case 5:

		minMax = 1000000.f;
		for (i = 0; i < currentPolycubePatch.numCorner; i++)
		{

			index = currentPolycubePatch.cornerPoint[i];
			if (minMax > polycubePara->vertex[index][2])
			{

				minMax = polycubePara->vertex[index][2];

			}

		}

		for (i = 0; i < currentPolycubePatch.numCorner; i++)
		{

			index = currentPolycubePatch.cornerPoint[i];
			polycubePara->vertex[index][2] = minMax;

		}

		break;

	default:

		cout<<"Error in CornerMappingMaxMin()!!!"<<endl;
		break;
	}

	return true;
}

bool CVTBasedPolycube::CornerMappingMaxMin_ManualAdjust(Polycube &currentPolycubePatch)
{

	//int indexCluster;
	int index;
	int i;
	//double minMax = 0.f;

	//indexCluster = currentPolycubePatch.indexCluster;

	int patchID = currentPolycubePatch.index;

	//for Honda2 model
	if (patchID == 0)//-z, on top of patch 2
	{
		int pid[2] = { polycubePatch[6].cornerPoint[0],polycubePatch[2].cornerPoint[0] };
		double shift = 0.1*fabs(polycubePara->vertex[pid[0]][2] - polycubePara->vertex[pid[1]][2]);
		double zpar = polycubePara->vertex[pid[1]][2] - shift;
		for (i = 0; i < currentPolycubePatch.numCorner; i++)
		{
			index = currentPolycubePatch.cornerPoint[i];
			polycubePara->vertex[index][2] = zpar;
		}
	}
	else if (patchID == 1)//+z, on top of patch 6
	{
		int pid[2] = { polycubePatch[6].cornerPoint[0],polycubePatch[2].cornerPoint[0] };
		double shift = 0.1*fabs(polycubePara->vertex[pid[0]][2] - polycubePara->vertex[pid[1]][2]);
		double zpar = polycubePara->vertex[pid[0]][2] + shift;
		for (i = 0; i < currentPolycubePatch.numCorner; i++)
		{
			index = currentPolycubePatch.cornerPoint[i];
			polycubePara->vertex[index][2] = zpar;
		}
	}
	else if (patchID == 20)
	{
		double minMax = 1000000.f;
		for (i = 0; i < currentPolycubePatch.numCorner; i++)
		{
			index = currentPolycubePatch.cornerPoint[i];
			if (minMax > vertex[index][1])
			{
				minMax = vertex[index][1];
			}
		}

		for (i = 0; i < currentPolycubePatch.numCorner; i++)
		{
			index = currentPolycubePatch.cornerPoint[i];
			polycubePara->vertex[index][1] = minMax;
		}
	}

	return true;
}

bool CVTBasedPolycube::ParametricMappingEdge()
{

	int i, j, k, l;
	int index, indexPrev, indexStart, indexEnd;
	int edgeSize;
	int direction;

	int tempIntStart, tempIntEnd;

	double totalLength, tempLength;

	for (i = 0; i < NUM_POLYCUBE_PATCH; i++)
	{

		for (j = 0; j < polycubePatch[i].boundaryEdge.size(); j++)
		{

			edgeSize = polycubePatch[i].boundaryEdge[j].size();

			indexStart = polycubePatch[i].boundaryEdge[j][0];
			indexEnd = polycubePatch[i].boundaryEdge[j][edgeSize-1];

			/////////////////////////////////////
			//For DEBUG
			if (j == 3 && i == 2)
			{

				j = j;

			}
			////////////////////////////////////

			for (k = 0; k < 3; k++)
			{

				tempIntStart = (int) polycubePara->vertex[indexStart][k] + 0.5f;
				tempIntEnd = (int) polycubePara->vertex[indexEnd][k] + 0.5f;

				if (tempIntStart != tempIntEnd)
				{

					direction = k;

					break;

				}

			}

			totalLength = 0.f;

			for (k = 1; k < edgeSize-1; k++) // k < edgeSize is very important!
			{

				index = polycubePatch[i].boundaryEdge[j][k];
				indexPrev = polycubePatch[i].boundaryEdge[j][k-1];

				tempLength = 0.f;

				for (l = 0; l < 3; l++)
				{

					tempLength += pow(vertex[index][l]-vertex[indexPrev][l], 2);

				}

				tempLength = sqrt(tempLength);

				totalLength += tempLength;

				for (l = 0; l < 3; l++)
				{

					if (l != direction)
					{

						polycubePara->vertex[index][l] = polycubePara->vertex[indexStart][l];

					}
					else
					{

						polycubePara->vertex[index][l] = totalLength;

					}
					
				}

			}

			////////////////////////////////////////////////////////////
			//Final total Length
			index = polycubePatch[i].boundaryEdge[j][edgeSize-1];
			indexPrev = polycubePatch[i].boundaryEdge[j][edgeSize-2];
			tempLength = 0.f;

			for (l = 0; l < 3; l++)
			{

				tempLength += pow(vertex[index][l]-vertex[indexPrev][l], 2);

			}

			tempLength = sqrt(tempLength);

			totalLength += tempLength;
			///////////////////////////////////////////////////////////

			for (k = 1; k < edgeSize-1; k++)
			{

				index = polycubePatch[i].boundaryEdge[j][k];

				for (l = 0; l < 3; l++)
				{

					if (l == direction)
					{

						///////////////////////////////////////////////////////////////////////////////////////
						//////In fact, the following if else conditions are the same! 12/18/2014
						if (polycubePara->vertex[indexStart][l] < polycubePara->vertex[indexEnd][l])
						{

							polycubePara->vertex[index][l] = polycubePara->vertex[indexStart][l] + polycubePara->vertex[index][l] / totalLength * (polycubePara->vertex[indexEnd][l]-polycubePara->vertex[indexStart][l]);

						}
						else
						{

							polycubePara->vertex[index][l] = polycubePara->vertex[indexStart][l] - polycubePara->vertex[index][l] / totalLength * (polycubePara->vertex[indexStart][l]-polycubePara->vertex[indexEnd][l]);

						}

					}

				}

			}

		}

	}


	return true;

}

bool CVTBasedPolycube::ParametricMappingInterior()
{

	int i, j, k, l;
	int index, indexCluster;

	for (i = 0; i < NUM_POLYCUBE_PATCH; i++)
	{

		polycubePatch[i].numIntVert = 0;

		vector<int> InteriorList;

		for (j = 0; j < polycubePatch[i].numElements; j++)
		{

			index = polycubePatch[i].element[j];

			for (k = 0; k < 3; k++)
			{

				if (IsInteriorPoint(element[index][k]))
				{

					bool count = true;

					for (l = 0; l < InteriorList.size(); l++)
					{

						if (InteriorList[l] == element[index][k])
						{

							count = false;
							break;

						}

					}

					if (count == true)
					{

						InteriorList.push_back(element[index][k]);
						polycubePatch[i].numIntVert++;

					}

				}

			}

		}

		polycubePatch[i].InterVert = InteriorList;

	}

	for (i = 0; i < NUM_POLYCUBE_PATCH; i++)
	{

		//if (i == 1)
		//{
		//	continue;
		//}
		//else
		//{

		//InteriorMappingOnePatch(polycubePatch[i]);

		//cout<<"Mapping patch ID: "<<i<<endl;

		//polycubePara->Write("squirrel_test_paraMapping_tri.vtk");

		//}

		InteriorMappingOnePatch(polycubePatch[i]);
		cout<<"Mapping patch ID: "<<i<<endl;

	}

	return true;

}

bool CVTBasedPolycube::InteriorMappingOnePatch(Polycube &currentPolycubePatch)
{

	int i, j, k, p, q;
	int index, indexCluster, iConst, nSize;
	int nCount, nIndex, nNeighbor, iIndex[2];
	double weight, tempLength, vecta[2][3];

	vector<int> InteriorList;
	InteriorList.clear();

	nCount = currentPolycubePatch.numIntVert;

	//MatrixXd mW = MatrixXd::Zero(nCount, nCount);
	//MatrixXd vB = MatrixXd::Zero(nCount, 2);
	//VectorXd x_solve0 = VectorXd::Zero(nCount);
	//VectorXd x_solve1 = VectorXd::Zero(nCount);

	Eigen::SparseMatrix<double, ColMajor> mW(nCount, nCount);
	Eigen::VectorXd vB0(nCount), vB1(nCount), x_solve0(nCount), x_solve1(nCount);
	mW.setZero();
	vB0.setZero();
	vB1.setZero();
	x_solve0.setZero();
	x_solve1.setZero();

	indexCluster = currentPolycubePatch.indexCluster;

	iConst = patch_const[indexCluster];

	sort(currentPolycubePatch.InterVert.begin(), currentPolycubePatch.InterVert.end());

	InteriorList = currentPolycubePatch.InterVert;

	nSize = currentPolycubePatch.numIntVert;

	for (j = 0; j < nSize; j++)
	{

		nNeighbor = elementValenceNumber[InteriorList[j]];

		for (k = 0; k < nNeighbor; k++)
		{

			for (p = 0; p < 3; p++)
			{

				if (element[elementValence[InteriorList[j]][k]][p] == InteriorList[j])
				{

					nIndex = element[elementValence[InteriorList[j]][k]][(p+1)%3];

					iIndex[0] = element[elementValence[InteriorList[j]][k]][(p+2)%3];

					break;

				}

			}

			for (i = 0; i < nNeighbor; i++)
			{
				
				bool count = true;

				for (p = 0; p < 3; p++)
				{

					if (element[elementValence[InteriorList[j]][i]][p] == InteriorList[j])
					{

						if (nIndex == element[elementValence[InteriorList[j]][i]][(p+3-1)%3])
						{

							iIndex[1] = element[elementValence[InteriorList[j]][i]][(p+1)%3];
							count = false;

							break;

						}

					}

				}

				if (count == false)
				{

					break;

				}

			}

			weight = 0;

			for (p = 0; p < 2; p++)
			{

				for (q = 0; q < 3; q++)
				{

					vecta[0][q] = vertex[InteriorList[j]][q] - vertex[iIndex[p]][q];

					vecta[1][q] = vertex[nIndex][q] - vertex[iIndex[p]][q];

				}

				tempLength = sqrt(pow(vecta[0][1]*vecta[1][2]-vecta[0][2]*vecta[1][1],2) + 
					pow(vecta[0][2]*vecta[1][0]-vecta[0][0]*vecta[1][2],2) + pow(vecta[0][0]*vecta[1][1]-vecta[0][1]*vecta[1][0],2));

				tempLength = (vecta[0][0]*vecta[1][0] + vecta[0][1]*vecta[1][1] + vecta[0][2]*vecta[1][2])/tempLength;

				weight += tempLength;

			}

			//mW(j, j) -= weight;
			mW.coeffRef(j, j) -= weight;

			if (IsInteriorPoint(nIndex))
			{

				//double distance; // int or double???
				int distance;

				for (i = 0; i < InteriorList.size(); i++)
				{

					if (InteriorList[i] == nIndex)
					{

						distance = i;
						break;

					}

				}

				//mW(j, distance) += weight;
				mW.coeffRef(j, distance) += weight;

			}
			else
			{

				/*vB(j, 0) -= weight * polycubePara->vertex[nIndex][(iConst+1)%3];
				vB(j, 1) -= weight * polycubePara->vertex[nIndex][(iConst+2)%3];*/

				vB0[j] -= weight * polycubePara->vertex[nIndex][(iConst+1)%3];
				vB1[j] -= weight * polycubePara->vertex[nIndex][(iConst+2)%3];

			}

		}

	}

	//Eigen::FullPivLU<MatrixXd> lu(mW);
	//x_solve0 = lu.solve(vB.topLeftCorner(nCount, 1));
	//x_solve1 = lu.solve(vB.topRightCorner(nCount, 1));

	//Eigen::SimplicialLLT<SparseMatrix<double> > lu;
	//lu.compute(mW);

	Eigen::ConjugateGradient<SparseMatrix<double> > lu;
	lu.compute(mW);

	x_solve0 = lu.solve(vB0);
	x_solve1 = lu.solve(vB1);

	if (lu.info() != Eigen::Success) 
	{
		cout <<"solve surface error in InteriorMappingOnePatch()!\n";
		return false;
	}

	////////////////////////////////////////////////////////////////////////////////

	int oneCorner = currentPolycubePatch.cornerPoint[0];

	for(j = 0; j < nSize; j++)
	{

		polycubePara->vertex[InteriorList[j]][iConst] = polycubePara->vertex[oneCorner][iConst];
		polycubePara->vertex[InteriorList[j]][(iConst+1)%3] = x_solve0(j);
		polycubePara->vertex[InteriorList[j]][(iConst+2)%3] = x_solve1(j);

	}

	/////////////////////////////////////////////////////////////

	MappingOnePatchWeighted(currentPolycubePatch);

	int stepNumber = 0;

	int MaxNIt(5);

	while(FlipCheckEachPatch(currentPolycubePatch) == false)
	{

		cout<<"Polycube patch "<<currentPolycubePatch.index<<" has flipped elements!"<<"Cluster No. "<<currentPolycubePatch.indexCluster<<endl;
		
		//if (stepNumber < 50)
		if (stepNumber < MaxNIt)
		{
			MappingOnePatchWeighted(currentPolycubePatch);
		}

		MappingOnePatchPostProcessing(currentPolycubePatch);

		stepNumber++;

		cout<<"Polycube patch "<<currentPolycubePatch.index<<" still has flipped elements after "<<stepNumber<<" iterations!"<<endl;

		//if (stepNumber > 50)
		if (stepNumber > MaxNIt)
		{
			
			cout<<"Polycube patch "<<currentPolycubePatch.index<<" still has flipped elements after 1000 iterations!"<<endl;
			break;

		}

	}	

	//MappingOnePatchWeighted(currentPolycubePatch);
	///////////////////////////////////////////////////////////

	return true;

}

bool CVTBasedPolycube::MappingOnePatchWeighted(Polycube &currentPolycubePatch)
{

	int i, j, k, p, q;
	int index, indexCluster, iConst, nSize;
	int nCount, nIndex, nNeighbor, iIndex[2];
	double weight, tempLength, vecta[2][3];
	int twoElements[2];

	vector<int> InteriorList;
	InteriorList.clear();

	nCount = currentPolycubePatch.numIntVert;

	//MatrixXd mW = MatrixXd::Zero(nCount, nCount);
	//MatrixXd vB = MatrixXd::Zero(nCount, 2);
	//VectorXd x_solve0 = VectorXd::Zero(nCount);
	//VectorXd x_solve1 = VectorXd::Zero(nCount);

	Eigen::SparseMatrix<double, ColMajor> mW(nCount, nCount);
	Eigen::VectorXd vB0(nCount), vB1(nCount), x_solve0(nCount), x_solve1(nCount);
	mW.setZero();
	vB0.setZero();
	vB1.setZero();
	x_solve0.setZero();
	x_solve1.setZero();

	indexCluster = currentPolycubePatch.indexCluster;

	iConst = patch_const[indexCluster];

	sort(currentPolycubePatch.InterVert.begin(), currentPolycubePatch.InterVert.end());

	InteriorList = currentPolycubePatch.InterVert;

	nSize = currentPolycubePatch.numIntVert;

	for (j = 0; j < nSize; j++)
	{

		nNeighbor = elementValenceNumber[InteriorList[j]];

		for (k = 0; k < nNeighbor; k++)
		{

			for (p = 0; p < 3; p++)
			{

				if (element[elementValence[InteriorList[j]][k]][p] == InteriorList[j])
				{

					nIndex = element[elementValence[InteriorList[j]][k]][(p+1)%3];

					iIndex[0] = element[elementValence[InteriorList[j]][k]][(p+2)%3];

					twoElements[0] = elementValence[InteriorList[j]][k]; //for weighted mapping

					break;

				}

			}

			for (i = 0; i < nNeighbor; i++)
			{

				bool count = true;

				for (p = 0; p < 3; p++)
				{

					if (element[elementValence[InteriorList[j]][i]][p] == InteriorList[j])
					{

						if (nIndex == element[elementValence[InteriorList[j]][i]][(p+3-1)%3])
						{

							iIndex[1] = element[elementValence[InteriorList[j]][i]][(p+1)%3];

							twoElements[1] = elementValence[InteriorList[j]][i]; //for weighted mapping

							count = false;

							break;

						}

					}

				}

				if (count == false)
				{

					break;

				}

			}

			weight = 0;

			for (p = 0; p < 2; p++)
			{

				for (q = 0; q < 3; q++)
				{

					vecta[0][q] = polycubePara->vertex[InteriorList[j]][q] - polycubePara->vertex[iIndex[p]][q];

					vecta[1][q] = polycubePara->vertex[nIndex][q] - polycubePara->vertex[iIndex[p]][q];

				}

				tempLength = sqrt(pow(vecta[0][1]*vecta[1][2]-vecta[0][2]*vecta[1][1],2) + 
					pow(vecta[0][2]*vecta[1][0]-vecta[0][0]*vecta[1][2],2) + pow(vecta[0][0]*vecta[1][1]-vecta[0][1]*vecta[1][0],2));

				tempLength = (vecta[0][0]*vecta[1][0] + vecta[0][1]*vecta[1][1] + vecta[0][2]*vecta[1][2])/tempLength;

				//double triArea = abs(TriAreaElement(twoElements[p]));
				double triArea = fabs(TriAreaElement(twoElements[p]));
				
				weight += triArea * tempLength;

			}

			/*mW(j, j) -= weight;*/
			mW.coeffRef(j, j) -= weight;

			if (IsInteriorPoint(nIndex))
			{

				//double distance; // int or double???
				int distance;

				for (i = 0; i < InteriorList.size(); i++)
				{

					if (InteriorList[i] == nIndex)
					{

						distance = i;
						break;

					}

				}

				/*mW(j, distance) += weight;*/
				mW.coeffRef(j, distance) += weight;

			}
			else
			{

				/*vB(j, 0) -= weight * polycubePara->vertex[nIndex][(iConst+1)%3];
				vB(j, 1) -= weight * polycubePara->vertex[nIndex][(iConst+2)%3];*/
				vB0[j] -= weight * polycubePara->vertex[nIndex][(iConst+1)%3];
				vB1[j] -= weight * polycubePara->vertex[nIndex][(iConst+2)%3];

			}

		}

	}

	//Eigen::FullPivLU<MatrixXd> lu(mW);
	//x_solve0 = lu.solve(vB.topLeftCorner(nCount, 1));
	//x_solve1 = lu.solve(vB.topRightCorner(nCount, 1));

	//Eigen::SimplicialLLT<SparseMatrix<double> > lu;
	//lu.compute(mW);

	Eigen::ConjugateGradient<SparseMatrix<double> > lu;
	lu.compute(mW);

	x_solve0 = lu.solve(vB0);
	x_solve1 = lu.solve(vB1);

	if (lu.info() != Eigen::Success) 
	{
		cout <<"solve surface error in MappingOnePatchWeighted()!\n";
		return false;
	}

	int oneCorner = currentPolycubePatch.cornerPoint[0];

	for(j = 0; j < nSize; j++)
	{

		polycubePara->vertex[InteriorList[j]][iConst] = polycubePara->vertex[oneCorner][iConst];
		polycubePara->vertex[InteriorList[j]][(iConst+1)%3] = x_solve0(j);
		polycubePara->vertex[InteriorList[j]][(iConst+2)%3] = x_solve1(j);

	}

	return true;

}

bool CVTBasedPolycube::SignedTriAreaElement(int elementID, int indexCluster)
{

	double point_1[3], point_2[3], point_3[3];
	double result[3];
	int i;

	for (i = 0; i < 3; i++)
	{

		point_1[i] = polycubePara->vertex[element[elementID][0]][i];

		point_2[i] = polycubePara->vertex[element[elementID][1]][i];

		point_3[i] = polycubePara->vertex[element[elementID][2]][i];

	}

	CrossProduct(point_1, point_2, point_3, result);

	switch (indexCluster)
	{
	case 0:

		//return 0.5 * result[0];
		if (result[0] < 0.f)
		{
			return false;
		}
		
		break;

	case 1:

		//return 0.5 * result[0];
		if (result[0] > 0.f)
		{
			return false;
		}
		
		break;

	case 2:

		//return 0.5 * result[1];
		if (result[1] < 0.f)
		{
			return false;
		}
		
		break;

	case 3:

		//return 0.5 * result[1];
		if (result[1] > 0.f)
		{
			return false;
		}
		
		break;

	case 4:

		//return 0.5 * result[2];
		if (result[2] < 0.f)
		{
			return false;
		}

		break;

	case 5:

		//return 0.5 * result[2];
		if (result[2] > 0.f)
		{
			return false;
		}
		
		break;

	default:

		cout<<"Error in SignedTriAreaElement()!!!"<<endl;
		return false;
		break;
		exit;

	}

	return true;

}


double CVTBasedPolycube::TriAreaElement(int elementID)
{

	double v0[3], v1[3], v2[3];

	int i;

	for (i = 0; i < 3; i++)
	{

		v0[i] = polycubePara->vertex[element[elementID][0]][i];

		v1[i] = polycubePara->vertex[element[elementID][1]][i];

		v2[i] = polycubePara->vertex[element[elementID][2]][i];

	}

	Vector3d n;

	Vector3d a(v1[0]-v0[0], v1[1]-v0[1], v1[2]-v0[2]);
	
	Vector3d b(v2[0]-v0[0], v2[1]-v0[1], v2[2]-v0[2]);
	
	n = a.cross(b);
	
	return 0.5 * n.norm();

}

bool CVTBasedPolycube::FlipCheckEachPatch(Polycube &currentPolycubePatch)
{

	int elementID, indexCluster;

	bool trueFalse = true;

	int i;

	indexCluster = currentPolycubePatch.indexCluster;

	for (i = 0; i < currentPolycubePatch.numElements; i++)
	{

		elementID = currentPolycubePatch.element[i];

		trueFalse = SignedTriAreaElement(elementID, indexCluster);

		if (trueFalse == false)
		{

			return false;

		}

	}

	return true;

}

bool CVTBasedPolycube::MappingOnePatchPostProcessing(Polycube &currentPolycubePatch)
{

	int i, j, k, p, q;
	int index, indexCluster, iConst, nSize;
	int nCount, nIndex, nNeighbor, iIndex[2];
	double weight, tempLength, vecta[2][3];

	vector<int> InteriorList;
	InteriorList.clear();

	nCount = currentPolycubePatch.numIntVert;

	//MatrixXd mW = MatrixXd::Zero(nCount, nCount);
	//MatrixXd vB = MatrixXd::Zero(nCount, 2);
	//VectorXd x_solve0 = VectorXd::Zero(nCount);
	//VectorXd x_solve1 = VectorXd::Zero(nCount);

	Eigen::SparseMatrix<double, ColMajor> mW(nCount, nCount);
	Eigen::VectorXd vB0(nCount), vB1(nCount), x_solve0(nCount), x_solve1(nCount);
	mW.setZero();
	vB0.setZero();
	vB1.setZero();
	x_solve0.setZero();
	x_solve1.setZero();

	indexCluster = currentPolycubePatch.indexCluster;

	iConst = patch_const[indexCluster];

	sort(currentPolycubePatch.InterVert.begin(), currentPolycubePatch.InterVert.end());

	InteriorList = currentPolycubePatch.InterVert;

	nSize = currentPolycubePatch.numIntVert;

	for (j = 0; j < nSize; j++)
	{

		nNeighbor = elementValenceNumber[InteriorList[j]];

		for (k = 0; k < nNeighbor; k++)
		{

			for (p = 0; p < 3; p++)
			{

				if (element[elementValence[InteriorList[j]][k]][p] == InteriorList[j])
				{

					nIndex = element[elementValence[InteriorList[j]][k]][(p+1)%3];

					iIndex[0] = element[elementValence[InteriorList[j]][k]][(p+2)%3];

					break;

				}

			}

			for (i = 0; i < nNeighbor; i++)
			{

				bool count = true;

				for (p = 0; p < 3; p++)
				{

					if (element[elementValence[InteriorList[j]][i]][p] == InteriorList[j])
					{

						if (nIndex == element[elementValence[InteriorList[j]][i]][(p+3-1)%3])
						{

							iIndex[1] = element[elementValence[InteriorList[j]][i]][(p+1)%3];
							count = false;

							break;

						}

					}

				}

				if (count == false)
				{

					break;

				}

			}

			weight = 0;

			for (p = 0; p < 2; p++)
			{

				for (q = 0; q < 3; q++)
				{

					vecta[0][q] = polycubePara->vertex[InteriorList[j]][q] - polycubePara->vertex[iIndex[p]][q];

					vecta[1][q] = polycubePara->vertex[nIndex][q] - polycubePara->vertex[iIndex[p]][q];

				}

				tempLength = sqrt(pow(vecta[0][1]*vecta[1][2]-vecta[0][2]*vecta[1][1],2) + 
					pow(vecta[0][2]*vecta[1][0]-vecta[0][0]*vecta[1][2],2) + pow(vecta[0][0]*vecta[1][1]-vecta[0][1]*vecta[1][0],2));

				tempLength = (vecta[0][0]*vecta[1][0] + vecta[0][1]*vecta[1][1] + vecta[0][2]*vecta[1][2])/tempLength;

				weight += tempLength;

			}

			/*mW(j, j) -= weight;*/
			mW.coeffRef(j, j) -= weight;

			if (IsInteriorPoint(nIndex))
			{

				//double distance; // int or double???
				int distance;

				for (i = 0; i < InteriorList.size(); i++)
				{

					if (InteriorList[i] == nIndex)
					{

						distance = i;
						break;

					}

				}

				/*mW(j, distance) += weight;*/
				mW.coeffRef(j, distance) += weight;

			}
			else
			{

				/*vB(j, 0) -= weight * polycubePara->vertex[nIndex][(iConst+1)%3];
				vB(j, 1) -= weight * polycubePara->vertex[nIndex][(iConst+2)%3];*/
				vB0[j] -= weight * polycubePara->vertex[nIndex][(iConst+1)%3];
				vB1[j] -= weight * polycubePara->vertex[nIndex][(iConst+2)%3];

			}

		}

	}

	//Eigen::FullPivLU<MatrixXd> lu(mW);
	//x_solve0 = lu.solve(vB.topLeftCorner(nCount, 1));
	//x_solve1 = lu.solve(vB.topRightCorner(nCount, 1));

	//Eigen::SimplicialLLT<SparseMatrix<double> > lu;
	//lu.compute(mW);

	Eigen::ConjugateGradient<SparseMatrix<double> > lu;
	lu.compute(mW);

	x_solve0 = lu.solve(vB0);
	x_solve1 = lu.solve(vB1);

	if (lu.info() != Eigen::Success) 
	{
		cout <<"solve surface error in MappingOnePatchPostProcessing()!\n";
		return false;
	}

	int oneCorner = currentPolycubePatch.cornerPoint[0];

	for(j = 0; j < nSize; j++)
	{

		polycubePara->vertex[InteriorList[j]][iConst] = polycubePara->vertex[oneCorner][iConst];
		polycubePara->vertex[InteriorList[j]][(iConst+1)%3] = x_solve0(j);
		polycubePara->vertex[InteriorList[j]][(iConst+2)%3] = x_solve1(j);

	}

	return true;

}

////////////////////////////////////////////////////////////////////////////////////////////////////////
//For hex meshing in parametric domain

bool CVTBasedPolycube::HexMeshParametricDomain(const char *outputName)
{

	//InitializeOctree();

	//ConstructeOctree();

	//HexMeshOctree();

	////DeleteOutsideMesh(outputName);

	if (READ_IN_PARAHEX_TORUS == 1)
	{
		string tempName;
		//tempName = inputName + "_paraHex_torus_hex.raw";
		tempName = inputName + "_paraHex_hex.raw";
		RawMesh tempParametricHex;
		int index;
		//tempParametricHex.Read(tempName.c_str());
		parametricHex.Read(tempName.c_str());

		////int count = tempParametricHex.elementNumber;

		//for (int i = 0; i < tempParametricHex.elementNumber; i++)
		//{

		//	tempParametricHex.elementSign[i] = -1;

		//	double centeOne[3] = {0.f, 0.f, 0.f};
		//	for (int j = 0; j < 8; j++)
		//	{
		//		index = tempParametricHex.element[i][j];

		//		centeOne[0] += 0.125 * tempParametricHex.vertex[index][0];
		//		centeOne[1] += 0.125 * tempParametricHex.vertex[index][1];
		//		centeOne[2] += 0.125 * tempParametricHex.vertex[index][2];
		//	}


		//	//Do remember this FUCKING MISTAKE!!!
		//	//for (int j = 0; j < parametricHex.elementNumber; j++)
		//	//{

		//	//	if (fabs(tempParametricHex.vertex[i][0]-parametricHex.vertex[j][0]) < EPSILON &&
		//	//		fabs(tempParametricHex.vertex[i][1]-parametricHex.vertex[j][1]) < EPSILON && 
		//	//		fabs(tempParametricHex.vertex[i][2]-parametricHex.vertex[j][2]) < EPSILON && 
		//	//		fabs(tempParametricHex.vertex[i][3]-parametricHex.vertex[j][3]) < EPSILON &&
		//	//		fabs(tempParametricHex.vertex[i][4]-parametricHex.vertex[j][4]) < EPSILON &&
		//	//		fabs(tempParametricHex.vertex[i][5]-parametricHex.vertex[j][5]) < EPSILON &&
		//	//		fabs(tempParametricHex.vertex[i][6]-parametricHex.vertex[j][6]) < EPSILON &&
		//	//		fabs(tempParametricHex.vertex[i][7]-parametricHex.vertex[j][7]) < EPSILON)
		//	//	{

		//	//		tempParametricHex.elementSign[i] = parametricHex.elementSign[j];
		//	//		break;

		//	//	}

		//	//}

		//	for (int k = 0; k < parametricHex.elementNumber; k++)
		//	{

		//		double tempCenter[3] = {0.f, 0.f, 0.f};

		//		for (int j = 0; j < 8; j++)
		//		{
		//			index = parametricHex.element[k][j];

		//			tempCenter[0] += 0.125 * parametricHex.vertex[index][0];
		//			tempCenter[1] += 0.125 * parametricHex.vertex[index][1];
		//			tempCenter[2] += 0.125 * parametricHex.vertex[index][2];
		//		}

		//		if (fabs(tempCenter[0]-centeOne[0]) < EPSILON && fabs(tempCenter[1]-centeOne[1]) < EPSILON && fabs(tempCenter[2]-centeOne[2]) < EPSILON)
		//		{

		//			tempParametricHex.elementSign[i] = parametricHex.elementSign[k];
		//			
		//			//count--;

		//			break;

		//		}

		//	}

		//}

		////cout << count<<endl;

		//parametricHex = tempParametricHex;

		for (int i = 0; i < parametricHex.elementNumber; i++)
		{
			parametricHex.elementSign[i] = 0;
		}

		parametricHex.Write(outputName);

	}

	//parametricHex.Write(outputName);

	return true;

}

bool CVTBasedPolycube::InitializeOctree()
{

	voxelSize = 1 << OCTREE_MAX_LEVEL;
	gridSize = voxelSize + 1;
	numVoxels = voxelSize * voxelSize * voxelSize;
	numGrids = gridSize * gridSize * gridSize;

	for (int i = 0; i < 3; i++)
	{
		origCood[i] = 0.f;
	}

	//cellSize = 64.0 / voxelSize;
	cellSize = DOMAIN_SIZE / voxelSize;

	leafNum = 0;
	octreeDepth = GetDepth(voxelSize);
	octreeCellNum = GetOctreeNum(octreeDepth);

	refineFlagArray.resize(octreeCellNum);

	cutArray.resize(numVoxels);

	for (int i = 0; i <= octreeDepth; i++)
	{
		levelRes[i] = (1 << i);
	}

	return true;

}

bool CVTBasedPolycube::ConstructeOctree()
{

	CellQueue prev_queue, cur_queue;

	int octree_id, level;

	int start_level, end_level;

	vector<int> cell_sign;

	start_level = OCTREE_MIN_LEVEL;
	//end_level = OCTREE_MAX_LEVEL;
	end_level = OCTREE_MIN_LEVEL+1;

	octree_id = 0;

	leafNum = 0;

	prev_queue.Add(octree_id);

	while (prev_queue.Empty() == 0)//while prev_queue is not empty
	{

		while (prev_queue.Get(octree_id) >= 0)
		{

			cell_sign.push_back(octree_id);
			level = GetLevel(octree_id);

			if (
				(((CheckAdaptation(octree_id) == false) && level < end_level) || level <= start_level)
				&& refineFlagArray[octree_id] != 1
				)

			{

				int octree_idx[8];
				if (octree_id == 0)
				{
					
					refineFlagArray[octree_id] = 1;
					cur_queue.Add(octree_id);
			
				}
				else
				{
					
					RefineBrothers(octree_id, octree_idx);

					for (int ii = 0; ii < 8; ii++)
					{
						cur_queue.Add(octree_idx[ii]);
					}

				}

			}

		}

		while (cur_queue.Get(octree_id) >= 0)
		{
			
			level = GetLevel(octree_id);
			for (int i = 0; i < 8; i++)
			{
				prev_queue.Add(Child(octree_id, level, i));
			}

		}

	}

	for (int i = 0; i < cell_sign.size(); i++)
	{
	
		if (refineFlagArray[cell_sign[i]] != 1)
		{

			cutArray[leafNum] = cell_sign[i];
			leafNum++;
	
		}
	
	}

	return true;

}

bool CVTBasedPolycube::HexMeshOctree()
{

	parametricHex.CreateNewMesh(parametricHex.HEXAHEDRON, leafNum * 8, leafNum);

	int octree_id;
	int level;
	int cell_size;
	int x, y, z;

	for (int i = 0; i < leafNum * 8; i += 8)
	{

		octree_id = cutArray[(i / 8)];//be careful, understand why i/8
		level = GetLevel(octree_id);
		cell_size = voxelSize / (1 << level);
		OctreeidxToXYZ(octree_id, x, y, z, level);
		
		//parametricHex.vertex[i][0] = origCood[0] + x * cell_size * cellSize;
		//parametricHex.vertex[i][1] = origCood[1] + y * cell_size * cellSize;
		//parametricHex.vertex[i][2] = origCood[2] + z * cell_size * cellSize;
		//parametricHex.vertex[i + 1][0] = origCood[0] + (x + 1) * cell_size * cellSize;
		//parametricHex.vertex[i + 1][1] = origCood[1] + y * cell_size * cellSize;
		//parametricHex.vertex[i + 1][2] = origCood[2] + z * cell_size * cellSize;
		//parametricHex.vertex[i + 2][0] = origCood[0] + (x + 1) * cell_size * cellSize;
		//parametricHex.vertex[i + 2][1] = origCood[1] + y * cell_size * cellSize;
		//parametricHex.vertex[i + 2][2] = origCood[2] + (z + 1) * cell_size * cellSize;
		//parametricHex.vertex[i + 3][0] = origCood[0] + x * cell_size * cellSize;
		//parametricHex.vertex[i + 3][1] = origCood[1] + y * cell_size * cellSize;
		//parametricHex.vertex[i + 3][2] = origCood[2] + (z + 1) * cell_size * cellSize;
		//parametricHex.vertex[i + 4][0] = origCood[0] + x * cell_size * cellSize;
		//parametricHex.vertex[i + 4][1] = origCood[1] + (y + 1) * cell_size * cellSize;
		//parametricHex.vertex[i + 4][2] = origCood[2] + z * cell_size * cellSize;
		//parametricHex.vertex[i + 5][0] = origCood[0] + (x + 1) * cell_size * cellSize;
		//parametricHex.vertex[i + 5][1] = origCood[1] + (y + 1) * cell_size * cellSize;
		//parametricHex.vertex[i + 5][2] = origCood[2] + z * cell_size * cellSize;
		//parametricHex.vertex[i + 6][0] = origCood[0] + (x + 1) * cell_size * cellSize;
		//parametricHex.vertex[i + 6][1] = origCood[1] + (y + 1) * cell_size * cellSize;
		//parametricHex.vertex[i + 6][2] = origCood[2] + (z + 1) * cell_size * cellSize;
		//parametricHex.vertex[i + 7][0] = origCood[0] + x * cell_size * cellSize;
		//parametricHex.vertex[i + 7][1] = origCood[1] + (y + 1) * cell_size * cellSize;
		//parametricHex.vertex[i + 7][2] = origCood[2] + (z + 1) * cell_size * cellSize;

		parametricHex.vertex[i][0] = origCood[0] + x * cell_size * cellSize;
		parametricHex.vertex[i][1] = origCood[1] + y * cell_size * cellSize;
		parametricHex.vertex[i][2] = origCood[2] + z * cell_size * cellSize;
		
		parametricHex.vertex[i + 1][0] = origCood[0] + (x + 1) * cell_size * cellSize;
		parametricHex.vertex[i + 1][1] = origCood[1] + y * cell_size * cellSize;
		parametricHex.vertex[i + 1][2] = origCood[2] + z * cell_size * cellSize;
		
		parametricHex.vertex[i + 2][0] = origCood[0] + (x + 1) * cell_size * cellSize;
		parametricHex.vertex[i + 2][1] = origCood[1] + (y + 1) * cell_size * cellSize;
		parametricHex.vertex[i + 2][2] = origCood[2] + z * cell_size * cellSize;
		
		parametricHex.vertex[i + 3][0] = origCood[0] + x * cell_size * cellSize;
		parametricHex.vertex[i + 3][1] = origCood[1] + (y + 1) * cell_size * cellSize;
		parametricHex.vertex[i + 3][2] = origCood[2] + z * cell_size * cellSize;
		
		parametricHex.vertex[i + 4][0] = origCood[0] + x * cell_size * cellSize;
		parametricHex.vertex[i + 4][1] = origCood[1] + y * cell_size * cellSize;
		parametricHex.vertex[i + 4][2] = origCood[2] + (z + 1) * cell_size * cellSize;
		
		parametricHex.vertex[i + 5][0] = origCood[0] + (x + 1) * cell_size * cellSize;
		parametricHex.vertex[i + 5][1] = origCood[1] + y * cell_size * cellSize;
		parametricHex.vertex[i + 5][2] = origCood[2] + (z + 1) * cell_size * cellSize;
		
		parametricHex.vertex[i + 6][0] = origCood[0] + (x + 1) * cell_size * cellSize;
		parametricHex.vertex[i + 6][1] = origCood[1] + (y + 1) * cell_size * cellSize;
		parametricHex.vertex[i + 6][2] = origCood[2] + (z + 1) * cell_size * cellSize;
		
		parametricHex.vertex[i + 7][0] = origCood[0] + x * cell_size * cellSize;
		parametricHex.vertex[i + 7][1] = origCood[1] + (y + 1) * cell_size * cellSize;
		parametricHex.vertex[i + 7][2] = origCood[2] + (z + 1) * cell_size * cellSize;

	}

	for (int i = 0; i < leafNum; i++)
	{
		//parametricHex.element[i][0] = i * 8;
		//parametricHex.element[i][3] = i * 8 + 1;
		//parametricHex.element[i][2] = i * 8 + 2;
		//parametricHex.element[i][1] = i * 8 + 3;
		//parametricHex.element[i][4] = i * 8 + 4;
		//parametricHex.element[i][7] = i * 8 + 5;
		//parametricHex.element[i][6] = i * 8 + 6;
		//parametricHex.element[i][5] = i * 8 + 7;

		parametricHex.element[i][0] = i * 8;
		parametricHex.element[i][1] = i * 8 + 1;
		parametricHex.element[i][2] = i * 8 + 2;
		parametricHex.element[i][3] = i * 8 + 3;
		parametricHex.element[i][4] = i * 8 + 4;
		parametricHex.element[i][5] = i * 8 + 5;
		parametricHex.element[i][6] = i * 8 + 6;
		parametricHex.element[i][7] = i * 8 + 7;

		parametricHex.elementSign[i] = cutArray[i];

	}

	//parametricHex.DeleteDuplicatedPoint();
	//parametricHex.Write(file_name);

	return true;

}

int CVTBasedPolycube::GetDepth(int res)
{
	int i = 0;
	while (1)
	{
		if (res <= (1<<i))//take care of this!
		{
			break;
		}
		i++;
	}
	if (res != (1<<i))
	{
		cout << "Unsupported resolution:" << res;
	}
	return i;
}

int CVTBasedPolycube::GetOctreeNum(int depth)
{
	int num = 0;
	for (int i = 0; i <= depth; i++)
	{
		num += (1 << (i * 3));
	}
	return num;
}

int CVTBasedPolycube::GetLevel(int octree_id)
{
	int num = 0;
	int i = 0;
	while (1)
	{
		num += (1 << (i * 3));
		if (num > octree_id)
			break;
		i++;
	}
	return i;
}

bool CVTBasedPolycube::CheckAdaptation(int octree_id)
{


	return false;

}

void CVTBasedPolycube::OctreeidxToXYZ(int octree_id, int &x, int &y, int &z, int level)
{
	int idx;
	int lres;//level resolution

	idx = octree_id - level_id[level];
	lres = levelRes[level];

	x = idx % lres;
	y = (idx / lres) % lres;
	z = idx / (lres * lres);

}

//Given X, Y and Z, gain the octree cell idex
//Here, X, Y and Z are all local, related to level
int CVTBasedPolycube::XYZToOctreeidx(int x, int y, int z, int level, int direction)
{
	int lres;
	lres = levelRes[level];
	int xx, yy, zz;
	xx = x; yy = y; zz = z;

	if (x < 0 || y < 0 || z < 0 || x >= lres || y >= lres || z >= lres)
	{
		return -1;
	} 
	else
	{
		switch (direction)
		{
		case 0:
			x = xx; y = yy; z = zz;
			break;
		case 1:
			x = zz; y = xx; z = yy;
			break;
		case 2:
			x = yy; y = zz; z = xx;
			break;
		}

		return level_id[level] + x + y * lres + z * lres *lres;
	}

}

//Given a parent octree cell, gain its eight children cells
int CVTBasedPolycube::Child(int octree_id, int level, int i)
{
	int x, y, z;
	int ret_idx = 0;
	OctreeidxToXYZ(octree_id, x, y, z, level);

	switch (i) 
	{
	case 0 :
		ret_idx = XYZToOctreeidx(x*2, y*2, z*2, level + 1);
		break;
	case 1 :
		ret_idx = XYZToOctreeidx(x*2 + 1, y*2, z*2, level + 1);
		break;
	case 2 :
		ret_idx = XYZToOctreeidx(x*2, y*2 + 1, z*2, level + 1);
		break;
	case 3 :
		ret_idx = XYZToOctreeidx(x*2 + 1, y*2 + 1, z*2, level + 1);
		break;
	case 4 :
		ret_idx = XYZToOctreeidx(x*2, y*2, z*2 + 1, level + 1);
		break;
	case 5 :
		ret_idx = XYZToOctreeidx(x*2 + 1, y*2, z*2 + 1, level + 1);
		break;
	case 6 :
		ret_idx = XYZToOctreeidx(x*2, y*2 + 1, z*2 + 1, level + 1);
		break;
	case 7 :
		ret_idx = XYZToOctreeidx(x*2 + 1, y*2 + 1, z*2 + 1, level + 1);
		break;
	}

	return ret_idx;

}


void CVTBasedPolycube::RefineBrothers(int octree_id, int *octree_idx)
{

	int level, parent_level;
	int x, y, z;
	int parent_x, parent_y, parent_z;
	int parent_idx;

	level = GetLevel(octree_id);
	OctreeidxToXYZ(octree_id, x, y, z, level);
	parent_x = x / 2;
	parent_y = y / 2;
	parent_z = z / 2;
	parent_level = level - 1;
	//the usage of parent_idx?
	parent_idx = XYZToOctreeidx(parent_x, parent_y, parent_z, parent_level);

	octree_idx[0] = XYZToOctreeidx(parent_x * 2, parent_y * 2, parent_z * 2, parent_level + 1);
	octree_idx[1] = XYZToOctreeidx(parent_x * 2 + 1, parent_y * 2, parent_z * 2, parent_level + 1);
	octree_idx[2] = XYZToOctreeidx(parent_x * 2, parent_y * 2 + 1, parent_z * 2, parent_level + 1);
	octree_idx[3] = XYZToOctreeidx(parent_x * 2 + 1, parent_y * 2 + 1, parent_z * 2, parent_level + 1);
	octree_idx[4] = XYZToOctreeidx(parent_x * 2, parent_y * 2, parent_z * 2 + 1, parent_level + 1);
	octree_idx[5] = XYZToOctreeidx(parent_x * 2 + 1, parent_y * 2, parent_z * 2 + 1, parent_level + 1);
	octree_idx[6] = XYZToOctreeidx(parent_x * 2, parent_y * 2 + 1, parent_z * 2 + 1, parent_level + 1);
	octree_idx[7] = XYZToOctreeidx(parent_x * 2 + 1, parent_y * 2 + 1, parent_z * 2 + 1, parent_level + 1);

	for (int i = 0; i < 8; i++)
	{
		//octreeArray[octree_idx[i]].refine_flag = 1;
		refineFlagArray[octree_idx[i]] = 1;
	}

}

bool CVTBasedPolycube::DeleteOutsideMesh(const char *outputName)
{

	cout << "***** Start removing outside elements! *****" << endl;

	int i, j, k;

	bool *outVertex = new bool [parametricHex.vertexNumber];

	polycubePara->InitiateElementValence();

	#pragma omp parallel for//commented before
	for (i = 0; i < parametricHex.elementNumber; i++)
	{

		double elementCenter[3] = {0.f};

		for (j = 0; j < 8; j++)
		{

			for (k = 0; k < 3; k++)
			{

				elementCenter[k] += parametricHex.vertex[parametricHex.element[i][j]][k] / 8.0f;

			}

		}

		if (IsOutOfSurface(elementCenter, polycubePara[0])) //polycubePara[0], not polycubePara.
		{

			for (j = 0; j < 8; j++)
			{

				int index = parametricHex.element[i][j];

				outVertex[index] = true;

			}

		}
		else
		{

			for (j = 0; j < 8; j++)
			{

				int index = parametricHex.element[i][j];

				outVertex[index] = false;

			}

		}

	}

	bool *badElement = new bool [parametricHex.elementNumber];

	#pragma omp parallel for private(j, k)
	for (i = 0; i < parametricHex.elementNumber; i++)
	{
		
		badElement[i] = false;

		for (j = 0; j < parametricHex.elementProperty.vertexNumber; ++j)
		{
			if (parametricHex.element[i][j] == -1)
				continue;

			if (outVertex[parametricHex.element[i][j]])
			{

				badElement[i] = true;
			
				for (k = 0; k < parametricHex.elementProperty.vertexNumber; ++k)
				{
					if (parametricHex.element[i][k] == -1)
						continue; 
					parametricHex.vertexSign[parametricHex.element[i][k]] = 1;
				}

				break;

			}
		}

	}

	parametricHex.DeleteElement(badElement);

	parametricHex.DeleteUnusedVertex();
	parametricHex.DeleteDuplicatedPoint();

	parametricHex.Write(outputName);

	return true;

}


bool CVTBasedPolycube::IsOutOfSurface(double dP_[3], RawMesh &surfaceMesh, int iTime)
{

	if (iTime > 10)
		return 0;

	int i, iIns;
	double dInsP[3];
	bool atPoint;
	int dCount;

	//double ERR = 0.0013456;

	dCount = 0;
	atPoint = false;
	
	for (i=0; i<surfaceMesh.elementNumber; i++)
	{
		iIns = IntersectAxis(surfaceMesh.vertex[surfaceMesh.element[i][0]], surfaceMesh.vertex[surfaceMesh.element[i][1]], surfaceMesh.vertex[surfaceMesh.element[i][2]], dP_, dInsP, 'x');

		if (iIns == 0)
			continue;
		else if (iIns == 5)
			dCount += 2;
		else if (iIns == 4)
			dCount += 1;
		else
			atPoint = true;
		/*
		{
			if (intersectAxis(rf.vertex[rf.element[i][0]], rf.vertex[rf.element[i][1]], rf.vertex[rf.element[i][2]], dP_, dInsP, 'x')>0)
				dCount += 1.0/rf.elementValenceNum[rf.element[i][-iIns]];
			else if (intersectAxis(rf.vertex[rf.element[i][0]], rf.vertex[rf.element[i][1]], rf.vertex[rf.element[i][2]], dP_, dInsP, 'x')>0)
				dCount += 1.0/rf.elementValenceNum[rf.element[i][-iIns]];
		}
		//*/
	}

	if (atPoint)
	{
		double dTP[3];
		bool ii, ij;
		iTime++;
		//printf("Times: %d\n", iTime);
		dTP[0] = dP_[0] + (rand() % 10)*GM.ERR; dTP[1] = dP_[1] + (rand() % 10)*GM.ERR; dTP[2] = dP_[2] + (rand() % 10)*GM.ERR;
		ii = IsOutOfSurface(dTP, surfaceMesh, iTime);
		dTP[0] = dP_[0] - (rand() % 10)*GM.ERR; dTP[1] = dP_[1] - (rand() % 10)*GM.ERR; dTP[2] = dP_[2] - (rand() % 10)*GM.ERR;
		ij = IsOutOfSurface(dTP, surfaceMesh, iTime);
		if (ii != ij)
			return false;
		else
			return ii;
	}

	if (((int) dCount)%4 == 0)
		return  true;
	else
		return false;

}

int CVTBasedPolycube::IntersectAxis(double *dP1_, double *dP2_, double *dP3_, double *dObject_, double *dIntersectP_, char cAxis_/* ='x' */)
{

	double dCoff[3], dSign[3];
	double ERR=1.0E-6;


	if (dP1_[0] < dObject_[0] && dP2_[0] < dObject_[0] && dP3_[0] < dObject_[0])
		return 0;
	if (!(cAxis_ == 'x') && !(cAxis_ == 'X'))
	{
		if (dP1_[0] > dObject_[0] && dP2_[0] > dObject_[0] && dP3_[0] > dObject_[0])
			return 0;
	}

	if (dP1_[1] < dObject_[1] && dP2_[1] < dObject_[1] && dP3_[1] < dObject_[1])
		return 0;
	if (!(cAxis_ == 'y') && !(cAxis_ == 'Y'))
	{
		if (dP1_[1] > dObject_[1] && dP2_[1] > dObject_[1] && dP3_[1] > dObject_[1])
			return 0;
	}

	if (dP1_[2] < dObject_[2] && dP2_[2] < dObject_[2] && dP3_[2] < dObject_[2])
		return 0;
	if (!(cAxis_ == 'z') && !(cAxis_ == 'Z'))
	{
		if (dP1_[2] > dObject_[2] && dP2_[2] > dObject_[2] && dP3_[2] > dObject_[2])
			return 0;
	}


	dCoff[0] = (dP2_[1] - dP1_[1])*(dP3_[2] - dP1_[2]) - (dP3_[1] - dP1_[1])*(dP2_[2] - dP1_[2]);
	dCoff[1] = (dP2_[2] - dP1_[2])*(dP3_[0] - dP1_[0]) - (dP3_[2] - dP1_[2])*(dP2_[0] - dP1_[0]);
	dCoff[2] = (dP2_[0] - dP1_[0])*(dP3_[1] - dP1_[1]) - (dP3_[0] - dP1_[0])*(dP2_[1] - dP1_[1]);

	if (cAxis_ == 'X' || cAxis_ == 'x')
	{
		if (fabs(dCoff[0]) < ERR)
			if (dP1_[0] == dObject_[0])
				return 5;
			else
				return 0;
		dIntersectP_[0] = -(dCoff[1]*(dObject_[1] - dP1_[1]) + dCoff[2]*(dObject_[2] - dP1_[2]))/dCoff[0] + dP1_[0];
		dIntersectP_[1] = dObject_[1];
		dIntersectP_[2] = dObject_[2];
		if (dIntersectP_[0] <= dObject_[0])
			return 0;
	}
	else if (cAxis_ == 'Y' || cAxis_ == 'y')
	{
		if (fabs(dCoff[1]) < ERR)
			if (dP1_[1] == dObject_[1])
				return 5;
			else
				return 0;
		dIntersectP_[0] = dObject_[0];
		dIntersectP_[1] = -(dCoff[0]*(dObject_[0] - dP1_[0]) + dCoff[2]*(dObject_[2] - dP1_[2]))/dCoff[1] + dP1_[1];
		dIntersectP_[2] = dObject_[2];
		if (dIntersectP_[1] <= dObject_[1])
			return 0;
	}
	else if (cAxis_ == 'Z' || cAxis_ == 'z')
	{
		if (fabs(dCoff[2]) < ERR)
			if (dP1_[2] == dObject_[2])
				return 5;
			else
				return 0;
		dIntersectP_[0] = dObject_[0];
		dIntersectP_[1] = dObject_[1];
		dIntersectP_[2] = -(dCoff[1]*(dObject_[1] - dP1_[1]) + dCoff[0]*(dObject_[0] - dP1_[0]))/dCoff[2] + dP1_[2];
		if (dIntersectP_[2] <= dObject_[2])
			return 0;
	}
	else
	{
		printf("Please indicates the axis direction.\n");
		return 0;
	}

	//if ((dIntersectP_[0] - dObject_[0]) < ERR && (dIntersectP_[1] - dObject_[1]) < ERR && (dIntersectP_[2] - dObject_[2]) < ERR)
	//	return 0;

	dSign[0] = (dP2_[1] - dIntersectP_[1])*(dP3_[2] - dIntersectP_[2]) - (dP3_[1] - dIntersectP_[1])*(dP2_[2] - dIntersectP_[2])
		+ (dP2_[2] - dIntersectP_[2])*(dP3_[0] - dIntersectP_[0]) - (dP3_[2] - dIntersectP_[2])*(dP2_[0] - dIntersectP_[0])
		+ (dP2_[0] - dIntersectP_[0])*(dP3_[1] - dIntersectP_[1]) - (dP3_[0] - dIntersectP_[0])*(dP2_[1] - dIntersectP_[1]);
	dSign[1] = (dP3_[1] - dIntersectP_[1])*(dP1_[2] - dIntersectP_[2]) - (dP1_[1] - dIntersectP_[1])*(dP3_[2] - dIntersectP_[2])
		+ (dP3_[2] - dIntersectP_[2])*(dP1_[0] - dIntersectP_[0]) - (dP1_[2] - dIntersectP_[2])*(dP3_[0] - dIntersectP_[0])
		+ (dP3_[0] - dIntersectP_[0])*(dP1_[1] - dIntersectP_[1]) - (dP1_[0] - dIntersectP_[0])*(dP3_[1] - dIntersectP_[1]);
	dSign[2] = (dP1_[1] - dIntersectP_[1])*(dP2_[2] - dIntersectP_[2]) - (dP2_[1] - dIntersectP_[1])*(dP1_[2] - dIntersectP_[2])
		+ (dP1_[2] - dIntersectP_[2])*(dP2_[0] - dIntersectP_[0]) - (dP2_[2] - dIntersectP_[2])*(dP1_[0] - dIntersectP_[0])
		+ (dP1_[0] - dIntersectP_[0])*(dP2_[1] - dIntersectP_[1]) - (dP2_[0] - dIntersectP_[0])*(dP1_[1] - dIntersectP_[1]);

	if ((dSign[0]<0 && dSign[1]<0 && dSign[2]<0) || (dSign[0]>0 && dSign[1]>0 && dSign[2]>0))
		return 5;
	else if (fabs(dSign[0]) < ERR || fabs(dSign[1]) < ERR || fabs(dSign[2]) < ERR)
	{
		if (fabs(dSign[0]) < ERR && fabs(dSign[1]) < ERR)
			return 3;
		else if (fabs(dSign[0]) < ERR && fabs(dSign[2]) < ERR)
			return 2;
		else if (fabs(dSign[1]) < ERR&& fabs(dSign[2]) < ERR)
			return 1;
		else if ((fabs(dSign[0]) < ERR && (dSign[1]*dSign[2])>0) || (fabs(dSign[1]) < ERR && (dSign[2]*dSign[0])>0) || (fabs(dSign[2]) < ERR && (dSign[1]*dSign[0])>0))
			return 4;
		else
			return 0;
	}
	else
		return 0;

}

// For hex mesh generation in real domain
bool CVTBasedPolycube::HexMeshRealDomain(const char *outputName)
{

	parametricHex.SetBoundaryVertexSign(1);

	//////////////////////////////////////////////////////////////////////
	////Useful for propagation step
	parametricHex.InitiateEdgeValence();
	//////////////////////////////////////////////////////////////////////

	parametricHex.InitiateElementValence();

	CheckUniformHexValidity();

	realDomainHex = parametricHex;

	if (READ_IN_UNIFORMHEX == 0)
	{

		realDomainHex.SetBoundaryVertexSign(1);
		realDomainHex.InitiateEdgeValence();
		realDomainHex.InitiateElementValence();

		//realDomainHex.Write(outputName); getchar();

		propElement.resize(parametricHex.vertexNumber);

		HexMeshProjectionBoundary();

		HexMeshProjectionInterior();

		//Pillowing();

		//realDomainHex.Write("PillowNoSmooth_hex.raw");

		realDomainHex.Write(outputName);

		realDomainHex.Smooth(500);
		

		string tempName;

		tempName = inputName + "_NoPillowSmooth_hex.raw";

		realDomainHex.Write(tempName.c_str());

		//realDomainHex.SmoothSurface(100);
		//realDomainHex.Write("PillowSmoothSurface_hex.raw");

	}
	else
	{

		realDomainHex.Read("uniform_hex.raw");
		realDomainHex.SetBoundaryVertexSign(1);
		realDomainHex.InitiateEdgeValence();
		realDomainHex.InitiateElementValence();

		for (int i = 0; i < realDomainHex.elementNumber; i++)
		{
			realDomainHex.elementSign[i] = parametricHex.elementSign[i];
		}

	}
	

	return true;

}

bool CVTBasedPolycube::CheckUniformHexValidity()
{

	int i, j;
	int count;
	int numberCornersTemp;

	numberCornersTemp = 0;

	for (i = 0; i < parametricHex.vertexNumber; i++)
	{

		if (parametricHex.vertexSign[i] == 0)
		{
			continue;
		}

		count = 0;

		for (j = 0; j < parametricHex.edgeValenceNumber[i]; j++)
		{

			int index = parametricHex.edgeValence[i][j];

			if (parametricHex.vertexSign[index] == 1)
			{
				count++;
			}

		}

		if (count != 4)
		{

			numberCornersTemp++;

		}

	}

	if (numberCornersTemp == numberCornerPoints)
	{

		cout<<"numberCornersTemp == numberCornerPoints!!!"<<endl;
		return true;

	}
	else
	{

		cout<<"numberCornersTemp != numberCornerPoints!!!"<<endl;
		return false;

	}

	//return true;

}

bool CVTBasedPolycube::HexMeshProjectionBoundary()
{

	int i, j;

	double paraPos[3], realPos[3];

	for (i = 0; i < parametricHex.vertexNumber; i++)
	{

		if (i == 1785)
		{
			i = i;
		}

		if (parametricHex.vertexSign[i] != 0)
		{

			for (j = 0; j < 3; j++)
			{

				paraPos[j] = parametricHex.vertex[i][j];

			}

			Projection(paraPos, realPos);

			for (j = 0; j < 3; j++)
			{

				realDomainHex.vertex[i][j] = realPos[j];

			}

		}
		else
		{

			//for (j = 0; j < 3; j++)
			//{

			//	realDomainHex.vertex[i][j] = 0.f;

			//}

			FindPropagationBoundElements(i);

			//outputCentroids<<i<<": "<<propElement[i].px<<" "<<propElement[i].nx<<" "<<propElement[i].py<<" "<<propElement[i].ny<<" "<<propElement[i].pz<<" "<<propElement[i].nz<<endl;

		}

	}

	return true;

}

bool CVTBasedPolycube::Projection(double paraPosition[3], double *realPosition)
{

	int i, j, k, p, q, index;
	int patchIndex;
	bool onArcsFlag, inBoxFlag;

	double dTemp, minCoords[3], maxCoords[3], dP[3][3], dPara[3][3], dSign[3];
	double dVec[3];

	for (i = 0; i < 3; i++)
	{
		realPosition[i] = 0.f;
	}

	onArcsFlag = false;

	for (i = 0; i < NUM_POLYCUBE_PATCH; i++)
	{

		bool counted = false;

		for (j = 0; j < polycubePatch[i].numCorner; j++)
		{

			p = 0;

			index = polycubePatch[i].boundaryEdge[j][1];

			int indexStart = polycubePatch[i].boundaryEdge[j][0];
			int indexEnd = polycubePatch[i].boundaryEdge[j][polycubePatch[i].boundaryEdge[j].size()-1];

			for (k = 0; k < 3; k++)
			{

				if (fabs(paraPosition[k] - polycubePara->vertex[index][k]) < EPSILON)
				{
					p++;
				}
				else
				{
					q = k;
				}
			}

			//Very important for the if condition
			if (p == 2 && 
					(
					(paraPosition[q] >= polycubePara->vertex[indexStart][q] && paraPosition[q] <= polycubePara->vertex[indexEnd][q])
					||
					(paraPosition[q] <= polycubePara->vertex[indexStart][q] && paraPosition[q] >= polycubePara->vertex[indexEnd][q])
					)
				)
			{

				patchIndex = j;

				onArcsFlag = true;

				for (k = 0; k < polycubePatch[i].boundaryEdge[j].size()-1; k++)
				{

					int tempIndexOne = polycubePatch[i].boundaryEdge[j][k];
					int tempIndexTwo = polycubePatch[i].boundaryEdge[j][k+1];

					dTemp = (paraPosition[q] - polycubePara->vertex[tempIndexOne][q]) / (polycubePara->vertex[tempIndexTwo][q] - polycubePara->vertex[tempIndexOne][q]);

					if (dTemp > -EPSILON && dTemp < 1 + EPSILON)
					{

						for (int l = 0; l < 3; l++)
						{

							realPosition[l] = (1-dTemp)*vertex[tempIndexOne][l] + dTemp*vertex[tempIndexTwo][l];

						}

						counted = true;

						break;

					}

				}

				break;

			}

		}

		///////May be Just break; is OK enough? Not enough
		if (counted == true)
		{
			break;
		}

	}

	int indexCluster;
	int iConst;

	if (!onArcsFlag)
	{

		for (i = 0; i < elementNumber; i++)
		{

			indexCluster = elementArray[i].indexCluster;
			iConst = patch_const[indexCluster];

			//////////////////////////////////////////////////////////////////////////////////////
			//Reduce computational cost
			if (fabs(paraPosition[iConst] - polycubePara->vertex[element[i][0]][iConst]) > EPSILON)
			{
				continue;
			}
			/////////////////////////////////////////////////////////////////////////////////////

			inBoxFlag = true;

			for (j = 0; j < 3; j++)
			{

				for (k = 0; k < 3; k++)
				{

					dP[j][k] = vertex[element[i][j]][k];
					dPara[j][k] = polycubePara->vertex[element[i][j]][k];

				}

			}

			for (j = 0; j < 3; j++)
			{

				if (j == 0)
				{

					for (k = 0; k < 3; k++)
					{
						minCoords[k] = dPara[j][k];
						maxCoords[k] = dPara[j][k];
					}

				}
				else
				{

					for (k = 0; k < 3; k++)
					{
						minCoords[k] = min(minCoords[k], dPara[j][k]);
						maxCoords[k] = max(maxCoords[k], dPara[j][k]);
					}

				}
			}

			for (j = 0; j < 3; j++)
			{

				if (!(paraPosition[j] > minCoords[j] - EPSILON && paraPosition[j] < maxCoords[j] + EPSILON))
				{

					inBoxFlag = false;
					break;

				}

			}

			if (inBoxFlag)
			{

				//dSign is the barycentric coordinates;
				dVec[0] = (dPara[0][0]-dPara[2][0])*(dPara[1][1]-dPara[2][1])-(dPara[1][0]-dPara[2][0])*(dPara[0][1]-dPara[2][1]);
				dVec[1] = (dPara[0][2]-dPara[2][2])*(dPara[1][1]-dPara[2][1])-(dPara[1][2]-dPara[2][2])*(dPara[0][1]-dPara[2][1]);
				dVec[2] = (dPara[0][0]-dPara[2][0])*(dPara[1][2]-dPara[2][2])-(dPara[1][0]-dPara[2][0])*(dPara[0][2]-dPara[2][2]);

				if(fabs(dVec[0]) > EPSILON)
				{

					dSign[0] = ((dPara[1][1]-dPara[2][1])*(paraPosition[0]-dPara[2][0])+(dPara[2][0]-dPara[1][0])*(paraPosition[1]-dPara[2][1]))/dVec[0];
					dSign[1] = ((dPara[2][1]-dPara[0][1])*(paraPosition[0]-dPara[2][0])+(dPara[0][0]-dPara[2][0])*(paraPosition[1]-dPara[2][1]))/dVec[0];
					dSign[2] = 1 - dSign[0] - dSign[1];
				
				}
				else if(fabs(dVec[1]) > EPSILON)
				{
				
					dSign[0] = ((dPara[1][1]-dPara[2][1])*(paraPosition[2]-dPara[2][2])+(dPara[2][2]-dPara[1][2])*(paraPosition[1]-dPara[2][1]))/dVec[1];
					dSign[1] = ((dPara[2][1]-dPara[0][1])*(paraPosition[2]-dPara[2][2])+(dPara[0][2]-dPara[2][2])*(paraPosition[1]-dPara[2][1]))/dVec[1];
					dSign[2] = 1 - dSign[0] - dSign[1];
				
				}
				else if(fabs(dVec[2]) > EPSILON)
				{

					dSign[0] = ((dPara[1][2]-dPara[2][2])*(paraPosition[0]-dPara[2][0])+(dPara[2][0]-dPara[1][0])*(paraPosition[2]-dPara[2][2]))/dVec[2];
					dSign[1] = ((dPara[2][2]-dPara[0][2])*(paraPosition[0]-dPara[2][0])+(dPara[0][0]-dPara[2][0])*(paraPosition[2]-dPara[2][2]))/dVec[2];
					dSign[2] = 1 - dSign[0] - dSign[1];
				
				}
				else
				{

					dSign[0] = 0.33;
					dSign[1] = 0.33;
					dSign[2] = 1 - dSign[0] - dSign[1];
				
				}

				if(dSign[0] > -1e-3 && dSign[1] > -1e-3 && dSign[2] > -1e-3)
				{
				
					for(j = 0; j < 3; j++)
					{
						realPosition[j] = dSign[0]*dP[0][j] + dSign[1]*dP[1][j] + dSign[2]*dP[2][j];
					}
					
					return true;
			
				}

			}

		}

	}

	//return true;
	return false;

}

bool CVTBasedPolycube::FindPropagationBoundElements(int vertexID)
{

	int i, j;
	int nVert;

	for (i = 0; i < parametricHex.edgeValenceNumber[vertexID]; i++)
	{

		nVert = parametricHex.edgeValence[vertexID][i];

		if ((parametricHex.vertex[nVert][0]-parametricHex.vertex[vertexID][0]) > EPSILON)
		{
			propElement[vertexID].px = nVert;
		}
		else if ((parametricHex.vertex[nVert][0]-parametricHex.vertex[vertexID][0]) < -EPSILON)
		{
			propElement[vertexID].nx = nVert;
		}
		else if ((parametricHex.vertex[nVert][1]-parametricHex.vertex[vertexID][1]) > EPSILON)
		{
			propElement[vertexID].py = nVert;
		}
		else if ((parametricHex.vertex[nVert][1]-parametricHex.vertex[vertexID][1]) < -EPSILON)
		{
			propElement[vertexID].ny = nVert;
		}
		else if ((parametricHex.vertex[nVert][2]-parametricHex.vertex[vertexID][2]) > EPSILON)
		{
			propElement[vertexID].pz = nVert;
		}
		else
		{
			propElement[vertexID].nz = nVert;
		}

	}

	int index;

	while (!parametricHex.vertexSign[propElement[vertexID].px])
	{

		index = propElement[vertexID].px;

		for (j = 0; j < parametricHex.edgeValenceNumber[index]; j++)
		{
			nVert = parametricHex.edgeValence[index][j];

			if ((parametricHex.vertex[nVert][0]-parametricHex.vertex[index][0]) > EPSILON)
			{

				propElement[vertexID].px = nVert;

				break;

			}
		}

	}

	while (!parametricHex.vertexSign[propElement[vertexID].nx])
	{

		index = propElement[vertexID].nx;

		for (j = 0; j < parametricHex.edgeValenceNumber[index]; j++)
		{
			nVert = parametricHex.edgeValence[index][j];

			if ((parametricHex.vertex[nVert][0]-parametricHex.vertex[index][0]) < -EPSILON)
			{

				propElement[vertexID].nx = nVert;

				break;

			}
		}

	}

	while (!parametricHex.vertexSign[propElement[vertexID].py])
	{

		index = propElement[vertexID].py;

		for (j = 0; j < parametricHex.edgeValenceNumber[index]; j++)
		{
			nVert = parametricHex.edgeValence[index][j];

			if ((parametricHex.vertex[nVert][1]-parametricHex.vertex[index][1]) > EPSILON)
			{

				propElement[vertexID].py = nVert;

				break;

			}
		}

	}

	while (!parametricHex.vertexSign[propElement[vertexID].ny])
	{

		index = propElement[vertexID].ny;

		for (j = 0; j < parametricHex.edgeValenceNumber[index]; j++)
		{
			nVert = parametricHex.edgeValence[index][j];

			if ((parametricHex.vertex[nVert][1]-parametricHex.vertex[index][1]) < -EPSILON)
			{

				propElement[vertexID].ny = nVert;

				break;

			}
		}

	}

	while (!parametricHex.vertexSign[propElement[vertexID].pz])
	{

		index = propElement[vertexID].pz;

		for (j = 0; j < parametricHex.edgeValenceNumber[index]; j++)
		{
			nVert = parametricHex.edgeValence[index][j];

			if ((parametricHex.vertex[nVert][2]-parametricHex.vertex[index][2]) > EPSILON)
			{

				propElement[vertexID].pz = nVert;

				break;

			}
		}

	}

	while (!parametricHex.vertexSign[propElement[vertexID].nz])
	{

		index = propElement[vertexID].nz;

		for (j = 0; j < parametricHex.edgeValenceNumber[index]; j++)
		{
			nVert = parametricHex.edgeValence[index][j];

			if ((parametricHex.vertex[nVert][2]-parametricHex.vertex[index][2]) < -EPSILON)
			{

				propElement[vertexID].nz = nVert;

				break;

			}
		}

	}

	return true;

}

bool CVTBasedPolycube::Propagation(int vertexID)
{

	double dTemp;

	int tempIndexOne, tempIndexTwo;

	int i;
	//if (vertexID == 41833)
	//{
	//	vertexID = vertexID;
	//}

	for (i = 0; i < 3; i++)
	{
		realDomainHex.vertex[vertexID][i] = 0.f;
	}


	tempIndexOne = propElement[vertexID].nx;
	tempIndexTwo = propElement[vertexID].px;

	dTemp = (parametricHex.vertex[vertexID][0] - parametricHex.vertex[tempIndexOne][0]) / (parametricHex.vertex[tempIndexTwo][0] - parametricHex.vertex[tempIndexOne][0]);

	if (dTemp > -EPSILON && dTemp < 1 + EPSILON)
	{

		realDomainHex.vertex[vertexID][0] = (1-dTemp) * realDomainHex.vertex[tempIndexOne][0] + dTemp * realDomainHex.vertex[tempIndexTwo][0];

		//for (i = 0; i < 3; i++)
		//{

		//	realDomainHex.vertex[vertexID][i] += 1.0/3.0 * ((1-dTemp) * realDomainHex.vertex[tempIndexOne][i] + dTemp * realDomainHex.vertex[tempIndexTwo][i]);

		//}

	}

	tempIndexOne = propElement[vertexID].ny;
	tempIndexTwo = propElement[vertexID].py;

	dTemp = (parametricHex.vertex[vertexID][1] - parametricHex.vertex[tempIndexOne][1]) / (parametricHex.vertex[tempIndexTwo][1] - parametricHex.vertex[tempIndexOne][1]);

	if (dTemp > -EPSILON && dTemp < 1 + EPSILON)
	{

		realDomainHex.vertex[vertexID][1] = (1-dTemp) * realDomainHex.vertex[tempIndexOne][1] + dTemp * realDomainHex.vertex[tempIndexTwo][1];

		//for (i = 0; i < 3; i++)
		//{

		//	realDomainHex.vertex[vertexID][i] += 1.0/3.0 * ((1-dTemp) * realDomainHex.vertex[tempIndexOne][i] + dTemp * realDomainHex.vertex[tempIndexTwo][i]);

		//}

	}

	tempIndexOne = propElement[vertexID].nz;
	tempIndexTwo = propElement[vertexID].pz;

	dTemp = (parametricHex.vertex[vertexID][2] - parametricHex.vertex[tempIndexOne][2]) / (parametricHex.vertex[tempIndexTwo][2] - parametricHex.vertex[tempIndexOne][2]);

	if (dTemp > -EPSILON && dTemp < 1 + EPSILON)
	{

		realDomainHex.vertex[vertexID][2] = (1-dTemp) * realDomainHex.vertex[tempIndexOne][2] + dTemp * realDomainHex.vertex[tempIndexTwo][2];

		//for (i = 0; i < 3; i++)
		//{

		//	realDomainHex.vertex[vertexID][i] += 1.0/3.0 * ((1-dTemp) * realDomainHex.vertex[tempIndexOne][i] + dTemp * realDomainHex.vertex[tempIndexTwo][i]);

		//}

	}

	return true;

}

bool CVTBasedPolycube::HexMeshProjectionInterior()
{

	int i;

	for (i = 0; i < parametricHex.vertexNumber; i++)
	{

		if (parametricHex.vertexSign[i] != 0)
		{
			continue;
		}

		Propagation(i);

	}

	return true;

}

//bool CVTBasedPolycube::Pillowing()
//{
//
//	int newvert = 0, newhex = 0;
//	int i, j, vv0, vv1, vv2, vv3;
//
//	realDomainHex.SetBoundaryVertexSign();
//	realDomainHex.SetInnerVertexSign();
//
//	for (i = 0; i < realDomainHex.vertexNumber; i++)
//	{
//		if (realDomainHex.vertexSign[i] == 1)
//		{
//			newvert++;
//		}
//	}
//
//	for (i = 0; i < realDomainHex.elementNumber; i++)
//	{
//		for (j = 0; j < 6; j++)
//		{
//			if (realDomainHex.IsBoundaryFace(i, j))
//			{
//				newhex++;
//			}
//		}
//	}
//
//	//be careful, should we use delete
//	RawMesh *backup_mesh = new RawMesh;
//	realDomainHex.CopyMesh(backup_mesh);
//
//	//backup_mesh->Write("test_hex.raw");
//	realDomainHex.ClearOldMesh();
//	realDomainHex.CreateNewMesh(HEXAHEDRON, backup_mesh->vertexNumber + newvert, backup_mesh->elementNumber + newhex);
//
//	for (i = 0; i < backup_mesh->vertexNumber; i++)
//	{
//		realDomainHex.vertex[i][0] = backup_mesh->vertex[i][0];
//		realDomainHex.vertex[i][1] = backup_mesh->vertex[i][1];
//		realDomainHex.vertex[i][2] = backup_mesh->vertex[i][2];
//		realDomainHex.vertexSign[i] = 0;
//	}
//
//	newvert = 0;
//	for (i = 0; i < backup_mesh->vertexNumber; i++)
//	{
//		if (backup_mesh->vertexSign[i] == 1)
//		{
//			realDomainHex.vertex[backup_mesh->vertexNumber + newvert][0] = backup_mesh->vertex[i][0];
//			realDomainHex.vertex[backup_mesh->vertexNumber + newvert][1] = backup_mesh->vertex[i][1];
//			realDomainHex.vertex[backup_mesh->vertexNumber + newvert][2] = backup_mesh->vertex[i][2];
//			realDomainHex.vertexSign[backup_mesh->vertexNumber + newvert] = 1;
//			realDomainHex.vertexSign[i] = backup_mesh->vertexNumber + newvert;
//
//			newvert++;
//		}
//	}
//
//	for (i = 0; i < backup_mesh->elementNumber; i++)
//	{
//		realDomainHex.element[i][0] = backup_mesh->element[i][0];
//		realDomainHex.element[i][1] = backup_mesh->element[i][1];
//		realDomainHex.element[i][2] = backup_mesh->element[i][2];
//		realDomainHex.element[i][3] = backup_mesh->element[i][3];
//		realDomainHex.element[i][4] = backup_mesh->element[i][4];
//		realDomainHex.element[i][5] = backup_mesh->element[i][5];
//		realDomainHex.element[i][6] = backup_mesh->element[i][6];
//		realDomainHex.element[i][7] = backup_mesh->element[i][7];
//	}
//
//	newhex = 0;
//	for (i = 0; i < backup_mesh->elementNumber; i++)
//	{
//		for (j = 0; j < 6; j++)
//		{
//			if (backup_mesh->IsBoundaryFace(i, j))
//			{
//
//				//if(j == 0)
//				//{
//				//	vv0 = backup_mesh->element[i][0];	vv1 = backup_mesh->element[i][1];
//				//	vv2 = backup_mesh->element[i][2];	vv3 = backup_mesh->element[i][3];
//				//}
//				//else if(j == 1) 
//				//{
//				//	vv0 = backup_mesh->element[i][4];	vv1 = backup_mesh->element[i][7];
//				//	vv2 = backup_mesh->element[i][6];	vv3 = backup_mesh->element[i][5];
//				//}
//				//else if(j == 2) 
//				//{
//				//	vv0 = backup_mesh->element[i][0];	vv1 = backup_mesh->element[i][3];
//				//	vv2 = backup_mesh->element[i][7];	vv3 = backup_mesh->element[i][4];
//				//}
//				//else if(j == 3) 
//				//{
//				//	vv0 = backup_mesh->element[i][1];	vv1 = backup_mesh->element[i][5];
//				//	vv2 = backup_mesh->element[i][6];	vv3 = backup_mesh->element[i][2];
//				//}
//				//else if(j == 4) 
//				//{
//				//	vv0 = backup_mesh->element[i][0];	vv1 = backup_mesh->element[i][4];
//				//	vv2 = backup_mesh->element[i][5];	vv3 = backup_mesh->element[i][1];
//				//}
//				//else 
//				//{
//				//	vv0 = backup_mesh->element[i][3];	vv1 = backup_mesh->element[i][2];
//				//	vv2 = backup_mesh->element[i][6];	vv3 = backup_mesh->element[i][7];
//				//}
//
//				if(j == 0)
//				{
//					vv0 = backup_mesh->element[i][0];	vv1 = backup_mesh->element[i][1];
//					vv2 = backup_mesh->element[i][2];	vv3 = backup_mesh->element[i][3];
//				}
//				else if(j == 1) 
//				{
//					vv0 = backup_mesh->element[i][0];	vv1 = backup_mesh->element[i][4];
//					vv2 = backup_mesh->element[i][5];	vv3 = backup_mesh->element[i][1];
//				}
//				else if(j == 2) 
//				{
//					vv0 = backup_mesh->element[i][1];	vv1 = backup_mesh->element[i][5];
//					vv2 = backup_mesh->element[i][6];	vv3 = backup_mesh->element[i][2];
//				}
//				else if(j == 3) 
//				{
//					vv0 = backup_mesh->element[i][3];	vv1 = backup_mesh->element[i][2];
//					vv2 = backup_mesh->element[i][6];	vv3 = backup_mesh->element[i][7];
//				}
//				else if(j == 4) 
//				{
//					vv0 = backup_mesh->element[i][0];	vv1 = backup_mesh->element[i][3];
//					vv2 = backup_mesh->element[i][7];	vv3 = backup_mesh->element[i][4];
//				}
//				else 
//				{
//					vv0 = backup_mesh->element[i][4];	vv1 = backup_mesh->element[i][7];
//					vv2 = backup_mesh->element[i][6];	vv3 = backup_mesh->element[i][5];
//				}
//
//				realDomainHex.element[backup_mesh->elementNumber + newhex][0] = realDomainHex.vertexSign[vv0];
//				realDomainHex.element[backup_mesh->elementNumber + newhex][1] = realDomainHex.vertexSign[vv1];
//				realDomainHex.element[backup_mesh->elementNumber + newhex][2] = realDomainHex.vertexSign[vv2];
//				realDomainHex.element[backup_mesh->elementNumber + newhex][3] = realDomainHex.vertexSign[vv3];
//				realDomainHex.element[backup_mesh->elementNumber + newhex][4] = vv0;
//				realDomainHex.element[backup_mesh->elementNumber + newhex][5] = vv1;
//				realDomainHex.element[backup_mesh->elementNumber + newhex][6] = vv2;
//				realDomainHex.element[backup_mesh->elementNumber + newhex][7] = vv3;
//
//				newhex++;
//			}
//		}
//	}
//
//	delete backup_mesh;
//
//	realDomainHex.SetBoundaryVertexSign();
//	realDomainHex.SetInnerVertexSign();
//
//	return true;
//
//}

bool CVTBasedPolycube::Pillowing()
{

	int newvert = 0, newhex = 0;
	int i, j, vv0, vv1, vv2, vv3;

	adaptiveFinalHex.SetBoundaryVertexSign();
	adaptiveFinalHex.SetInnerVertexSign();

	for (i = 0; i < adaptiveFinalHex.vertexNumber; i++)
	{
		if (adaptiveFinalHex.vertexSign[i] == 1)
		{
			newvert++;
		}
	}

	for (i = 0; i < adaptiveFinalHex.elementNumber; i++)
	{
		for (j = 0; j < 6; j++)
		{
			if (adaptiveFinalHex.IsBoundaryFace(i, j))
			{
				newhex++;
			}
		}
	}

	//be careful, should we use delete
	RawMesh *backup_mesh = new RawMesh;
	adaptiveFinalHex.CopyMesh(backup_mesh);

	//backup_mesh->Write("test_hex.raw");
	adaptiveFinalHex.ClearOldMesh();
	adaptiveFinalHex.CreateNewMesh(HEXAHEDRON, backup_mesh->vertexNumber + newvert, backup_mesh->elementNumber + newhex);

	for (i = 0; i < backup_mesh->vertexNumber; i++)
	{
		adaptiveFinalHex.vertex[i][0] = backup_mesh->vertex[i][0];
		adaptiveFinalHex.vertex[i][1] = backup_mesh->vertex[i][1];
		adaptiveFinalHex.vertex[i][2] = backup_mesh->vertex[i][2];
		adaptiveFinalHex.vertexSign[i] = 0;
	}

	newvert = 0;
	for (i = 0; i < backup_mesh->vertexNumber; i++)
	{
		if (backup_mesh->vertexSign[i] == 1)
		{
			adaptiveFinalHex.vertex[backup_mesh->vertexNumber + newvert][0] = backup_mesh->vertex[i][0];
			adaptiveFinalHex.vertex[backup_mesh->vertexNumber + newvert][1] = backup_mesh->vertex[i][1];
			adaptiveFinalHex.vertex[backup_mesh->vertexNumber + newvert][2] = backup_mesh->vertex[i][2];
			adaptiveFinalHex.vertexSign[backup_mesh->vertexNumber + newvert] = 1;
			adaptiveFinalHex.vertexSign[i] = backup_mesh->vertexNumber + newvert;

			newvert++;
		}
	}

	for (i = 0; i < backup_mesh->elementNumber; i++)
	{
		adaptiveFinalHex.element[i][0] = backup_mesh->element[i][0];
		adaptiveFinalHex.element[i][1] = backup_mesh->element[i][1];
		adaptiveFinalHex.element[i][2] = backup_mesh->element[i][2];
		adaptiveFinalHex.element[i][3] = backup_mesh->element[i][3];
		adaptiveFinalHex.element[i][4] = backup_mesh->element[i][4];
		adaptiveFinalHex.element[i][5] = backup_mesh->element[i][5];
		adaptiveFinalHex.element[i][6] = backup_mesh->element[i][6];
		adaptiveFinalHex.element[i][7] = backup_mesh->element[i][7];
	}

	newhex = 0;
	for (i = 0; i < backup_mesh->elementNumber; i++)
	{
		for (j = 0; j < 6; j++)
		{
			if (backup_mesh->IsBoundaryFace(i, j))
			{

				//if(j == 0)
				//{
				//	vv0 = backup_mesh->element[i][0];	vv1 = backup_mesh->element[i][1];
				//	vv2 = backup_mesh->element[i][2];	vv3 = backup_mesh->element[i][3];
				//}
				//else if(j == 1) 
				//{
				//	vv0 = backup_mesh->element[i][4];	vv1 = backup_mesh->element[i][7];
				//	vv2 = backup_mesh->element[i][6];	vv3 = backup_mesh->element[i][5];
				//}
				//else if(j == 2) 
				//{
				//	vv0 = backup_mesh->element[i][0];	vv1 = backup_mesh->element[i][3];
				//	vv2 = backup_mesh->element[i][7];	vv3 = backup_mesh->element[i][4];
				//}
				//else if(j == 3) 
				//{
				//	vv0 = backup_mesh->element[i][1];	vv1 = backup_mesh->element[i][5];
				//	vv2 = backup_mesh->element[i][6];	vv3 = backup_mesh->element[i][2];
				//}
				//else if(j == 4) 
				//{
				//	vv0 = backup_mesh->element[i][0];	vv1 = backup_mesh->element[i][4];
				//	vv2 = backup_mesh->element[i][5];	vv3 = backup_mesh->element[i][1];
				//}
				//else 
				//{
				//	vv0 = backup_mesh->element[i][3];	vv1 = backup_mesh->element[i][2];
				//	vv2 = backup_mesh->element[i][6];	vv3 = backup_mesh->element[i][7];
				//}

				if(j == 0)
				{
					vv0 = backup_mesh->element[i][0];	vv1 = backup_mesh->element[i][1];
					vv2 = backup_mesh->element[i][2];	vv3 = backup_mesh->element[i][3];
				}
				else if(j == 1) 
				{
					vv0 = backup_mesh->element[i][0];	vv1 = backup_mesh->element[i][4];
					vv2 = backup_mesh->element[i][5];	vv3 = backup_mesh->element[i][1];
				}
				else if(j == 2) 
				{
					vv0 = backup_mesh->element[i][1];	vv1 = backup_mesh->element[i][5];
					vv2 = backup_mesh->element[i][6];	vv3 = backup_mesh->element[i][2];
				}
				else if(j == 3) 
				{
					vv0 = backup_mesh->element[i][3];	vv1 = backup_mesh->element[i][2];
					vv2 = backup_mesh->element[i][6];	vv3 = backup_mesh->element[i][7];
				}
				else if(j == 4) 
				{
					vv0 = backup_mesh->element[i][0];	vv1 = backup_mesh->element[i][3];
					vv2 = backup_mesh->element[i][7];	vv3 = backup_mesh->element[i][4];
				}
				else 
				{
					vv0 = backup_mesh->element[i][4];	vv1 = backup_mesh->element[i][7];
					vv2 = backup_mesh->element[i][6];	vv3 = backup_mesh->element[i][5];
				}

				adaptiveFinalHex.element[backup_mesh->elementNumber + newhex][0] = adaptiveFinalHex.vertexSign[vv0];
				adaptiveFinalHex.element[backup_mesh->elementNumber + newhex][1] = adaptiveFinalHex.vertexSign[vv1];
				adaptiveFinalHex.element[backup_mesh->elementNumber + newhex][2] = adaptiveFinalHex.vertexSign[vv2];
				adaptiveFinalHex.element[backup_mesh->elementNumber + newhex][3] = adaptiveFinalHex.vertexSign[vv3];
				adaptiveFinalHex.element[backup_mesh->elementNumber + newhex][4] = vv0;
				adaptiveFinalHex.element[backup_mesh->elementNumber + newhex][5] = vv1;
				adaptiveFinalHex.element[backup_mesh->elementNumber + newhex][6] = vv2;
				adaptiveFinalHex.element[backup_mesh->elementNumber + newhex][7] = vv3;

				newhex++;
			}
		}
	}

	delete backup_mesh;

	adaptiveFinalHex.SetBoundaryVertexSign();
	adaptiveFinalHex.SetInnerVertexSign();

	return true;

}

///////////////////////////////////////////////////////////////////////////////////////////////
//Adaptive hex meshing part
bool CVTBasedPolycube::AdaptiveHexMeshing(const char *outputName)
{

	AdaptiveOctreeConstruction();
	
	if (MARECHAL_METHOD == 1)
	{
		AdaptiveHexMeshExtractionMarechal(outputName);
	}
	else 
	{
		AdaptiveHexMeshExtraction(outputName);
	}

	return true;

}

double		CVTBasedPolycube::TriArea(double v0[3], double v1[3], double v2[3])
{
	Vector3d n;
	Vector3d a(v1[0]-v0[0], v1[1]-v0[1], v1[2]-v0[2]);
	Vector3d b(v2[0]-v0[0], v2[1]-v0[1], v2[2]-v0[2]);
	n = a.cross(b);
	return n.norm();
}

double		CVTBasedPolycube::QuadArea(double v0[3], double v1[3], double v2[3], double v3[3], double *MassCenter)
{
	int i, j;
	//vector<Tri> TempTriList;
	double t_area = 0.0f, area;

	Vector3d TempNormal, va, vb;

	for(i = 0; i < 3; i++)
	{
		MassCenter[i] = 0.0f;
	}

	for(i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			area = TriArea(v0, v1, v2);
		}
		else
		{
			area = TriArea(v0, v2, v3);
		}
		t_area += area;
	}
	for(j = 0; j < 3; j++)
	{
		MassCenter[j] += (v0[j] + v1[j] + v2[j] + v3[j])/4;
	}
	return t_area;
}
double		CVTBasedPolycube::GetHexVolume(double p[8][3], double *MassCenter)
{	
	int i, j;
	double u, v, w, su[3], sv[3], sw[3], cuv[3], volume;

	for(i = 0; i < 3; i++)
	{
		MassCenter[i] = 0.0f;
	}
	for(i = 0; i < 8; i++)
	{
		for(j = 0; j < 3; j++)
		{
			MassCenter[j] += p[i][j];
		}
	}
	for(i = 0; i < 3; i++)
	{
		MassCenter[i] /= 8;
	}

	volume = 0.0f;
	for(i = 0; i < 8; i++) 
	{
		u = 0.5f - (double)sqrt(3.0f)/6.0f;
		v = u;
		w = u;
		if(i == 1 || i == 3 || i == 5 || i == 7) u = 0.5f + (double)sqrt(3.0f)/6.0f;
		if(i == 2 || i == 3 || i == 6 || i == 7) v = 0.5f + (double)sqrt(3.0f)/6.0f;
		if(i == 4 || i == 5 || i == 6 || i == 7) w = 0.5f + (double)sqrt(3.0f)/6.0f;
		for(j = 0; j < 3; j++) 
		{
			su[j] = (1-v)*(1-w)*(p[1][j] - p[0][j]) + v*(1-w)*(p[2][j] - p[3][j]) + (1-v)*w*(p[5][j] - p[4][j]) + v*w*(p[6][j] - p[7][j]);
			sv[j] = (1-u)*(1-w)*(p[3][j] - p[0][j]) + u*(1-w)*(p[2][j] - p[1][j]) + (1-u)*w*(p[7][j] - p[4][j]) + u*w*(p[6][j] - p[5][j]);
			sw[j] = (1-u)*(1-v)*(p[4][j] - p[0][j]) + u*(1-v)*(p[5][j] - p[1][j]) + (1-u)*v*(p[7][j] - p[3][j]) + u*v*(p[6][j] - p[2][j]);
		}
		cuv[0] = su[1]*sv[2] - su[2]*sv[1];
		cuv[1] = su[2]*sv[0] - su[0]*sv[2];
		cuv[2] = su[0]*sv[1] - su[1]*sv[0];

		volume += (cuv[0]*sw[0]+cuv[1]*sw[1]+cuv[2]*sw[2])/8.0f;
	}
	return volume;
}

bool CVTBasedPolycube::AdaptiveOctreeConstruction()
{

	int i, j, k, p, q, nNeighbor;
	Node TempNode, NewNode[19];
	Element TempElement, NewElement[8];
	bool SubFlag, eFlag, BalanceFlag;
	int iIndex, iTemp, octree_id, octree_level;
	vector<int> ElementList;
	Junction NewJunction;
	double TParaPos[3];
	double PointPos[3], TempCoords[3], dtemp, t_area, vPos8[8][3];
	int NumNode, NumElement, NewNodeIndex[19], NewElementIndex[8];

	for (i = 0; i < realDomainHex.vertexNumber; i++)
	{

		if (realDomainHex.vertexSign[i] == 1)
		{
			TempNode.BoundaryFlag = true;
		}
		else
		{
			TempNode.BoundaryFlag = false;
		}

		for (j = 0; j < 3; j++)
		{
			TempNode.Coords[j] = realDomainHex.vertex[i][j];
			TempNode.ParaPos[j] = parametricHex.vertex[i][j];
		}

		Nodes.push_back(TempNode);

		//Nodes[i].NeighborElement.push_back(0);

		for (j = 0; j < realDomainHex.elementValenceNumber[i]; j++)
		{

			int index = realDomainHex.elementValence[i][j];

			Nodes[i].NeighborElement.push_back(index);

		}

	}

	for (i = 0; i < realDomainHex.elementNumber; i++)
	{

		TempElement.OctreeID = realDomainHex.elementSign[i];

		TempElement.BoundaryFlag = false;

		for (j = 0; j < 8; j++)
		{

			TempElement.NodeIndex[j] = realDomainHex.element[i][j];

			int index = TempElement.NodeIndex[j];
			if (realDomainHex.vertexSign[index] == 1)
			{
				TempElement.BoundaryFlag = true;
			}

		}

		Elements.push_back(TempElement);

	}


	for (i = 0; i < Elements.size(); i++)
	{

		octree_id = Elements[i].OctreeID;

		if (octree_id != -1)
		{
			octree_level = GetLevel(octree_id);
			if (octree_level >= (OCTREE_MAX_LEVEL))
			{
				continue;
			}
		}

		SubFlag = false; //True for subdivision, False for no subdivision

		BalanceFlag = true;

		//////////////////////////////////////////
		if (octree_id == -1)
		{
			/////For rod model
			//SubFlag = true;

			/////For complicate CAD model
			Elements[i].OctreeID = level_id[OCTREE_MAX_LEVEL];
			SubFlag = false;
			continue;
		}
		/////////////////////////////////////////

		if (!SubFlag)
		{

			for (j = 0; j < 8; j++)
			{

				for(k = 0; k < Nodes[Elements[i].NodeIndex[j]].NeighborElement.size(); k++)
				{
					
					iIndex = Nodes[Elements[i].NodeIndex[j]].NeighborElement[k];

					int octree_id_one = Elements[iIndex].OctreeID;
			
					//////////////////////////////////////////////////////////////////
					//if (octree_id_one == -1)
					//{
					//	BalanceFlag = false;
					//	break;
					//}
					//////////////////////////////////////////////////////////////////

					int octree_level_one = GetLevel(octree_id_one);

					//if(Elements[iIndex].OctreeLevel > Elements[i].OctreeLevel + 1)
					if(octree_level_one > octree_level + 1)
					{
						BalanceFlag = false;
						break;
					}

				}
				if(!BalanceFlag)
				{
					SubFlag = true;
					break;
				}

			}

		}

		if (!SubFlag)
		{

			int index = Elements[i].OctreeID;

			if (refineFlagArray[index] == 1)
			{
				SubFlag = true;
			}			

		}

		if (Elements[i].BoundaryFlag && !SubFlag)
		{

			//SubFlag = true;


			//For CAD model subdivision
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			int count = 0;

			for (j = 0; j < 8; j++)
			{

				if (Nodes[Elements[i].NodeIndex[j]].BoundaryFlag == true)
				{
					count++;
				}

			}

			//if (count != 4) // or if (count > 4)
			if (count > 4)
			{
				//////////////////For complicate CAD
				int xx, yy, zz;
				OctreeidxToXYZ(octree_id, xx, yy, zz, octree_level);

				if (xx > 1 && xx < 8 && yy > 1 && yy < 22)
				{
					SubFlag = true;
				}
				if (xx > 24 && xx < 30 && yy > 1 && yy < 22)
				{
					SubFlag = true;
				}
				/////////////////

				//SubFlag = true;
			}
			/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			/*for(j = 0; j < 6; j++)
			{
				if(!NewNode[FACENODES[j][8]-8].BoundaryFlag && (Nodes[TempElement.NodeIndex[FACENODES[j][0]]].BoundaryFlag ||
					Nodes[TempElement.NodeIndex[FACENODES[j][2]]].BoundaryFlag || Nodes[TempElement.NodeIndex[FACENODES[j][4]]].BoundaryFlag || Nodes[TempElement.NodeIndex[FACENODES[j][6]]].BoundaryFlag))
				{
					for(k = 0; k < 3; k++)
					{
						PointPos[k] = 0.0f;
					}
					t_area = 0.0f;
					for(k = 0; k < 4; k++)
					{
						dtemp = QuadArea(Nodes[TempElement.NodeIndex[FACENODES[j][k*2]]].Coords, NewNode[FACENODES[j][k*2+1]-8].Coords, NewNode[FACENODES[j][8]-8].Coords, NewNode[FACENODES[j][(k+3)%4*2+1]-8].Coords, TempCoords);
						t_area += dtemp;
						for(p = 0; p < 3; p++)
						{
							PointPos[p] += TempCoords[p]*dtemp;
						}
					}
					if(t_area < EPSILON)
						continue;
					for(k = 0; k < 3; k++)
					{
						PointPos[k] /= t_area;
						NewNode[FACENODES[j][8]-8].Coords[k] = PointPos[k];
					}
				}
			}
			for(j = 0; j < 3; j++)
			{
				PointPos[j] = 0.0f;
			}
			t_area = 0.0f;
			for(j = 0; j < 8; j++)
			{
				for(k = 0; k < 8; k++)
				{
					if(NewElementNIndex[j][k*2])
					{
						for(p = 0; p < 3; p++)
							vPos8[k][p] = NewNode[NewElementNIndex[j][k*2+1]].Coords[p];
					}
					else
					{
						for(p = 0; p < 3; p++)
							vPos8[k][p] = Nodes[TempElement.NodeIndex[NewElementNIndex[j][k*2+1]]].Coords[p];
					}
				}
				dtemp = GetHexVolume(vPos8, TempCoords);
				t_area += dtemp;
				for(p = 0; p < 3; p++)
				{
					PointPos[p] += TempCoords[p]*dtemp;
				}
			}
			if(t_area > EPSILON)
			{
				for(k = 0; k < 3; k++)
				{
					PointPos[k] /= t_area;
					NewNode[13].Coords[k] = PointPos[k];
				}
			}*/


			/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			//for (j = 0; j < 6; j++)
			//{

			//	if(Nodes[Elements[i].NodeIndex[PATCHNODES[j][0]]].BoundaryFlag &&
			//		Nodes[Elements[i].NodeIndex[PATCHNODES[j][1]]].BoundaryFlag &&
			//		Nodes[Elements[i].NodeIndex[PATCHNODES[j][2]]].BoundaryFlag &&
			//		Nodes[Elements[i].NodeIndex[PATCHNODES[j][3]]].BoundaryFlag)
			//	{

			//		for (k = 0; k < 3; k++)
			//		{

			//			TParaPos[k] = (Nodes[Elements[i].NodeIndex[PATCHNODES[j][0]]].ParaPos[k] + Nodes[Elements[i].NodeIndex[PATCHNODES[j][1]]].ParaPos[k]
			//			+ Nodes[Elements[i].NodeIndex[PATCHNODES[j][2]]].ParaPos[k] + Nodes[Elements[i].NodeIndex[PATCHNODES[j][3]]].ParaPos[k])/4;

			//			TempCoords[k] = (Nodes[Elements[i].NodeIndex[PATCHNODES[j][0]]].Coords[k] + Nodes[Elements[i].NodeIndex[PATCHNODES[j][1]]].Coords[k]
			//			+ Nodes[Elements[i].NodeIndex[PATCHNODES[j][2]]].Coords[k] + Nodes[Elements[i].NodeIndex[PATCHNODES[j][3]]].Coords[k])/4;

			//		}

			//		Projection(TParaPos, PointPos);

			//		dtemp = 0.0f;

			//		for (k = 0; k < 3; k++)
			//		{

			//			dtemp += pow(PointPos[k] - TempCoords[k], 2);

			//		}

			//		dtemp = sqrt(dtemp);

			//		if (dtemp > OCTREE_TOL_ERR)
			//		{
			//			SubFlag = true;
			//			break;
			//		}

			//	}

			//}
			/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		}

		if (SubFlag)
		{

			int octree_idx[8];

			if (octree_id != -1)
			{
				RefineBrothers(octree_id, octree_idx);
			}

			NumNode = Nodes.size();
			NumElement = Elements.size();
			TempElement = Elements[i];
			Elements[i].Junctions.clear();
			NewElementIndex[0] = i;

			for (j = 0; j < 7; j++)
			{

				NewElementIndex[j+1] = NumElement + j;

			}

			//Generate 19 New Nodes
			for (j = 0; j < 19; j++)
			{

				NewNodeIndex[j] = NumNode + j;
				NewNode[j].NeighborElement.clear();

				if (j == 13)
				{
					NewNode[j].BoundaryFlag = false;
				}
				else
				{
					NewNode[j].BoundaryFlag = true;
					for (k = 0; k < NewNodeRelation[j][0]; k++)
					{
						if(!Nodes[TempElement.NodeIndex[NewNodeRelation[j][k+1]]].BoundaryFlag)
						{
							NewNode[j].BoundaryFlag = false;
							break;
						}
					}
				}

				for (k = 0; k < 3; k++)
				{
					//iIndex = 0;
					NewNode[j].Coords[k] = 0.0f;
					NewNode[j].ParaPos[k] = 0.0f;

					for(p = 0; p < NewNodeRelation[j][0]; p++)
					{
						NewNode[j].Coords[k] += Nodes[TempElement.NodeIndex[NewNodeRelation[j][p+1]]].Coords[k];
						NewNode[j].ParaPos[k] += Nodes[TempElement.NodeIndex[NewNodeRelation[j][p+1]]].ParaPos[k];
					}
					NewNode[j].Coords[k] /= NewNodeRelation[j][0];
					NewNode[j].ParaPos[k] /= NewNodeRelation[j][0];

				}

				if (NewNode[j].BoundaryFlag)
				{
					Projection(NewNode[j].ParaPos, NewNode[j].Coords);
				}
			}

			//smoothing the local mesh

			if(TempElement.BoundaryFlag)
			{
				for(j = 0; j < 6; j++)
				{
					if(!NewNode[FACENODES[j][8]-8].BoundaryFlag && (Nodes[TempElement.NodeIndex[FACENODES[j][0]]].BoundaryFlag ||
						Nodes[TempElement.NodeIndex[FACENODES[j][2]]].BoundaryFlag || Nodes[TempElement.NodeIndex[FACENODES[j][4]]].BoundaryFlag || Nodes[TempElement.NodeIndex[FACENODES[j][6]]].BoundaryFlag))
					{
						for(k = 0; k < 3; k++)
						{
							PointPos[k] = 0.0f;
						}
						t_area = 0.0f;
						for(k = 0; k < 4; k++)
						{
							dtemp = QuadArea(Nodes[TempElement.NodeIndex[FACENODES[j][k*2]]].Coords, NewNode[FACENODES[j][k*2+1]-8].Coords, NewNode[FACENODES[j][8]-8].Coords, NewNode[FACENODES[j][(k+3)%4*2+1]-8].Coords, TempCoords);
							t_area += dtemp;
							for(p = 0; p < 3; p++)
							{
								PointPos[p] += TempCoords[p]*dtemp;
							}
						}
						if(t_area < EPSILON)
							continue;
						for(k = 0; k < 3; k++)
						{
							PointPos[k] /= t_area;
							NewNode[FACENODES[j][8]-8].Coords[k] = PointPos[k];
						}
					}
				}
				for(j = 0; j < 3; j++)
				{
					PointPos[j] = 0.0f;
				}
				t_area = 0.0f;
				for(j = 0; j < 8; j++)
				{
					for(k = 0; k < 8; k++)
					{
						if(NewElementNIndex[j][k*2])
						{
							for(p = 0; p < 3; p++)
								vPos8[k][p] = NewNode[NewElementNIndex[j][k*2+1]].Coords[p];
						}
						else
						{
							for(p = 0; p < 3; p++)
								vPos8[k][p] = Nodes[TempElement.NodeIndex[NewElementNIndex[j][k*2+1]]].Coords[p];
						}
					}
					dtemp = GetHexVolume(vPos8, TempCoords);
					t_area += dtemp;
					for(p = 0; p < 3; p++)
					{
						PointPos[p] += TempCoords[p]*dtemp;
					}
				}
				if(t_area > EPSILON)
				{
					for(k = 0; k < 3; k++)
					{
						PointPos[k] /= t_area;
						NewNode[13].Coords[k] = PointPos[k];
					}
				}
			}


			//End smoothing the local mesh

			//Check whether the new nodes are already exist or not
			for (j = 0; j < 19; j++)
			{

				if (NewNodeRelation[j][0] == 8)
				{
					continue;
				}

				for (k = 0; k < TempElement.Junctions.size(); k++)
				{

					eFlag = true;
					for(p = 0; p < 3; p++)
					{
						//if(!(NewNode[j].ParaPos[p] == Nodes[TempElement.Junctions[k].NodeIndex].ParaPos[p]))
						if(!(fabs(NewNode[j].ParaPos[p] - Nodes[TempElement.Junctions[k].NodeIndex].ParaPos[p]) < EPSILON))
						{
							eFlag = false;
							break;
						}
					}

					if(eFlag)
					{
						NewNodeIndex[j] = TempElement.Junctions[k].NodeIndex;
						for(p = 0; p < NewNodeRelation[j][0]; p++)
						{
							if(p == 0)
							{
								for(q = 0; q < Nodes[NewNodeIndex[j]].NeighborElement.size(); q++)
								{
									if(Nodes[NewNodeIndex[j]].NeighborElement[q] == i)
									{
										Nodes[NewNodeIndex[j]].NeighborElement[q] = NewElementIndex[NewNodeRelation[j][p+1]];
									}
								}
							}
							else
							{
								Nodes[NewNodeIndex[j]].NeighborElement.push_back(NewElementIndex[NewNodeRelation[j][p+1]]);
							}
						}
						TempElement.Junctions.erase(TempElement.Junctions.begin() + k);
						//if(Nodes[NewNodeIndex[j]].NeighborElement.size() == 8)
							//Nodes[NewNodeIndex[j]].Type = 0;
						for(p = j+1; p < 19; p++)
						{
							NewNodeIndex[p] -= 1;
						}
						break;
					}

				}

			}

			for(j = 0; j < 19; j++)
			{
				if(NewNodeIndex[j] < NumNode)
					continue;
				if(j == 13)
				{
					for(k = 0; k < 8; k++)
						NewNode[j].NeighborElement.push_back(NewElementIndex[k]);
				}
				else
				{
					for(k = 0; k < NewNodeRelation[j][0]; k++)
					{
						NewNode[j].NeighborElement.push_back(NewElementIndex[NewNodeRelation[j][k+1]]);
					}
					ElementList.clear();
					for(k = 0; k < NewNodeRelation[j][0]; k++)
					{
						iIndex = TempElement.NodeIndex[NewNodeRelation[j][k+1]];
						nNeighbor = Nodes[iIndex].NeighborElement.size();
						for(p = 0; p < nNeighbor; p++)
						{
							eFlag = false;
							iTemp = Nodes[iIndex].NeighborElement[p];
							for(q = 0; q < ElementList.size(); q++)
							{
								if(ElementList[q] == iTemp)
								{
									eFlag = true;
									break;
								}
							}
							if(iTemp == i || eFlag)
								continue;


							for (int l = 0; l < 19; l++)
							{

								double ninteenNode[3] = {0.f, 0.f, 0.f};

								for (int m = 0;  m < NewNodeRelation[l][0]; m++)
								{
									ninteenNode[0] += Nodes[Elements[iTemp].NodeIndex[NewNodeRelation[l][m+1]]].ParaPos[0];
									ninteenNode[1] += Nodes[Elements[iTemp].NodeIndex[NewNodeRelation[l][m+1]]].ParaPos[1];
									ninteenNode[2] += Nodes[Elements[iTemp].NodeIndex[NewNodeRelation[l][m+1]]].ParaPos[2];
								}

								ninteenNode[0] /= NewNodeRelation[l][0];
								ninteenNode[1] /= NewNodeRelation[l][0];
								ninteenNode[2] /= NewNodeRelation[l][0];

								if (fabs(NewNode[j].ParaPos[0] - ninteenNode[0]) < EPSILON && fabs(NewNode[j].ParaPos[1] - ninteenNode[1]) < EPSILON && fabs(NewNode[j].ParaPos[2] - ninteenNode[2]) < EPSILON)
								{
									ElementList.push_back(iTemp);
									NewNode[j].NeighborElement.push_back(iTemp);
									NewJunction.NodeIndex = NewNodeIndex[j];
									Elements[iTemp].Junctions.push_back(NewJunction);

									break;

								}

							}

							/*if(NewNode[j].ParaPos[0] >= Nodes[Elements[iTemp].NodeIndex[0]].ParaPos[0]
							&& NewNode[j].ParaPos[1] >= Nodes[Elements[iTemp].NodeIndex[0]].ParaPos[1]
							&& NewNode[j].ParaPos[2] >= Nodes[Elements[iTemp].NodeIndex[0]].ParaPos[2]
							&& NewNode[j].ParaPos[0] <= Nodes[Elements[iTemp].NodeIndex[6]].ParaPos[0]
							&& NewNode[j].ParaPos[1] <= Nodes[Elements[iTemp].NodeIndex[6]].ParaPos[1]
							&& NewNode[j].ParaPos[2] <= Nodes[Elements[iTemp].NodeIndex[6]].ParaPos[2])*/
							/*if((NewNode[j].ParaPos[0] > Nodes[Elements[iTemp].NodeIndex[0]].ParaPos[0] || fabs(NewNode[j].ParaPos[0] - Nodes[Elements[iTemp].NodeIndex[0]].ParaPos[0]) < EPSILON)
							&& (NewNode[j].ParaPos[1] > Nodes[Elements[iTemp].NodeIndex[0]].ParaPos[1] || fabs(NewNode[j].ParaPos[1] - Nodes[Elements[iTemp].NodeIndex[0]].ParaPos[1]) < EPSILON)
							&& (NewNode[j].ParaPos[2] > Nodes[Elements[iTemp].NodeIndex[0]].ParaPos[2] || fabs(NewNode[j].ParaPos[2] - Nodes[Elements[iTemp].NodeIndex[0]].ParaPos[2]) < EPSILON)
							&& (NewNode[j].ParaPos[0] < Nodes[Elements[iTemp].NodeIndex[6]].ParaPos[0] || fabs(NewNode[j].ParaPos[0] - Nodes[Elements[iTemp].NodeIndex[6]].ParaPos[0]) < EPSILON)
							&& (NewNode[j].ParaPos[1] < Nodes[Elements[iTemp].NodeIndex[6]].ParaPos[1] || fabs(NewNode[j].ParaPos[1] - Nodes[Elements[iTemp].NodeIndex[6]].ParaPos[1]) < EPSILON)
							&& (NewNode[j].ParaPos[2] < Nodes[Elements[iTemp].NodeIndex[6]].ParaPos[2] || fabs(NewNode[j].ParaPos[2] - Nodes[Elements[iTemp].NodeIndex[6]].ParaPos[2]) < EPSILON))
							{
								ElementList.push_back(iTemp);
								NewNode[j].NeighborElement.push_back(iTemp);
								NewJunction.NodeIndex = NewNodeIndex[j];
								Elements[iTemp].Junctions.push_back(NewJunction);
							}*/

						}
						//if(eFlag)
						//	break;
					}
				}
				Nodes.push_back(NewNode[j]);
			}

			// update old nodes' neighbors;
			for(j = 0; j < 8; j++)
			{
				nNeighbor = Nodes[TempElement.NodeIndex[j]].NeighborElement.size();
				for(k = 0; k < nNeighbor; k++)
				{
					if(Nodes[TempElement.NodeIndex[j]].NeighborElement[k] == i)
					{
						Nodes[TempElement.NodeIndex[j]].NeighborElement[k] = NewElementIndex[j];
						break;
					}
				}
			}

			if (octree_id == -1)
			{

				for (j = 0; j < 8; j++)
				{
					NewElement[j].OctreeID = level_id[OCTREE_MAX_LEVEL];
				}

			}
			else
			{
				octree_id = TempElement.OctreeID;
				octree_level = GetLevel(octree_id);
				int xx, yy, zz;
				OctreeidxToXYZ(octree_id, xx, yy, zz, octree_level);

				octree_id = XYZToOctreeidx(xx*2, yy*2, zz*2, octree_level+1);
				NewElement[0].OctreeID = octree_id;

				octree_id = XYZToOctreeidx(xx*2 + 1, yy*2, zz*2, octree_level+1);
				NewElement[1].OctreeID = octree_id;

				octree_id = XYZToOctreeidx(xx*2 + 1, yy*2 + 1, zz*2, octree_level+1);
				NewElement[2].OctreeID = octree_id;

				octree_id = XYZToOctreeidx(xx*2, yy*2 + 1, zz*2, octree_level+1);
				NewElement[3].OctreeID = octree_id;

				octree_id = XYZToOctreeidx(xx*2, yy*2, zz*2 + 1, octree_level+1);
				NewElement[4].OctreeID = octree_id;

				octree_id = XYZToOctreeidx(xx*2 + 1, yy*2, zz*2 + 1, octree_level+1);
				NewElement[5].OctreeID = octree_id;

				octree_id = XYZToOctreeidx(xx*2 + 1, yy*2 + 1, zz*2 + 1, octree_level+1);
				NewElement[6].OctreeID = octree_id;

				octree_id = XYZToOctreeidx(xx*2, yy*2 + 1, zz*2 + 1, octree_level+1);
				NewElement[7].OctreeID = octree_id;
			}		

			// generate new elements;
			for(j = 0; j < 8; j++)
			{
				NewElement[j].Junctions.clear();
				
				//NewElement[j].OctreeLevel = TempElement.OctreeLevel + 1;
				//octree_id = TempElement.OctreeID;
				//octree_level = GetLevel(octree_id);
				//int xx, yy, zz;
				//OctreeidxToXYZ(octree_id, xx, yy, zz, octree_level);
				//octree_id = XYZToOctreeidx(xx*2, yy*2, zz*2, octree_level+1);

				//NewElement[j].OctreeID = octree_id;
				
				NewElement[j].BoundaryFlag = Nodes[TempElement.NodeIndex[j]].BoundaryFlag;
				for(k = 0; k < 8; k++)
				{
					if(NewElementNIndex[j][k*2])
					{
						NewElement[j].NodeIndex[k] = NewNodeIndex[NewElementNIndex[j][k*2+1]];
					}
					else
					{
						NewElement[j].NodeIndex[k] = TempElement.NodeIndex[NewElementNIndex[j][k*2+1]];
					}
				}
			}

			for(j = 0; j < TempElement.Junctions.size(); j++)
			{
				iIndex = TempElement.Junctions[j].NodeIndex;
				eFlag = true;
				for(k = 0; k < 8; k++)
				{
					
					for (int l = 0; l < 19; l++)
					{

						double ninteenNode[3] = {0.f, 0.f, 0.f};

						for (int m = 0;  m < NewNodeRelation[l][0]; m++)
						{
							ninteenNode[0] += Nodes[NewElement[k].NodeIndex[NewNodeRelation[l][m+1]]].ParaPos[0];
							ninteenNode[1] += Nodes[NewElement[k].NodeIndex[NewNodeRelation[l][m+1]]].ParaPos[1];
							ninteenNode[2] += Nodes[NewElement[k].NodeIndex[NewNodeRelation[l][m+1]]].ParaPos[2];
						}

						ninteenNode[0] /= NewNodeRelation[l][0];
						ninteenNode[1] /= NewNodeRelation[l][0];
						ninteenNode[2] /= NewNodeRelation[l][0];

						if (fabs(Nodes[iIndex].ParaPos[0] - ninteenNode[0]) < EPSILON && fabs(Nodes[iIndex].ParaPos[1] - ninteenNode[1]) < EPSILON && fabs(Nodes[iIndex].ParaPos[2] - ninteenNode[2]) < EPSILON)
						{
							NewElement[k].Junctions.push_back(TempElement.Junctions[j]);
							if(eFlag)
							{
								eFlag = false;
								for(p = 0; p < Nodes[iIndex].NeighborElement.size(); p++)
								{
									if(Nodes[iIndex].NeighborElement[p] == i)
									{
										Nodes[iIndex].NeighborElement[p] = NewElementIndex[k];
										break;
									}
								}
							}
							else
							{
								Nodes[iIndex].NeighborElement.push_back(NewElementIndex[k]);
							}

							break;

						}

					}

					//if((Nodes[iIndex].ParaPos[0] > Nodes[NewElement[k].NodeIndex[0]].ParaPos[0] || fabs(Nodes[iIndex].ParaPos[0] - Nodes[NewElement[k].NodeIndex[0]].ParaPos[0]) < EPSILON)
					//&& (Nodes[iIndex].ParaPos[1] > Nodes[NewElement[k].NodeIndex[0]].ParaPos[1] || fabs(Nodes[iIndex].ParaPos[1] - Nodes[NewElement[k].NodeIndex[0]].ParaPos[1]) < EPSILON)
					//&& (Nodes[iIndex].ParaPos[2] > Nodes[NewElement[k].NodeIndex[0]].ParaPos[2] || fabs(Nodes[iIndex].ParaPos[2] - Nodes[NewElement[k].NodeIndex[0]].ParaPos[2]) < EPSILON)
					//&& (Nodes[iIndex].ParaPos[0] < Nodes[NewElement[k].NodeIndex[6]].ParaPos[0] || fabs(Nodes[iIndex].ParaPos[0] - Nodes[NewElement[k].NodeIndex[6]].ParaPos[0]) < EPSILON)
					//&& (Nodes[iIndex].ParaPos[1] < Nodes[NewElement[k].NodeIndex[6]].ParaPos[1] || fabs(Nodes[iIndex].ParaPos[1] - Nodes[NewElement[k].NodeIndex[6]].ParaPos[1]) < EPSILON)
					//&& (Nodes[iIndex].ParaPos[2] < Nodes[NewElement[k].NodeIndex[6]].ParaPos[2] || fabs(Nodes[iIndex].ParaPos[2] - Nodes[NewElement[k].NodeIndex[6]].ParaPos[2]) < EPSILON))
					//{
					//	NewElement[k].Junctions.push_back(TempElement.Junctions[j]);
					//	if(eFlag)
					//	{
					//		eFlag = false;
					//		for(p = 0; p < Nodes[iIndex].NeighborElement.size(); p++)
					//		{
					//			if(Nodes[iIndex].NeighborElement[p] == i)
					//			{
					//				Nodes[iIndex].NeighborElement[p] = NewElementIndex[k];
					//				break;
					//			}
					//		}
					//	}
					//	else
					//	{
					//		Nodes[iIndex].NeighborElement.push_back(NewElementIndex[k]);
					//	}
					//	//break;
					//}

				}
			}
			Elements[i] = NewElement[0];
			for(j = 0; j < 7; j++)
				Elements.push_back(NewElement[j+1]);
			//i--;
			i = -1;

		}

	}


	///////////////////////////////////////////////////////////////////////////////////////
	nNode = Nodes.size();
	nElement = Elements.size();

	adaptiveOctreeHex.CreateNewMesh(adaptiveOctreeHex.HEXAHEDRON, nNode, nElement);

	for (i = 0; i < nNode; i++)
	{

		for (j = 0; j < 3; j++)
		{

			adaptiveOctreeHex.vertex[i][j] = Nodes[i].Coords[j];

		}

		//if (i == 5426)
		//{
		//	for (j = 0; j < Nodes[i].NeighborElement.size(); j++)
		//	{
		//		cout<<Nodes[i].NeighborElement[j]<<",";
		//	}

		//	cout<<endl;
		//}

	}

	for (i = 0; i < nElement; i++)
	{

		for (j = 0; j < 8; j++)
		{

			adaptiveOctreeHex.element[i][j] = Elements[i].NodeIndex[j];

		}

	}

	string tempName;

	tempName = inputName + "_AdaptiveOctreePhys_hex.raw";

	adaptiveOctreeHex.Write(tempName.c_str());

	for (i = 0; i < nNode; i++)
	{

		for (j = 0; j < 3; j++)
		{

			adaptiveOctreeHex.vertex[i][j] = Nodes[i].ParaPos[j];

		}

	}

	tempName = inputName + "_AdaptiveOctreePara_hex.raw";

	adaptiveOctreeHex.Write(tempName.c_str());

	return true;

}

bool CVTBasedPolycube::AdaptiveHexMeshExtraction(const char *outputName)
{

	int i, j, k;
	int x, y, z, xx, yy, zz;
	//int cell_size;
	int level;
	int leafcell_idx;

	vector<int> eight_cells;
	Node tempVert;
	//hexVerts.resize(nElement); //hexVerts.resize(Elements.size());

	vtxIdxArray.resize(octreeCellNum, -1);
	dualVertexOnce.resize(octreeCellNum, -1);

	numVerts = nElement; //nElement is the number of elements of the adaptive octree.

	int num_hexa = 0;

	for (i = 0; i < nElement; i++)
	{

		leafcell_idx = Elements[i].OctreeID;

		vtxIdxArray[leafcell_idx] = i;

		for (j = 0; j < 3; j++)
		{
			tempVert.Coords[j] = 0.f;
			tempVert.ParaPos[j] = 0.f;
		}

		for (j = 0; j < 8; j++)
		{

			for (k = 0; k < 3; k++)
			{
				tempVert.Coords[k] += Nodes[Elements[i].NodeIndex[j]].Coords[k];
				tempVert.ParaPos[k] += Nodes[Elements[i].NodeIndex[j]].ParaPos[k];
			}

		}

		for (j = 0; j < 3; j++)
		{
			tempVert.Coords[j] /= 8.0f;
			tempVert.ParaPos[j] /= 8.0f;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////
		//Preserve the feature

		CalculateCenterPoint(Elements[i], tempVert);

		/////////////////////////////////////////////////////////////////////////////////////////////////

		hexVerts.push_back(tempVert);

	}

	for (i = 0; i < nElement; i++)
	{

		leafcell_idx = Elements[i].OctreeID;
		level = GetLevel(leafcell_idx);

		OctreeidxToXYZ(leafcell_idx, x, y, z, level);

		xx = x; yy = y; zz = z;

		int transition_type;

		if (IsRegularNode(x, y, z, level) == 1)
		{

			AddOneHexRegular(x, y, z, level, num_hexa);
			num_hexa++;

		}
		else if (IsIrregularNode(x, y, z, level, eight_cells) == 1)
		{
			AddOneHexIrregular(x, y, z, level, num_hexa, eight_cells);
			num_hexa++;
		}
		else
		{

			for (int direction = 0; direction < 3; direction++)
			{

				switch (direction)
				{
				case 0:
					x = xx; y = yy; z = zz;
					break;
				case 1:
					z = xx; x = yy; y = zz;
					break;
				case 2:
					y = xx; z = yy; x = zz;
					break;
				}

				transition_type = IsTransitionNode(x, y, z, level, direction);

				if (transition_type != 0)
				{
					
					switch (transition_type)
					{

					case 1:

						AddThirteenHexTypeOneFirst(x, y, z, level, num_hexa, direction);
						num_hexa += 5;
						break;
					case 2:

						AddThirteenHexTypeOneSecond(x, y, z, level, num_hexa, direction);
						num_hexa += 5;
						break;
					case 3:

						AddThirteenHexTypeOneThird(x, y, z, level, num_hexa, direction);
						num_hexa += 5;
						break;
					case 4:

						AddThirteenHexTypeOneFourth(x, y, z, level, num_hexa, direction);
						num_hexa += 5;
						break;
					case 5:

						AddThirteenHexTypeOneFifth(x, y, z, level, num_hexa, direction);
						num_hexa += 5;
						break;
					case 6:

						AddThirteenHexTypeOneSixth(x, y, z, level, num_hexa, direction);
						num_hexa += 5;
						break;
					case 7:

						AddThirteenHexTypeOneSeventh(x, y, z, level, num_hexa, direction);
						num_hexa += 5;
						break;
					case 8:

						AddThirteenHexTypeOneEighth(x, y, z, level, num_hexa, direction);
						num_hexa += 5;
						break;

					case 11:

						AddFiveHexTypeOneFirst(x, y, z, level, num_hexa, direction);
						num_hexa += 1;
						break;
					case 12:

						AddFourHexTypeOneSecond(x, y, z, level, num_hexa, direction);
						num_hexa += 2;
						break;
					case 13:

						AddFourHexTypeOneThird(x, y, z, level, num_hexa, direction);
						num_hexa += 3;
						break;
					case 14:

						AddFiveHexTypeOneFourth(x, y, z, level, num_hexa, direction);
						num_hexa += 1;
						break;
					case 15:

						AddFiveHexTypeOneFifth(x, y, z, level, num_hexa, direction);
						num_hexa += 1;
						break;
					case 16:

						AddFourHexTypeOneSixth(x, y, z, level, num_hexa, direction);
						num_hexa += 2;
						break;
					case 17:

						AddFourHexTypeOneSeventh(x, y, z, level, num_hexa, direction);
						num_hexa += 3;
						break;
					case 18:

						AddFourHexTypeOneEighth(x, y, z, level, num_hexa, direction);
						num_hexa += 2;
						break;
					case 19:

						AddFourHexTypeOneNinth(x, y, z, level, num_hexa, direction);
						num_hexa += 3;
						break;

					case 110:

						AddFourHexTypeOneTenth(x, y, z, level, num_hexa, direction);
						num_hexa += 3;
						break;
					case 111:

						AddFiveHexTypeOneEleventh(x, y, z, level, num_hexa, direction);
						num_hexa += 1;
						break;
					case 112:

						AddFiveHexTypeOneTwelfth(x, y, z, level, num_hexa, direction);
						num_hexa += 1;
						break;
					case 113:

						AddFiveHexTypeOneThirteenth(x, y, z, level, num_hexa, direction);
						num_hexa += 1;
						break;
					case 114:

						AddFourHexTypeOneFourteenth(x, y, z, level, num_hexa, direction);
						num_hexa += 2;
						break;

					}

				}

			}

		}

	}

	///////////////////////////////////////////////////////////////////////////////////////////////////
	//output adaptive hex mesh
	numElems = num_hexa;

	adaptiveFinalHex.CreateNewMesh(HEXAHEDRON, numVerts, numElems);

	for (i = 0; i < numVerts; i++)
	{

		for (j = 0; j < 3; j++)
		{
			adaptiveFinalHex.vertex[i][j] = hexVerts[i].ParaPos[j];
		}

	}

	for (i = 0; i < numElems; i++)
	{

		for (j = 0; j < 8; j++)
		{
			adaptiveFinalHex.element[i][j] = hexIdx[i*8 + j];
		}

	}

	adaptiveFinalHex.Write("FinalPara_hex.inp");

	for (i = 0; i < numVerts; i++)
	{

		for (j = 0; j < 3; j++)
		{
			adaptiveFinalHex.vertex[i][j] = hexVerts[i].Coords[j];
		}

	}

	Pillowing();

	adaptiveFinalHex.Write(outputName);

	return true;

}

bool CVTBasedPolycube::CalculateCenterPoint(const Element currentElement, Node &tempNode)
{

	int i, j, k;
	int index;
	int numBoundNodes = 0;
	int count = 0;

	vector<int> boundNodes;

	for (i = 0; i < 8; i++)
	{

		index = currentElement.NodeIndex[i];

		if (Nodes[index].BoundaryFlag == true)
		{
			numBoundNodes++;
			boundNodes.push_back(index);
		}

	}


	if (numBoundNodes == 0)
	{
		return false;
	}
	else if (numBoundNodes == 1)
	{

		index = boundNodes[0];

		for (j = 0; j < 3; j++)
		{
			tempNode.Coords[j] = Nodes[index].Coords[j];
			tempNode.ParaPos[j] = Nodes[index].ParaPos[j];
		}

		if (Nodes[index].NeighborElement.size() != 7)
		{

			cout<<"Error in CalculateCenterPoint(const Element currentElement, Node &tempNode---numBoundNodes == 1)!!!"<<endl;

		}

		return true;

	}
	else if (numBoundNodes == 2)
	{

		vector<int> twoPoints;

		for (j = 0; j < numBoundNodes; j++)
		{
			twoPoints.push_back(boundNodes[j]);
		}

		for (j = 0; j < 3; j++)
		{
			tempNode.Coords[j] = 0.f;
			tempNode.ParaPos[j] = 0.f;
		}

		for (i = 0; i < twoPoints.size(); i++)
		{

			for (j = 0; j < 3; j++)
			{
				tempNode.Coords[j] += Nodes[twoPoints[i]].Coords[j];
				tempNode.ParaPos[j] += Nodes[twoPoints[i]].ParaPos[j];
			}

		}

		for (j = 0; j < 3; j++)
		{
			tempNode.Coords[j] /= 2.0f;
			tempNode.ParaPos[j] /= 2.0f;
		}

		return true;

	}
	else if (numBoundNodes == 3)
	{

		count = 0;

		for (i = 0; i < 3; i++)
		{
			index = boundNodes[i];

			if (Nodes[index].NeighborElement.size() == 5)
			{

				///////////////////////////////////////////////////////////////////////////////
				//For adaptive octree, the defination of NeighborElement is unusual, be carefull
				int iCount = 0;

				for (int l = 0; l < 5; l++)
				{
					int tempIndex = Nodes[index].NeighborElement[l];

					for (int m = 0; m < 8; m++)
					{
						if (Nodes[Elements[tempIndex].NodeIndex[m]].BoundaryFlag == true)
						{
							iCount++;
						}
					}
				}
				///////////////////////////////////////////////////////////////////////////////

				if (iCount == 21) //4 + 4 + 4 + 3 + 6
				{
					for (j = 0; j < 3; j++)
					{
						tempNode.Coords[j] = Nodes[index].Coords[j];
						tempNode.ParaPos[j] = Nodes[index].ParaPos[j];
					}

					count++;
				}
			}

		}

		if (count != 1)
		{
			cout<<"Error in CalculateCenterPoint(const Element currentElement, Node &tempNode---numBoundNodes == 3)!!!"<<endl;
		}

		return true;

	}
	else if (numBoundNodes == 4)
	{
		
		for (j = 0; j < 3; j++)
		{
			tempNode.Coords[j] = 0.f;
			tempNode.ParaPos[j] = 0.f;
		}

		for (i = 0; i < 4; i++)
		{

			for (j = 0; j < 3; j++)
			{
				tempNode.Coords[j] += Nodes[boundNodes[i]].Coords[j];
				tempNode.ParaPos[j] += Nodes[boundNodes[i]].ParaPos[j];
			}

		}

		for (j = 0; j < 3; j++)
		{
			tempNode.Coords[j] /= 4.0f;
			tempNode.ParaPos[j] /= 4.0f;
		}

		return true;
	}
	else if (numBoundNodes == 5)
	{

		count = 0;

		for (i = 0; i < 5; i++)
		{
			index = boundNodes[i];

			if (Nodes[index].NeighborElement.size() == 3)
			{
				///////////////////////////////////////////////////////////////////////////////
				//For adaptive octree, the defination of NeighborElement is unusual, be carefull
				int iCount = 0;

				for (int l = 0; l < 3; l++)
				{
					int tempIndex = Nodes[index].NeighborElement[l];

					for (int m = 0; m < 8; m++)
					{
						if (Nodes[Elements[tempIndex].NodeIndex[m]].BoundaryFlag == true)
						{
							iCount++;
						}
					}
				}
				///////////////////////////////////////////////////////////////////////////////

				if (iCount == 17) //6 + 5 + 6
				{
					for (j = 0; j < 3; j++)
					{
						tempNode.Coords[j] = Nodes[index].Coords[j];
						tempNode.ParaPos[j] = Nodes[index].ParaPos[j];
					}

					count++;
				}
				
			}

		}

		if (count != 1)
		{

		/*	for (i = 0; i < 5; i++)
			{
				cout<<boundNodes[i]<<",";
			}
			cout<<endl;*/

			cout<<"Error in CalculateCenterPoint(const Element currentElement, Node &tempNode---numBoundNodes == 5)!!!"<<endl;
		}

		return true;

	}
	else if (numBoundNodes == 6)
	{
		vector<int> twoPoints;
		vector<int> allBoundNodes;

		for (j = 0; j < 6; j++)
		{
			if(Nodes[currentElement.NodeIndex[PATCHNODES[j][0]]].BoundaryFlag &&
				Nodes[currentElement.NodeIndex[PATCHNODES[j][1]]].BoundaryFlag &&
				Nodes[currentElement.NodeIndex[PATCHNODES[j][2]]].BoundaryFlag &&
				Nodes[currentElement.NodeIndex[PATCHNODES[j][3]]].BoundaryFlag)
			{
				for (k = 0; k < 4; k++)
				{

					index = currentElement.NodeIndex[PATCHNODES[j][k]];
					allBoundNodes.push_back(index);

				}
			}			
		}

		for (j = 0; j < numBoundNodes; j++)
		{
			count = 0;
			index = boundNodes[j];

			for (k = 0; k < allBoundNodes.size(); k++)
			{

				if (index == allBoundNodes[k])
				{
					count++;
				}

			}

			if (count == 2)
			{
				twoPoints.push_back(index);
			}
		}

		for (j = 0; j < 3; j++)
		{
			tempNode.Coords[j] = 0.f;
			tempNode.ParaPos[j] = 0.f;
		}

		for (i = 0; i < twoPoints.size(); i++)
		{

			for (j = 0; j < 3; j++)
			{
				tempNode.Coords[j] += Nodes[twoPoints[i]].Coords[j];
				tempNode.ParaPos[j] += Nodes[twoPoints[i]].ParaPos[j];
			}

		}

		for (j = 0; j < 3; j++)
		{
			tempNode.Coords[j] /= 2.0f;
			tempNode.ParaPos[j] /= 2.0f;
		}


		if (twoPoints.size() != 2)
		{
			cout<<"Error in CalculateCenterPoint(const Element currentElement, Node &tempNode---twoPoints.size() != 2)!!!"<<endl;
		}

		return true;
	}
	else if (numBoundNodes == 7)
	{

		count = 0;

		for (i = 0; i < 7; i++)
		{
			index = boundNodes[i];

			if (Nodes[index].NeighborElement.size() == 1)
			{

				for (j = 0; j < 3; j++)
				{
					tempNode.Coords[j] = Nodes[index].Coords[j];
					tempNode.ParaPos[j] = Nodes[index].ParaPos[j];
				}

				count++;
			}
			
		}

		if (count != 1)
		{
			cout<<"Error in CalculateCenterPoint(const Element currentElement, Node &tempNode---count != 1)!!!"<<endl;
		}

		return true;
	}
	else
	{
		cout<<"Error in CalculateCenterPoint(const Element currentElement, Node &tempNode)!!!"<<endl;
		return false;
	}

}

int CVTBasedPolycube::IsRegularNode(int x, int y, int z, int level)
{

	if (IsLeafCell(x, y, z, level) == true
		&& IsLeafCell(x - 1, y, z, level) == true
		&& IsLeafCell(x - 1, y - 1, z, level) == true
		&& IsLeafCell(x, y - 1, z, level) == true
		&& IsLeafCell(x, y, z - 1, level) == true
		&& IsLeafCell(x - 1, y, z - 1, level) == true
		&& IsLeafCell(x - 1, y - 1, z - 1, level) == true
		&& IsLeafCell(x, y - 1, z - 1, level) == true
		)
	{
		return 1;
	}
	else
	{
		return 0;
	}

	
}

int CVTBasedPolycube::IsSharedByEightCells(int x, int y, int z, int level, vector<int> &vec_eight_cell)
{

	int xx, yy, zz;
	int cell_size;
	int number_cells = 0;
	//cell_size = voxelSize.x / (1 << level);
	cell_size = voxelSize / (1 << level);
	vec_eight_cell.clear();

	//Gain the global coordinates
	xx = x * cell_size;
	yy = y * cell_size;
	zz = z * cell_size;

	int f_leafcell_id;
	int f_level;
	int f_cell_size;
	int f_x, f_y, f_z;
	int f_xx, f_yy, f_zz;

	//for (int j = 0; j < leafNum; j++)
	for (int j = 0; j < nElement; j++)
	{
		//f_leafcell_id = cutArray[j];
		f_leafcell_id = Elements[j].OctreeID;
		f_level = GetLevel(f_leafcell_id);
		//f_cell_size = voxelSize.x / (1 << f_level);
		f_cell_size = voxelSize / (1 << f_level);
		OctreeidxToXYZ(f_leafcell_id, f_x, f_y, f_z, f_level);

		for (int k = 0; k < 8; k++)
		{
			switch (k)
			{
			case 0:
				f_xx = f_x * f_cell_size;
				f_yy = f_y * f_cell_size;
				f_zz = f_z * f_cell_size;
				break;
			case 1:
				f_xx = (f_x + 1) * f_cell_size;
				f_yy = f_y * f_cell_size;
				f_zz = f_z * f_cell_size;
				break;
			case 2:
				f_xx = (f_x + 1) * f_cell_size;
				f_yy = f_y * f_cell_size;
				f_zz = (f_z + 1) * f_cell_size;
				break;
			case 3:
				f_xx = f_x * f_cell_size;
				f_yy = f_y * f_cell_size;
				f_zz = (f_z + 1) * f_cell_size;
				break;
			case 4:
				f_xx = f_x * f_cell_size;
				f_yy = (f_y + 1) * f_cell_size;
				f_zz = f_z * f_cell_size;
				break;
			case 5:
				f_xx = (f_x + 1) * f_cell_size;
				f_yy = (f_y + 1) * f_cell_size;
				f_zz = f_z * f_cell_size;
				break;
			case 6:
				f_xx = (f_x + 1) * f_cell_size;
				f_yy = (f_y + 1) * f_cell_size;
				f_zz = (f_z + 1) * f_cell_size;
				break;
			case 7:
				f_xx = f_x * f_cell_size;
				f_yy = (f_y + 1) * f_cell_size;
				f_zz = (f_z + 1) * f_cell_size;
				break;
			}

			if (f_xx == xx && f_yy == yy && f_zz == zz)
			{
				vec_eight_cell.push_back(f_leafcell_id);
				number_cells++;
			}

		}

	}

	return number_cells;

}

int CVTBasedPolycube::IsIrregularNode(int x, int y, int z, int level, vector<int> &eight_cells)
{

	int f_level[8];
	int f_octree_id;

	if (IsSharedByEightCells(x, y, z, level, eight_cells) == 8
		&& IsRegularNode(x, y, z, level) == 0)
	{
		for (int i = 0; i < 8; i++)
		{
			f_octree_id = eight_cells[i];
			f_level[i] = GetLevel(f_octree_id);
		}

		if (level >= f_level[0] && level >= f_level[1] 
		&& level >= f_level[2] && level >= f_level[3]
		&& level >= f_level[4] && level >= f_level[5] 
		&& level >= f_level[6] && level >= f_level[7]
		)
		{
			if (x / 4 != (x - 1) / 4
				&& y / 4 != (y - 1) / 4
				&& z / 4 != (z - 1) / 4)
			{
				return 1;
			}
			else
				return 0;
		}
		else
		{
			if (x / 2 != (x - 1) / 2
				&& y / 2 != (y - 1) / 2
				&& z / 2 != (z - 1) / 2)
			{
				return 1;
			}
			else
				return 0;
		}
	}
	else
		return 0;

}


bool CVTBasedPolycube::IsLeafCell(int x, int y, int z, int level, int direction /* = 0 */)
{

	int octree_id;
	octree_id = XYZToOctreeidx(x, y, z, level, direction);

	//for (int i = 0; i < leafNum; i++)
	//{
	//	if (octree_id == cutArray[i])
	//	{
	//		return true;
	//	}
	//}

	for (int i = 0; i < nElement; i++)
	{
		if (octree_id == Elements[i].OctreeID)
		{
			return true;
		}
	}

	return false;

}


void CVTBasedPolycube::AddOneHexRegular(int x, int y, int z, int level, int num_hexa)
{

	int related_cell[8];

	related_cell[0] = XYZToOctreeidx(x - 1, y - 1, z - 1, level);
	related_cell[1] = XYZToOctreeidx(x, y - 1, z - 1, level);
	related_cell[2] = XYZToOctreeidx(x - 1, y, z - 1, level);
	related_cell[3] = XYZToOctreeidx(x, y, z - 1, level);
	related_cell[4] = XYZToOctreeidx(x - 1, y - 1, z, level);
	related_cell[5] = XYZToOctreeidx(x, y - 1, z, level);
	related_cell[6] = XYZToOctreeidx(x - 1, y, z, level);
	related_cell[7] = XYZToOctreeidx(x, y, z, level);

	double node_coodinate[3];

	//first hex mesh

	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[1]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[2]]);
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[5]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);

	num_hexa++;

}

void CVTBasedPolycube::AddOneHexIrregular(int x, int y, int z, int level, int num_hexa, vector<int> &eight_cells)
{

	double node_coodinate[3];
	int f_eight_cells[8];
	int xx, yy, zz;//global coordinates
	int cell_size;

	int f_octree_id;
	int f_x, f_y, f_z;
	int f_xx, f_yy, f_zz;
	int f_level;
	int f_cell_size;

	//cell_size = voxelSize.x / (1 << level);
	cell_size = voxelSize / (1 << level);
	xx = x * cell_size;
	yy = y * cell_size;
	zz = z * cell_size;

	for (int i = 0; i < 8; i++)
	{
		f_octree_id = eight_cells[i];
		f_level = GetLevel(f_octree_id);
		//f_cell_size = voxelSize.x / (1 << f_level);
		f_cell_size = voxelSize / (1 << f_level);
		OctreeidxToXYZ(f_octree_id, f_x, f_y, f_z, f_level);
		f_xx = f_x * f_cell_size;
		f_yy = f_y * f_cell_size;
		f_zz = f_z * f_cell_size;

		if (f_xx - xx < 0 && f_yy - yy < 0 && f_zz - zz < 0)
		{
			f_eight_cells[0] = f_octree_id;
		}
		else if (f_xx - xx == 0 && f_yy - yy < 0 && f_zz - zz < 0)
		{
			f_eight_cells[1] = f_octree_id; 
		}
		else if (f_xx - xx == 0 && f_yy - yy == 0 && f_zz - zz < 0)
		{
			f_eight_cells[2] = f_octree_id;
		}
		else if (f_xx - xx < 0 && f_yy - yy == 0 && f_zz - zz < 0)
		{
			f_eight_cells[3] = f_octree_id;
		}
		else if (f_xx - xx < 0 && f_yy - yy < 0 && f_zz - zz == 0)
		{
			f_eight_cells[4] = f_octree_id;
		}
		else if (f_xx - xx == 0 && f_yy - yy < 0 && f_zz - zz == 0)
		{
			f_eight_cells[5] = f_octree_id;
		}
		else if (f_xx - xx == 0 && f_yy - yy == 0 && f_zz - zz == 0)
		{
			f_eight_cells[6] = f_octree_id;
		}
		else
		{
			f_eight_cells[7] = f_octree_id;
		}

	}

	for (int i = 0; i < 8; i++)
	{
		//hexIdx[num_hexa].push_back(num_hexa * 8 + i);
		hexIdx.push_back(vtxIdxArray[f_eight_cells[i]]);
	}

}

int CVTBasedPolycube::IsTransitionNode(int x, int y, int z, int level, int direction /* = 0 */)
{

	int xx, yy, zz;
	int cell_size;
	//cell_size = voxelSize.x / (1 << level);
	cell_size = voxelSize / (1 << level);

	xx = x;
	yy = y;
	zz = z;

	if (IsLeafCell(xx, yy, zz, level, direction) == true 
		&& IsLeafCell(xx - 1, yy, zz, level, direction) == true 
		&& IsLeafCell(xx - 1, yy - 1, zz, level, direction) == true 
		&& IsLeafCell(xx, yy - 1, zz, level, direction) == true

		&& IsLeafCell(xx, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx - 1, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz - 1, level, direction) == false
		&& IsLeafCell(xx, yy - 1, zz - 1, level, direction) == false

		&& IsLeafCell(xx * 2, yy * 2, zz * 2 - 1, level + 1, direction) == true
		&& IsLeafCell(xx * 2 - 1, yy * 2, zz * 2 - 1, level + 1, direction) == true
		&& IsLeafCell(xx * 2 - 1, yy * 2 - 1, zz * 2 - 1, level + 1, direction) == true
		&& IsLeafCell(xx * 2, yy * 2 - 1, zz * 2 - 1, level + 1, direction) == true

		&& ((xx * 2 + 1) / 4 == (xx * 2 - 2) / 4)
		&& ((yy * 2 + 1) / 4 == (yy * 2 - 2) / 4)//good way to represent it
		)
	{
		//changed for new algorithm
		//if (IsLeafCell((xx + 1) * 2, yy * 2, zz * 2, level + 1, direction) == false
		//	&& IsLeafCell((xx - 2) * 2, yy * 2, zz * 2, level + 1, direction) == false
		//	)
		if (IsLeafCell((xx + 1) * 2, yy * 2, zz * 2 - 1, level + 1, direction) == true
			&& IsLeafCell((xx - 2) * 2, yy * 2, zz * 2 - 1, level + 1, direction) == true
			)
		{		
			return 1;
		}

		//else if (IsLeafCell((xx + 1) * 2, yy * 2, zz * 2, level + 1, direction) == true
		//	&& IsLeafCell((xx - 2) * 2, yy * 2, zz * 2, level + 1, direction) == false)
		else if (IsLeafCell((xx + 1) * 2, yy * 2, zz * 2 - 1, level + 1, direction) == false
			&& IsLeafCell((xx - 2) * 2, yy * 2, zz * 2 - 1, level + 1, direction) == true)
		{
			return 2;
		}

		//else if (IsLeafCell((xx + 1) * 2, yy * 2, zz * 2, level + 1, direction) == false
		//	&& IsLeafCell((xx - 2) * 2, yy * 2, zz * 2, level + 1, direction) == true)
		else if (IsLeafCell((xx + 1) * 2, yy * 2, zz * 2 - 1, level + 1, direction) == true
			&& IsLeafCell((xx - 2) * 2, yy * 2, zz * 2 - 1, level + 1, direction) == false)
		{
			return 3;
		}

		else
			return 4;

	}

	else if (IsLeafCell(xx, yy, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy - 1, zz, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz, level, direction) == true
		//be careful
		&& IsLeafCell(xx, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx - 1, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz - 1, level, direction) == false
		&& IsLeafCell(xx, yy - 1, zz - 1, level, direction) == false

		&& IsLeafCell(xx / 2, yy / 2, zz / 2 - 1, level - 1, direction) == true
		&& IsLeafCell(xx / 2 - 1, yy / 2, zz / 2 - 1, level - 1, direction) == true
		&& IsLeafCell(xx / 2 - 1, yy / 2 - 1, zz / 2 - 1, level - 1, direction) == true
		&& IsLeafCell(xx / 2, yy / 2 - 1, zz / 2 - 1, level - 1, direction) == true

		&& ((xx + 1) / 4 == (xx - 2) / 4)
		&& ((yy + 1) / 4 == (yy - 2) / 4)

		)
	{
		//change for the new algorithm
		//if (IsLeafCell(xx / 2 + 1, yy / 2, zz / 2 - 1, level - 1, direction) == true
		//	&& IsLeafCell(xx / 2 - 2, yy / 2, zz / 2 - 1, level - 1, direction) == true
		//	)
		if (IsLeafCell(xx / 2 + 1, yy / 2, zz / 2, level - 1, direction) == false
			&& IsLeafCell(xx / 2 - 2, yy / 2, zz / 2, level - 1, direction) == false
			)
		{
			return 5;
		}

		//else if (IsLeafCell(xx / 2 + 1, yy / 2, zz / 2 - 1, level - 1, direction) == false
		//	&& IsLeafCell(xx / 2 - 2, yy / 2, zz / 2 - 1, level - 1, direction) == true
		//	)
		else if (IsLeafCell(xx / 2 + 1, yy / 2, zz / 2, level - 1, direction) == true
			&& IsLeafCell(xx / 2 - 2, yy / 2, zz / 2, level - 1, direction) == false
			)
		{
			return 6;
		}

		//else if (IsLeafCell(xx / 2 + 1, yy / 2, zz / 2 - 1, level - 1, direction) == true
		//	&& IsLeafCell(xx / 2 - 2, yy / 2, zz / 2 - 1, level - 1, direction) == false
		//	)
		else if (IsLeafCell(xx / 2 + 1, yy / 2, zz / 2, level - 1, direction) == false
			&& IsLeafCell(xx / 2 - 2, yy / 2, zz / 2, level - 1, direction) == true
			)
		{
			return 7;
		}

		else
			return 8;

	}

	else if (IsLeafCell(xx, yy, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy - 1, zz, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz, level, direction) == true
		&& IsLeafCell(xx, yy, zz - 1, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz - 1, level, direction) == true

		&& IsLeafCell(xx - 1, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz - 1, level, direction) == false
		&& IsLeafCell(xx * 2 - 1, yy * 2, zz * 2 - 1, level + 1, direction) == true
		&& IsLeafCell(xx * 2 - 1, yy * 2 - 1, zz * 2 - 1, level + 1, direction) == true

		&& ((yy * 2 + 1) / 4 == (yy * 2 - 2) / 4)
		)
	{
		return 11;
	}


	else if (IsLeafCell(xx, yy, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy - 1, zz, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz, level, direction) == true

		&& IsLeafCell(xx, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx, yy - 1, zz - 1, level, direction) == false
		&& IsLeafCell(xx - 1, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz - 1, level, direction) == false

		&& IsLeafCell(xx * 2 - 1, yy * 2, zz * 2 - 1, level + 1, direction) == true
		&& IsLeafCell(xx * 2 - 1, yy * 2 - 1, zz * 2 - 1, level + 1, direction) == true
		&& IsLeafCell(xx * 2, yy * 2, zz * 2 - 1, level + 1, direction) == true
		&& IsLeafCell(xx * 2, yy * 2 - 1, zz * 2 - 1, level + 1, direction) == true

		&& ((yy * 2 + 1) / 4 == (yy * 2 - 2) / 4)
		&& ((xx * 2 + 1) / 4 != (xx * 2 - 2) / 4)
		)
	{
		return 12;
	}

	else if (IsLeafCell(xx, yy, zz, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz, level, direction) == true
		&& IsLeafCell(xx, yy, zz - 1, level, direction) == true
		&& IsLeafCell(xx - 1, yy, zz - 1, level, direction) == true
		&& IsLeafCell(xx - 1, yy - 1, zz - 1, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz - 1,level, direction) == true

		&& IsLeafCell(xx - 1, yy, zz, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz, level, direction) == false

		&& IsLeafCell(xx / 2 - 1, yy / 2, zz / 2, level - 1, direction) == true
		&& IsLeafCell(xx / 2 - 1, yy / 2 - 1, zz / 2, level - 1, direction) == true

		&& ((yy + 1) / 4 == (yy - 2) / 4)
		&& ((xx + 1) / 4 != (xx - 2) / 4)
		)
	{
		return 13;
	}

	else if (IsLeafCell(xx, yy, zz, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy, zz - 1, level, direction) == true
		&& IsLeafCell(xx - 1, yy - 1, zz - 1, level, direction) == true

		&& IsLeafCell(xx - 1, yy, zz, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz, level, direction) == false
		&& IsLeafCell(xx, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx, yy - 1, zz - 1, level, direction) == false

		&& IsLeafCell(xx / 2 - 1, yy / 2, zz / 2, level - 1, direction) == true
		&& IsLeafCell(xx / 2 - 1, yy / 2 - 1, zz / 2, level - 1, direction) == true
		&& IsLeafCell(xx / 2, yy / 2, zz / 2 - 1, level - 1, direction) == true
		&& IsLeafCell(xx / 2, yy / 2 - 1, zz / 2 - 1, level - 1, direction) == true

		&& ((yy + 1) / 4 == (yy - 2) / 4)
		&& ((xx + 1) / 4 != (xx - 2) / 4)
		)
	{
		return 14;
	}

	else if (IsLeafCell(xx, yy, zz, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz, level, direction) == true
		&& IsLeafCell(xx, yy, zz - 1, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz - 1, level, direction) == true
		&& IsLeafCell(xx - 1, yy, zz - 1, level, direction) == true
		&& IsLeafCell(xx - 1, yy - 1, zz - 1, level, direction) == true

		&& IsLeafCell(xx - 1, yy, zz, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz, level, direction) == false
		&& IsLeafCell(xx * 2 - 1, yy * 2, zz * 2, level + 1, direction) == true
		&& IsLeafCell(xx * 2 - 1, yy * 2 - 1, zz * 2, level + 1, direction) == true

		&& ((yy * 2 + 1) / 4 == (yy * 2 - 2) / 4)
		&& ((xx * 2 + 1) / 4 != (xx * 2 - 2) / 4) 
		)
	{
		return 15;
	}

	else if (IsLeafCell(xx, yy, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy - 1, zz, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz, level, direction) == true

		&& IsLeafCell(xx, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx - 1, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz - 1, level, direction) == false
		&& IsLeafCell(xx, yy - 1, zz - 1, level, direction) == false
		&& IsLeafCell(xx / 2, yy / 2, zz / 2 - 1, level - 1, direction) == true
		&& IsLeafCell(xx / 2 - 1, yy / 2, zz / 2 - 1, level - 1, direction) == true
		&& IsLeafCell(xx / 2 - 1, yy / 2 - 1, zz / 2 - 1, level - 1, direction) == true
		&& IsLeafCell(xx / 2, yy / 2 - 1, zz / 2 - 1, level - 1, direction) == true

		&& ((yy + 1) / 4 == (yy - 2) / 4)
		&& ((xx + 0) / 4 != (xx - 1) / 4)
		)
	{
		return 16;
	}

	else if (IsLeafCell(xx, yy, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy - 1, zz, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz, level, direction) == true
		&& IsLeafCell(xx, yy, zz - 1, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz - 1, level, direction) == true

		&& IsLeafCell(xx - 1, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz - 1, level, direction) == false
		&& IsLeafCell(xx / 2 - 1, yy / 2, zz / 2 - 1, level - 1, direction) == true
		&& IsLeafCell(xx / 2 - 1, yy / 2 - 1, zz / 2 - 1, level - 1, direction) == true

		&& ((yy + 1) / 4 == (yy - 2) / 4)
		&& ((xx + 0) / 4 != (xx - 1) / 4)
		)
	{
		return 17;
	}

	else if (IsLeafCell(xx, yy, zz, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz, level, direction) == true
		&& IsLeafCell(xx, yy, zz - 1, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz - 1, level, direction) == true

		&& IsLeafCell(xx - 1, yy, zz, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz, level, direction) == false
		&& IsLeafCell(xx - 1, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz - 1, level, direction) == false
		&& IsLeafCell(xx * 2 - 1, yy * 2, zz * 2, level + 1, direction) == true
		&& IsLeafCell(xx * 2 - 1, yy * 2 - 1, zz * 2, level + 1, direction) == true
		&& IsLeafCell(xx * 2 - 1, yy * 2, zz * 2 - 1, level + 1, direction) == true
		&& IsLeafCell(xx * 2 - 1, yy * 2 - 1, zz * 2 - 1, level + 1, direction) == true

		&& ((yy * 2 + 1) / 4 == (yy * 2 - 2) / 4)
		&& ((xx * 2 + 0) / 4 != (xx * 2 - 1) / 4)
		&& ((zz * 2 + 0) / 4 != (zz * 2 - 1) / 4)
		)
	{
		return 18;
	}

	else if (IsLeafCell(xx, yy, zz, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz, level, direction) == true

		&& IsLeafCell(xx - 1, yy, zz, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz, level, direction) == false
		&& IsLeafCell(xx, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx - 1, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz - 1, level, direction) == false
		&& IsLeafCell(xx, yy - 1, zz - 1, level, direction) == false
		&& IsLeafCell(xx * 2 - 1, yy * 2, zz * 2, level + 1, direction) == true
		&& IsLeafCell(xx * 2 - 1, yy * 2 - 1, zz * 2, level + 1, direction) == true
		&& IsLeafCell(xx * 2, yy * 2, zz * 2 - 1, level + 1, direction) == true
		&& IsLeafCell(xx * 2 - 1, yy * 2, zz * 2 - 1, level + 1, direction) == true
		&& IsLeafCell(xx * 2 - 1, yy * 2 - 1, zz * 2 - 1, level + 1, direction) == true
		&& IsLeafCell(xx * 2, yy * 2 - 1, zz * 2 - 1, level + 1, direction) == true

		&& ((yy * 2 + 1) / 4 == (yy * 2 - 2) / 4)
		&& ((xx * 2 + 0) / 4 != (xx * 2 - 1) / 4)
		)
	{
		return 19;
	}

	else if (IsLeafCell(xx, yy, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy - 1, zz, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy, zz - 1, level, direction) == true
		&& IsLeafCell(xx - 1, yy - 1, zz - 1, level, direction) == true

		&& IsLeafCell(xx, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx, yy - 1, zz - 1, level, direction) == false
		&& IsLeafCell(xx / 2, yy / 2, zz / 2 - 1, level - 1, direction) == true
		&& IsLeafCell(xx / 2, yy / 2 - 1, zz / 2 - 1, level - 1, direction) == true

		&& ((yy + 1) / 4 == (yy - 2) / 4)
		&& ((xx + 0) / 4 != (xx - 1) / 4)
		)
	{
		return 110;
	}

	else if (IsLeafCell(xx, yy, zz, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy, zz - 1, level, direction) == true
		&& IsLeafCell(xx - 1, yy - 1, zz - 1, level, direction) == true

		&& IsLeafCell(xx - 1, yy, zz, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz, level, direction) == false
		&& IsLeafCell(xx, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx, yy - 1, zz - 1, level, direction) == false
		&& IsLeafCell(xx * 2 - 1, yy * 2, zz * 2, level + 1, direction) == true
		&& IsLeafCell(xx * 2 - 1, yy * 2 - 1, zz * 2, level + 1, direction) == true
		&& IsLeafCell(xx * 2, yy * 2, zz * 2 - 1, level + 1, direction) == true
		&& IsLeafCell(xx * 2, yy * 2 - 1, zz * 2 - 1, level + 1, direction) == true

		&& ((yy * 2 + 1) / 4 == (yy * 2 - 2) / 4)
		&& ((xx * 2 + 0) / 4 != (xx * 2 - 1) / 4)
		)
	{
		return 111;
	}

	else if (IsLeafCell(xx, yy, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy - 1, zz, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy, zz - 1, level, direction) == true
		&& IsLeafCell(xx - 1, yy - 1, zz - 1, level, direction) == true

		&& IsLeafCell(xx, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx, yy - 1, zz - 1, level, direction) == false
		&& IsLeafCell(xx * 2, yy * 2, zz * 2 - 1, level + 1, direction) == true
		&& IsLeafCell(xx * 2, yy * 2 - 1, zz * 2 - 1, level + 1, direction) == true

		&& ((yy * 2 + 1) / 4 == (yy * 2 - 2) / 4)
		&& ((xx * 2 + 0) / 4 != (xx * 2 - 1) / 4)
		)
	{
		return 112;
	}

	else if (IsLeafCell(xx, yy, zz, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz, level, direction) == true

		&& IsLeafCell(xx - 1, yy, zz, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz, level, direction) == false
		&& IsLeafCell(xx, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx - 1, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz - 1, level, direction) == false
		&& IsLeafCell(xx, yy - 1, zz - 1, level, direction) == false
		&& IsLeafCell(xx / 2 - 1, yy / 2, zz / 2, level - 1, direction) == true
		&& IsLeafCell(xx / 2 - 1, yy / 2 - 1, zz / 2, level - 1, direction) == true
		&& IsLeafCell(xx / 2, yy / 2, zz / 2 - 1, level - 1, direction) == true
		&& IsLeafCell(xx / 2 - 1, yy / 2, zz / 2 - 1, level - 1, direction) == true
		&& IsLeafCell(xx / 2 - 1, yy / 2 - 1, zz / 2 - 1, level - 1, direction) == true
		&& IsLeafCell(xx / 2, yy / 2 - 1, zz / 2 - 1, level - 1, direction) == true

		&& ((yy + 1) / 4 == (yy - 2) / 4)
		&& ((xx + 0) / 4 != (xx - 1) / 4)
		)
	{
		return 113;
	}

	else if (IsLeafCell(xx, yy, zz, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz, level, direction) == true
		&& IsLeafCell(xx, yy, zz - 1, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz - 1, level, direction) == true

		&& IsLeafCell(xx - 1, yy, zz, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz, level, direction) == false
		&& IsLeafCell(xx - 1, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz - 1, level, direction) == false
		&& IsLeafCell(xx / 2 - 1, yy / 2, zz / 2, level - 1, direction) == true
		&& IsLeafCell(xx / 2 - 1, yy / 2 - 1, zz / 2, level - 1, direction) == true
		&& IsLeafCell(xx / 2 - 1, yy / 2, zz / 2 - 1, level - 1, direction) == true
		&& IsLeafCell(xx / 2 - 1, yy / 2 - 1, zz / 2 - 1, level - 1, direction) == true

		&& ((yy + 1) / 4 == (yy - 2) / 4)
		&& ((xx + 0) / 4 != (xx - 1) / 4)
		&& ((zz + 0) / 4 != (zz - 1) / 4)//be careful, this is necessary
		)
	{
		return 114;
	}

	else
		return 0;

}

void CVTBasedPolycube::TwentyOneVertices(int octree_id, double *vertex_cood, int i, int direction /* = 0 */)
{

	int xx, yy, zz;
	int x, y, z;
	int level;
	int cell_size;

	level = GetLevel(octree_id);
	//cell_size = voxelSize.x / (1 << level);
	cell_size = voxelSize / (1 << level);
	OctreeidxToXYZ(octree_id, xx, yy, zz, level);

	x = xx; y = yy; z = zz;

	switch (direction)
	{
	case 0:
		//x = xx;	y = yy;	z = zz;
		switch (i)
		{
		case 0:
			//vertex_cood[0] = origCood[0] + (x + 1.0f) * cell_size * cellSize;
			//vertex_cood[1] = origCood[1] + (y + 20 / 21.0f) * cell_size * cellSize;
			//vertex_cood[2] = origCood[2] + (z + 85 / 168.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			break;
		case 1:
			vertex_cood[0] = origCood[0] + (x + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 4 / 7.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 23 / 168.0f) * cell_size * cellSize;
			break;
		case 2:
			vertex_cood[0] = origCood[0] + (x + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 4 / 7.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 23 / 168.0f) * cell_size * cellSize;
			break;
		case 3:
			//vertex_cood[0] = origCood[0] + (x + 0.0f) * cell_size * cellSize;
			//vertex_cood[1] = origCood[1] + (y + 20 / 21.0f) * cell_size * cellSize;
			//vertex_cood[2] = origCood[2] + (z + 85 / 168.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			break;
		case 4:
			vertex_cood[0] = origCood[0] + (x + 1.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 19 / 28.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 51 / 224.0f) * cell_size * cellSize;
			break;
		case 5:
			vertex_cood[0] = origCood[0] + (x + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 4 / 7.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 2 / 21.0f) * cell_size * cellSize;
			break;
		case 6:
			vertex_cood[0] = origCood[0] + (x + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 4 / 7.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 2 / 21.0f) * cell_size * cellSize;
			break;
		case 7:
			vertex_cood[0] = origCood[0] + (x + 0.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 19 / 28.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 51 / 224.0f) * cell_size * cellSize;
			break;
		case 8:
			vertex_cood[0] = origCood[0] + (x + 1.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 9 / 28.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 51 / 224.0f) * cell_size * cellSize;
			break;
		case 9:
			vertex_cood[0] = origCood[0] + (x + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 3 / 7.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 2 / 21.0f) * cell_size * cellSize;
			break;
		case 10:
			vertex_cood[0] = origCood[0] + (x + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 3 / 7.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 2 / 21.0f) * cell_size * cellSize;
			break;
		case 11:
			vertex_cood[0] = origCood[0] + (x + 0.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 9 / 28.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 51 / 224.0f) * cell_size * cellSize;
			break;
		case 12:
			//vertex_cood[0] = origCood[0] + (x + 1.0f) * cell_size * cellSize;
			//vertex_cood[1] = origCood[1] + (y + 1 / 21.0f) * cell_size * cellSize;
			//vertex_cood[2] = origCood[2] + (z + 85 / 168.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			break;
		case 13:
			vertex_cood[0] = origCood[0] + (x + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 3 / 7.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 23 / 168.0f) * cell_size * cellSize;
			break;
		case 14:
			vertex_cood[0] = origCood[0] + (x + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 3 / 7.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 23 / 168.0f) * cell_size * cellSize;
			break;
		case 15:
			//vertex_cood[0] = origCood[0] + (x + 0.0f) * cell_size * cellSize;
			//vertex_cood[1] = origCood[1] + (y + 1 / 21.0f) * cell_size * cellSize;
			//vertex_cood[2] = origCood[2] + (z + 85 / 168.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			break;

		case 100:
			//vertex_cood[0] = origCood[0] + (x + 1.0f) * cell_size * cellSize;
			//vertex_cood[1] = origCood[1] + (y + 20 / 21.0f) * cell_size * cellSize;
			//vertex_cood[2] = origCood[2] + (z + 1.0f - 85 / 168.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			break;
		case 101:
			vertex_cood[0] = origCood[0] + (x + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 4 / 7.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1.0f - 23 / 168.0f) * cell_size * cellSize;
			break;
		case 102:
			vertex_cood[0] = origCood[0] + (x + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 4 / 7.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1.0f - 23 / 168.0f) * cell_size * cellSize;
			break;
		case 103:
			//vertex_cood[0] = origCood[0] + (x + 0.0f) * cell_size * cellSize;
			//vertex_cood[1] = origCood[1] + (y + 20 / 21.0f) * cell_size * cellSize;
			//vertex_cood[2] = origCood[2] + (z + 1.0f - 85 / 168.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			break;
		case 104:
			vertex_cood[0] = origCood[0] + (x + 1.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 19 / 28.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1.0f - 51 / 224.0f) * cell_size * cellSize;
			break;
		case 105:
			vertex_cood[0] = origCood[0] + (x + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 4 / 7.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1.0f - 2 / 21.0f) * cell_size * cellSize;
			break;
		case 106:
			vertex_cood[0] = origCood[0] + (x + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 4 / 7.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1.0f - 2 / 21.0f) * cell_size * cellSize;
			break;
		case 107:
			vertex_cood[0] = origCood[0] + (x + 0.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 19 / 28.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1.0f - 51 / 224.0f) * cell_size * cellSize;
			break;
		case 108:
			vertex_cood[0] = origCood[0] + (x + 1.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 9 / 28.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1.0f - 51 / 224.0f) * cell_size * cellSize;
			break;
		case 109:
			vertex_cood[0] = origCood[0] + (x + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 3 / 7.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1.0f - 2 / 21.0f) * cell_size * cellSize;
			break;
		case 110:
			vertex_cood[0] = origCood[0] + (x + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 3 / 7.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1.0f - 2 / 21.0f) * cell_size * cellSize;
			break;
		case 111:
			vertex_cood[0] = origCood[0] + (x + 0.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 9 / 28.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1.0f - 51 / 224.0f) * cell_size * cellSize;
			break;
		case 112:
			//vertex_cood[0] = origCood[0] + (x + 1.0f) * cell_size * cellSize;
			//vertex_cood[1] = origCood[1] + (y + 1 / 21.0f) * cell_size * cellSize;
			//vertex_cood[2] = origCood[2] + (z + 1.0f - 85 / 168.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			break;
		case 113:
			vertex_cood[0] = origCood[0] + (x + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 3 / 7.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1.0f - 23 / 168.0f) * cell_size * cellSize;
			break;
		case 114:
			vertex_cood[0] = origCood[0] + (x + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 3 / 7.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1.0f - 23 / 168.0f) * cell_size * cellSize;
			break;
		case 115:
			//vertex_cood[0] = origCood[0] + (x + 0.0f) * cell_size * cellSize;
			//vertex_cood[1] = origCood[1] + (y + 1 / 21.0f) * cell_size * cellSize;
			//vertex_cood[2] = origCood[2] + (z + 1.0f - 85 / 168.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			break;

		case 1004:
			vertex_cood[0] = origCood[0] + (x + 1.0f +  4063 / 12740.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 38 / 49.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 2661 / 12740.0f) * cell_size * cellSize;
			break;
		case 1007:
			vertex_cood[0] = origCood[0] + (x - 4063 / 12740.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 38 / 49.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 2661 / 12740.0f) * cell_size * cellSize;
			break;
		case 1008:
			vertex_cood[0] = origCood[0] + (x + 1.0f + 4063 / 12740.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 11 / 49.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 2661 / 12740.0f) * cell_size * cellSize;
			break;
		case 1011:
			vertex_cood[0] = origCood[0] + (x - 4063 / 12740.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 11 / 49.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 2661 / 12740.0f) * cell_size * cellSize;
			break;
		case 1104:
			vertex_cood[0] = origCood[0] + (x + 1.0f +  4063 / 12740.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 38 / 49.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1.0f - 2661 / 12740.0f) * cell_size * cellSize;
			break;
		case 1107:
			vertex_cood[0] = origCood[0] + (x - 4063 / 12740.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 38 / 49.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1.0f - 2661 / 12740.0f) * cell_size * cellSize;
			break;
		case 1108:
			vertex_cood[0] = origCood[0] + (x + 1.0f + 4063 / 12740.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 11 / 49.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1.0f - 2661 / 12740.0f) * cell_size * cellSize;
			break;
		case 1111:
			vertex_cood[0] = origCood[0] + (x - 4063 / 12740.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 11 / 49.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1.0f - 2661 / 12740.0f) * cell_size * cellSize;
			break;

		case 10000:
			/*vertex_cood[0] = origCood[0] + (x + 7 / 12.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 7 / 12.0f) * cell_size * cellSize;*/
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			break;
		case 10001:
			vertex_cood[0] = origCood[0] + (x + 4 / 9.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 4 / 9.0f) * cell_size * cellSize;
			break;
		case 10002:
			vertex_cood[0] = origCood[0] + (x + 4 / 9.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 4 / 9.0f) * cell_size * cellSize;
			break;
		case 10003:
			/*vertex_cood[0] = origCood[0] + (x + 7 / 12.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 7 / 12.0f) * cell_size * cellSize;*/
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			break;
		case 10004:
			/*vertex_cood[0] = origCood[0] + (x + 1.0f - 7 / 12.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 7 / 12.0f) * cell_size * cellSize;*/
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			break;
		case 10005:
			vertex_cood[0] = origCood[0] + (x + 1.0f - 4 / 9.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 4 / 9.0f) * cell_size * cellSize;
			break;
		case 10006:
			vertex_cood[0] = origCood[0] + (x + 1.0f - 4 / 9.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 4 / 9.0f) * cell_size * cellSize;
			break;
		case 10007:
			/*vertex_cood[0] = origCood[0] + (x + 1.0f - 7 / 12.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 7 / 12.0f) * cell_size * cellSize;*/
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			break;
		case 10008:
			/*vertex_cood[0] = origCood[0] + (x + 7 / 12.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1.0f - 7 / 12.0f) * cell_size * cellSize;*/
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			break;
		case 10009:
			vertex_cood[0] = origCood[0] + (x + 4 / 9.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1.0f - 4 / 9.0f) * cell_size * cellSize;
			break;
		case 10010:
			vertex_cood[0] = origCood[0] + (x + 4 / 9.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1.0f - 4 / 9.0f) * cell_size * cellSize;
			break;
		case 10011:
			/*vertex_cood[0] = origCood[0] + (x + 7 / 12.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1.0f - 7 / 12.0f) * cell_size * cellSize;*/
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			break;
		case 10012:
			/*vertex_cood[0] = origCood[0] + (x + 1.0f - 7 / 12.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1.0f - 7 / 12.0f) * cell_size * cellSize;*/
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			break;
		case 10013:
			vertex_cood[0] = origCood[0] + (x + 1.0f - 4 / 9.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1.0f - 4 / 9.0f) * cell_size * cellSize;
			break;
		case 10014:
			vertex_cood[0] = origCood[0] + (x + 1.0f - 4 / 9.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1.0f - 4 / 9.0f) * cell_size * cellSize;
			break;
		case 10015:
			/*vertex_cood[0] = origCood[0] + (x + 1.0f - 7 / 12.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1.0f - 7 / 12.0f) * cell_size * cellSize;*/
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			break;

		}
		break;

	case 1:
		//x = zz;	y = xx;	z = yy;
		switch (i)
		{
		case 0:
			//vertex_cood[1] = origCood[1] + (y + 1.0f) * cell_size * cellSize;
			//vertex_cood[2] = origCood[2] + (z + 20 / 21.0f) * cell_size * cellSize;
			//vertex_cood[0] = origCood[0] + (x + 85 / 168.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			break;
		case 1:
			vertex_cood[1] = origCood[1] + (y + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 4 / 7.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 23 / 168.0f) * cell_size * cellSize;
			break;
		case 2:
			vertex_cood[1] = origCood[1] + (y + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 4 / 7.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 23 / 168.0f) * cell_size * cellSize;
			break;
		case 3:
			//vertex_cood[1] = origCood[1] + (y + 0.0f) * cell_size * cellSize;
			//vertex_cood[2] = origCood[2] + (z + 20 / 21.0f) * cell_size * cellSize;
			//vertex_cood[0] = origCood[0] + (x + 85 / 168.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			break;
		case 4:
			vertex_cood[1] = origCood[1] + (y + 1.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 19 / 28.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 51 / 224.0f) * cell_size * cellSize;
			break;
		case 5:
			vertex_cood[1] = origCood[1] + (y + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 4 / 7.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 2 / 21.0f) * cell_size * cellSize;
			break;
		case 6:
			vertex_cood[1] = origCood[1] + (y + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 4 / 7.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 2 / 21.0f) * cell_size * cellSize;
			break;
		case 7:
			vertex_cood[1] = origCood[1] + (y + 0.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 19 / 28.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 51 / 224.0f) * cell_size * cellSize;
			break;
		case 8:
			vertex_cood[1] = origCood[1] + (y + 1.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 9 / 28.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 51 / 224.0f) * cell_size * cellSize;
			break;
		case 9:
			vertex_cood[1] = origCood[1] + (y + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 3 / 7.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 2 / 21.0f) * cell_size * cellSize;
			break;
		case 10:
			vertex_cood[1] = origCood[1] + (y + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 3 / 7.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 2 / 21.0f) * cell_size * cellSize;
			break;
		case 11:
			vertex_cood[1] = origCood[1] + (y + 0.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 9 / 28.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 51 / 224.0f) * cell_size * cellSize;
			break;
		case 12:
			//vertex_cood[1] = origCood[1] + (y + 1.0f) * cell_size * cellSize;
			//vertex_cood[2] = origCood[2] + (z + 1 / 21.0f) * cell_size * cellSize;
			//vertex_cood[0] = origCood[0] + (x + 85 / 168.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			break;
		case 13:
			vertex_cood[1] = origCood[1] + (y + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 3 / 7.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 23 / 168.0f) * cell_size * cellSize;
			break;
		case 14:
			vertex_cood[1] = origCood[1] + (y + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 3 / 7.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 23 / 168.0f) * cell_size * cellSize;
			break;
		case 15:
			//vertex_cood[1] = origCood[1] + (y + 0.0f) * cell_size * cellSize;
			//vertex_cood[2] = origCood[2] + (z + 1 / 21.0f) * cell_size * cellSize;
			//vertex_cood[0] = origCood[0] + (x + 85 / 168.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			break;

		case 100:
			//vertex_cood[1] = origCood[1] + (y + 1.0f) * cell_size * cellSize;
			//vertex_cood[2] = origCood[2] + (z + 20 / 21.0f) * cell_size * cellSize;
			//vertex_cood[0] = origCood[0] + (x + 1.0f - 85 / 168.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			break;
		case 101:
			vertex_cood[1] = origCood[1] + (y + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 4 / 7.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 1.0f - 23 / 168.0f) * cell_size * cellSize;
			break;
		case 102:
			vertex_cood[1] = origCood[1] + (y + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 4 / 7.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 1.0f - 23 / 168.0f) * cell_size * cellSize;
			break;
		case 103:
			//vertex_cood[1] = origCood[1] + (y + 0.0f) * cell_size * cellSize;
			//vertex_cood[2] = origCood[2] + (z + 20 / 21.0f) * cell_size * cellSize;
			//vertex_cood[0] = origCood[0] + (x + 1.0f - 85 / 168.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			break;
		case 104:
			vertex_cood[1] = origCood[1] + (y + 1.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 19 / 28.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 1.0f - 51 / 224.0f) * cell_size * cellSize;
			break;
		case 105:
			vertex_cood[1] = origCood[1] + (y + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 4 / 7.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 1.0f - 2 / 21.0f) * cell_size * cellSize;
			break;
		case 106:
			vertex_cood[1] = origCood[1] + (y + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 4 / 7.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 1.0f - 2 / 21.0f) * cell_size * cellSize;
			break;
		case 107:
			vertex_cood[1] = origCood[1] + (y + 0.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 19 / 28.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 1.0f - 51 / 224.0f) * cell_size * cellSize;
			break;
		case 108:
			vertex_cood[1] = origCood[1] + (y + 1.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 9 / 28.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 1.0f - 51 / 224.0f) * cell_size * cellSize;
			break;
		case 109:
			vertex_cood[1] = origCood[1] + (y + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 3 / 7.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 1.0f - 2 / 21.0f) * cell_size * cellSize;
			break;
		case 110:
			vertex_cood[1] = origCood[1] + (y + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 3 / 7.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 1.0f - 2 / 21.0f) * cell_size * cellSize;
			break;
		case 111:
			vertex_cood[1] = origCood[1] + (y + 0.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 9 / 28.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 1.0f - 51 / 224.0f) * cell_size * cellSize;
			break;
		case 112:
			//vertex_cood[1] = origCood[1] + (y + 1.0f) * cell_size * cellSize;
			//vertex_cood[2] = origCood[2] + (z + 1 / 21.0f) * cell_size * cellSize;
			//vertex_cood[0] = origCood[0] + (x + 1.0f - 85 / 168.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			break;
		case 113:
			vertex_cood[1] = origCood[1] + (y + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 3 / 7.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 1.0f - 23 / 168.0f) * cell_size * cellSize;
			break;
		case 114:
			vertex_cood[1] = origCood[1] + (y + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 3 / 7.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 1.0f - 23 / 168.0f) * cell_size * cellSize;
			break;
		case 115:
			//vertex_cood[1] = origCood[1] + (y + 0.0f) * cell_size * cellSize;
			//vertex_cood[2] = origCood[2] + (z + 1 / 21.0f) * cell_size * cellSize;
			//vertex_cood[0] = origCood[0] + (x + 1.0f - 85 / 168.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			break;

		case 1004:
			vertex_cood[1] = origCood[1] + (y + 1.0f +  4063 / 12740.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 38 / 49.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 2661 / 12740.0f) * cell_size * cellSize;
			break;
		case 1007:
			vertex_cood[1] = origCood[1] + (y - 4063 / 12740.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 38 / 49.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 2661 / 12740.0f) * cell_size * cellSize;
			break;
		case 1008:
			vertex_cood[1] = origCood[1] + (y + 1.0f + 4063 / 12740.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 11 / 49.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 2661 / 12740.0f) * cell_size * cellSize;
			break;
		case 1011:
			vertex_cood[1] = origCood[1] + (y - 4063 / 12740.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 11 / 49.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 2661 / 12740.0f) * cell_size * cellSize;
			break;
		case 1104:
			vertex_cood[1] = origCood[1] + (y + 1.0f +  4063 / 12740.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 38 / 49.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 1.0f - 2661 / 12740.0f) * cell_size * cellSize;
			break;
		case 1107:
			vertex_cood[1] = origCood[1] + (y - 4063 / 12740.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 38 / 49.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 1.0f - 2661 / 12740.0f) * cell_size * cellSize;
			break;
		case 1108:
			vertex_cood[1] = origCood[1] + (y + 1.0f + 4063 / 12740.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 11 / 49.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 1.0f - 2661 / 12740.0f) * cell_size * cellSize;
			break;
		case 1111:
			vertex_cood[1] = origCood[1] + (y - 4063 / 12740.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 11 / 49.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 1.0f - 2661 / 12740.0f) * cell_size * cellSize;
			break;

		case 10000:
			/*vertex_cood[1] = origCood[1] + (y + 7 / 12.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 7 / 12.0f) * cell_size * cellSize;*/
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			break;
		case 10001:
			vertex_cood[1] = origCood[1] + (y + 4 / 9.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 4 / 9.0f) * cell_size * cellSize;
			break;
		case 10002:
			vertex_cood[1] = origCood[1] + (y + 4 / 9.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 4 / 9.0f) * cell_size * cellSize;
			break;
		case 10003:
			/*vertex_cood[1] = origCood[1] + (y + 7 / 12.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 7 / 12.0f) * cell_size * cellSize;*/
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			break;
		case 10004:
			/*vertex_cood[1] = origCood[1] + (y + 1.0f - 7 / 12.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 7 / 12.0f) * cell_size * cellSize;*/
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			break;
		case 10005:
			vertex_cood[1] = origCood[1] + (y + 1.0f - 4 / 9.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 4 / 9.0f) * cell_size * cellSize;
			break;
		case 10006:
			vertex_cood[1] = origCood[1] + (y + 1.0f - 4 / 9.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 4 / 9.0f) * cell_size * cellSize;
			break;
		case 10007:
			/*vertex_cood[1] = origCood[1] + (y + 1.0f - 7 / 12.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 7 / 12.0f) * cell_size * cellSize;*/
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			break;
		case 10008:
			/*vertex_cood[1] = origCood[1] + (y + 7 / 12.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 1.0f - 7 / 12.0f) * cell_size * cellSize;*/
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			break;
		case 10009:
			vertex_cood[1] = origCood[1] + (y + 4 / 9.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 1.0f - 4 / 9.0f) * cell_size * cellSize;
			break;
		case 10010:
			vertex_cood[1] = origCood[1] + (y + 4 / 9.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 1.0f - 4 / 9.0f) * cell_size * cellSize;
			break;
		case 10011:
			/*vertex_cood[1] = origCood[1] + (y + 7 / 12.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 1.0f - 7 / 12.0f) * cell_size * cellSize;*/
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			break;
		case 10012:
			/*vertex_cood[1] = origCood[1] + (y + 1.0f - 7 / 12.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 1.0f - 7 / 12.0f) * cell_size * cellSize;*/
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			break;
		case 10013:
			vertex_cood[1] = origCood[1] + (y + 1.0f - 4 / 9.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 1.0f - 4 / 9.0f) * cell_size * cellSize;
			break;
		case 10014:
			vertex_cood[1] = origCood[1] + (y + 1.0f - 4 / 9.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 1.0f - 4 / 9.0f) * cell_size * cellSize;
			break;
		case 10015:
			/*vertex_cood[1] = origCood[1] + (y + 1.0f - 7 / 12.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 1.0f - 7 / 12.0f) * cell_size * cellSize;*/
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			break;

		}
		break;

	case 2:
		//x = yy;	y = zz;	z = xx;
		switch (i)
		{
		case 0:
			//vertex_cood[0] = origCood[0] + (x + 1.0f) * cell_size * cellSize;
			//vertex_cood[1] = origCood[1] + (y + 20 / 21.0f) * cell_size * cellSize;
			//vertex_cood[2] = origCood[2] + (z + 85 / 168.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			break;
		case 1:
			vertex_cood[2] = origCood[2] + (z + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 4 / 7.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 23 / 168.0f) * cell_size * cellSize;
			break;
		case 2:
			vertex_cood[2] = origCood[2] + (z + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 4 / 7.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 23 / 168.0f) * cell_size * cellSize;
			break;
		case 3:
			//vertex_cood[0] = origCood[0] + (x + 0.0f) * cell_size * cellSize;
			//vertex_cood[1] = origCood[1] + (y + 20 / 21.0f) * cell_size * cellSize;
			//vertex_cood[2] = origCood[2] + (z + 85 / 168.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			break;
		case 4:
			vertex_cood[2] = origCood[2] + (z + 1.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 19 / 28.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 51 / 224.0f) * cell_size * cellSize;
			break;
		case 5:
			vertex_cood[2] = origCood[2] + (z + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 4 / 7.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 2 / 21.0f) * cell_size * cellSize;
			break;
		case 6:
			vertex_cood[2] = origCood[2] + (z + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 4 / 7.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 2 / 21.0f) * cell_size * cellSize;
			break;
		case 7:
			vertex_cood[2] = origCood[2] + (z + 0.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 19 / 28.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 51 / 224.0f) * cell_size * cellSize;
			break;
		case 8:
			vertex_cood[2] = origCood[2] + (z + 1.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 9 / 28.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 51 / 224.0f) * cell_size * cellSize;
			break;
		case 9:
			vertex_cood[2] = origCood[2] + (z + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 3 / 7.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 2 / 21.0f) * cell_size * cellSize;
			break;
		case 10:
			vertex_cood[2] = origCood[2] + (z + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 3 / 7.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 2 / 21.0f) * cell_size * cellSize;
			break;
		case 11:
			vertex_cood[2] = origCood[2] + (z + 0.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 9 / 28.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 51 / 224.0f) * cell_size * cellSize;
			break;
		case 12:
			//vertex_cood[0] = origCood[0] + (x + 1.0f) * cell_size * cellSize;
			//vertex_cood[1] = origCood[1] + (y + 1 / 21.0f) * cell_size * cellSize;
			//vertex_cood[2] = origCood[2] + (z + 85 / 168.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			break;
		case 13:
			vertex_cood[2] = origCood[2] + (z + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 3 / 7.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 23 / 168.0f) * cell_size * cellSize;
			break;
		case 14:
			vertex_cood[2] = origCood[2] + (z + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 3 / 7.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 23 / 168.0f) * cell_size * cellSize;
			break;
		case 15:
			//vertex_cood[0] = origCood[0] + (x + 0.0f) * cell_size * cellSize;
			//vertex_cood[1] = origCood[1] + (y + 1 / 21.0f) * cell_size * cellSize;
			//vertex_cood[2] = origCood[2] + (z + 85 / 168.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			break;

		case 100:
			//vertex_cood[0] = origCood[0] + (x + 1.0f) * cell_size * cellSize;
			//vertex_cood[1] = origCood[1] + (y + 20 / 21.0f) * cell_size * cellSize;
			//vertex_cood[2] = origCood[2] + (z + 1.0f - 85 / 168.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			break;
		case 101:
			vertex_cood[2] = origCood[2] + (z + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 4 / 7.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1.0f - 23 / 168.0f) * cell_size * cellSize;
			break;
		case 102:
			vertex_cood[2] = origCood[2] + (z + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 4 / 7.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1.0f - 23 / 168.0f) * cell_size * cellSize;
			break;
		case 103:
			//vertex_cood[0] = origCood[0] + (x + 0.0f) * cell_size * cellSize;
			//vertex_cood[1] = origCood[1] + (y + 20 / 21.0f) * cell_size * cellSize;
			//vertex_cood[2] = origCood[2] + (z + 1.0f - 85 / 168.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			break;
		case 104:
			vertex_cood[2] = origCood[2] + (z + 1.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 19 / 28.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1.0f - 51 / 224.0f) * cell_size * cellSize;
			break;
		case 105:
			vertex_cood[2] = origCood[2] + (z + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 4 / 7.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1.0f - 2 / 21.0f) * cell_size * cellSize;
			break;
		case 106:
			vertex_cood[2] = origCood[2] + (z + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 4 / 7.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1.0f - 2 / 21.0f) * cell_size * cellSize;
			break;
		case 107:
			vertex_cood[2] = origCood[2] + (z + 0.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 19 / 28.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1.0f - 51 / 224.0f) * cell_size * cellSize;
			break;
		case 108:
			vertex_cood[2] = origCood[2] + (z + 1.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 9 / 28.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1.0f - 51 / 224.0f) * cell_size * cellSize;
			break;
		case 109:
			vertex_cood[2] = origCood[2] + (z + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 3 / 7.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1.0f - 2 / 21.0f) * cell_size * cellSize;
			break;
		case 110:
			vertex_cood[2] = origCood[2] + (z + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 3 / 7.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1.0f - 2 / 21.0f) * cell_size * cellSize;
			break;
		case 111:
			vertex_cood[2] = origCood[2] + (z + 0.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 9 / 28.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1.0f - 51 / 224.0f) * cell_size * cellSize;
			break;
		case 112:
			//vertex_cood[0] = origCood[0] + (x + 1.0f) * cell_size * cellSize;
			//vertex_cood[1] = origCood[1] + (y + 1 / 21.0f) * cell_size * cellSize;
			//vertex_cood[2] = origCood[2] + (z + 1.0f - 85 / 168.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			break;
		case 113:
			vertex_cood[2] = origCood[2] + (z + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 3 / 7.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1.0f - 23 / 168.0f) * cell_size * cellSize;
			break;
		case 114:
			vertex_cood[2] = origCood[2] + (z + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 3 / 7.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1.0f - 23 / 168.0f) * cell_size * cellSize;
			break;
		case 115:
			//vertex_cood[0] = origCood[0] + (x + 0.0f) * cell_size * cellSize;
			//vertex_cood[1] = origCood[1] + (y + 1 / 21.0f) * cell_size * cellSize;
			//vertex_cood[2] = origCood[2] + (z + 1.0f - 85 / 168.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			break;

		case 1004:
			vertex_cood[2] = origCood[2] + (z + 1.0f +  4063 / 12740.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 38 / 49.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 2661 / 12740.0f) * cell_size * cellSize;
			break;
		case 1007:
			vertex_cood[2] = origCood[2] + (z - 4063 / 12740.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 38 / 49.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 2661 / 12740.0f) * cell_size * cellSize;
			break;
		case 1008:
			vertex_cood[2] = origCood[2] + (z + 1.0f + 4063 / 12740.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 11 / 49.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 2661 / 12740.0f) * cell_size * cellSize;
			break;
		case 1011:
			vertex_cood[2] = origCood[2] + (z - 4063 / 12740.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 11 / 49.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 2661 / 12740.0f) * cell_size * cellSize;
			break;
		case 1104:
			vertex_cood[2] = origCood[2] + (z + 1.0f +  4063 / 12740.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 38 / 49.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1.0f - 2661 / 12740.0f) * cell_size * cellSize;
			break;
		case 1107:
			vertex_cood[2] = origCood[2] + (z - 4063 / 12740.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 38 / 49.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1.0f - 2661 / 12740.0f) * cell_size * cellSize;
			break;
		case 1108:
			vertex_cood[2] = origCood[2] + (z + 1.0f + 4063 / 12740.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 11 / 49.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1.0f - 2661 / 12740.0f) * cell_size * cellSize;
			break;
		case 1111:
			vertex_cood[2] = origCood[2] + (z - 4063 / 12740.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 11 / 49.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1.0f - 2661 / 12740.0f) * cell_size * cellSize;
			break;

		case 10000:
			/*vertex_cood[2] = origCood[2] + (z + 7 / 12.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 7 / 12.0f) * cell_size * cellSize;*/
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			break;
		case 10001:
			vertex_cood[2] = origCood[2] + (z + 4 / 9.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 4 / 9.0f) * cell_size * cellSize;
			break;
		case 10002:
			vertex_cood[2] = origCood[2] + (z + 4 / 9.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 4 / 9.0f) * cell_size * cellSize;
			break;
		case 10003:
			/*vertex_cood[2] = origCood[2] + (z + 7 / 12.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 1.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 7 / 12.0f) * cell_size * cellSize;*/
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			break;
		case 10004:
			/*vertex_cood[2] = origCood[2] + (z + 1.0f - 7 / 12.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 7 / 12.0f) * cell_size * cellSize;*/
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			break;
		case 10005:
			vertex_cood[2] = origCood[2] + (z + 1.0f - 4 / 9.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 4 / 9.0f) * cell_size * cellSize;
			break;
		case 10006:
			vertex_cood[2] = origCood[2] + (z + 1.0f - 4 / 9.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 4 / 9.0f) * cell_size * cellSize;
			break;
		case 10007:
			/*vertex_cood[2] = origCood[2] + (z + 1.0f - 7 / 12.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 1.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 7 / 12.0f) * cell_size * cellSize;*/
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			break;
		case 10008:
			/*vertex_cood[2] = origCood[2] + (z + 7 / 12.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1.0f - 7 / 12.0f) * cell_size * cellSize;*/
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			break;
		case 10009:
			vertex_cood[2] = origCood[2] + (z + 4 / 9.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1.0f - 4 / 9.0f) * cell_size * cellSize;
			break;
		case 10010:
			vertex_cood[2] = origCood[2] + (z + 4 / 9.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1.0f - 4 / 9.0f) * cell_size * cellSize;
			break;
		case 10011:
			/*vertex_cood[2] = origCood[2] + (z + 7 / 12.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 1.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1.0f - 7 / 12.0f) * cell_size * cellSize;*/
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			break;
		case 10012:
			/*vertex_cood[2] = origCood[2] + (z + 1.0f - 7 / 12.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1.0f - 7 / 12.0f) * cell_size * cellSize;*/
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			break;
		case 10013:
			vertex_cood[2] = origCood[2] + (z + 1.0f - 4 / 9.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 1 / 3.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1.0f - 4 / 9.0f) * cell_size * cellSize;
			break;
		case 10014:
			vertex_cood[2] = origCood[2] + (z + 1.0f - 4 / 9.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 2 / 3.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1.0f - 4 / 9.0f) * cell_size * cellSize;
			break;
		case 10015:
			/*vertex_cood[2] = origCood[2] + (z + 1.0f - 7 / 12.0f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 1.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1.0f - 7 / 12.0f) * cell_size * cellSize;*/
			vertex_cood[2] = origCood[2] + (z + 0.5f) * cell_size * cellSize;
			vertex_cood[0] = origCood[0] + (x + 0.5f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 0.5f) * cell_size * cellSize;
			break;

		}
		break;
	}


}

void CVTBasedPolycube::AddThirteenHexTypeOneFirst(int x, int y, int z, int level, int num_hexa, int direction)
{

	int related_cell[20];

	related_cell[0] = XYZToOctreeidx(x * 2 - 2, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[1] = XYZToOctreeidx(x * 2 - 1, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[2] = XYZToOctreeidx(x * 2 - 0, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[3] = XYZToOctreeidx(x * 2 + 1, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[4] = XYZToOctreeidx(x * 2 - 2, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[5] = XYZToOctreeidx(x * 2 - 1, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[6] = XYZToOctreeidx(x * 2 - 0, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[7] = XYZToOctreeidx(x * 2 + 1, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[8] = XYZToOctreeidx(x * 2 - 2, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[9] = XYZToOctreeidx(x * 2 - 1, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[10] = XYZToOctreeidx(x * 2 - 0, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[11] = XYZToOctreeidx(x * 2 + 1, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[12] = XYZToOctreeidx(x * 2 - 2, y * 2 + 1, z * 2 - 1, level + 1, direction);
	related_cell[13] = XYZToOctreeidx(x * 2 - 1, y * 2 + 1, z * 2 - 1, level + 1, direction);
	related_cell[14] = XYZToOctreeidx(x * 2 - 0, y * 2 + 1, z * 2 - 1, level + 1, direction);
	related_cell[15] = XYZToOctreeidx(x * 2 + 1, y * 2 + 1, z * 2 - 1, level + 1, direction);

	related_cell[16] = XYZToOctreeidx(x - 1, y - 1, z, level, direction);
	related_cell[17] = XYZToOctreeidx(x, y - 1, z, level, direction);
	related_cell[18] = XYZToOctreeidx(x - 1, y, z, level, direction);
	related_cell[19] = XYZToOctreeidx(x, y, z, level, direction);

	double node_coodinate[3];

	TwentyOneVertices(related_cell[0], node_coodinate, 0, direction);
	hexVerts[vtxIdxArray[related_cell[0]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[0]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[0]]].ParaPos[2] = node_coodinate[2];

	if (dualVertexOnce[related_cell[1]] == -1)
	{
		TwentyOneVertices(related_cell[1], node_coodinate, 1, direction);
		hexVerts[vtxIdxArray[related_cell[1]]].ParaPos[0] = node_coodinate[0];
		hexVerts[vtxIdxArray[related_cell[1]]].ParaPos[1] = node_coodinate[1];
		hexVerts[vtxIdxArray[related_cell[1]]].ParaPos[2] = node_coodinate[2];
	}

	if (dualVertexOnce[related_cell[2]] == -1)
	{
		TwentyOneVertices(related_cell[2], node_coodinate, 2, direction);
		hexVerts[vtxIdxArray[related_cell[2]]].ParaPos[0] = node_coodinate[0];
		hexVerts[vtxIdxArray[related_cell[2]]].ParaPos[1] = node_coodinate[1];
		hexVerts[vtxIdxArray[related_cell[2]]].ParaPos[2] = node_coodinate[2];
	}

	TwentyOneVertices(related_cell[3], node_coodinate, 3, direction);
	hexVerts[vtxIdxArray[related_cell[3]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[3]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[3]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[4], node_coodinate, 4, direction);
	hexVerts[vtxIdxArray[related_cell[4]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[4]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[4]]].ParaPos[2] = node_coodinate[2];
	dualVertexOnce[related_cell[4]] = 1;

	TwentyOneVertices(related_cell[5], node_coodinate, 5, direction);
	hexVerts[vtxIdxArray[related_cell[5]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[5]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[5]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[6], node_coodinate, 6, direction);
	hexVerts[vtxIdxArray[related_cell[6]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[6]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[6]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[7], node_coodinate, 7, direction);
	hexVerts[vtxIdxArray[related_cell[7]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[7]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[7]]].ParaPos[2] = node_coodinate[2];
	dualVertexOnce[related_cell[7]] = 1;

	TwentyOneVertices(related_cell[8], node_coodinate, 8, direction);
	hexVerts[vtxIdxArray[related_cell[8]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[8]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[8]]].ParaPos[2] = node_coodinate[2];
	dualVertexOnce[related_cell[8]] = 1;

	TwentyOneVertices(related_cell[9], node_coodinate, 9, direction);
	hexVerts[vtxIdxArray[related_cell[9]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[9]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[9]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[10], node_coodinate, 10, direction);
	hexVerts[vtxIdxArray[related_cell[10]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[10]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[10]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[11], node_coodinate, 11, direction);
	hexVerts[vtxIdxArray[related_cell[11]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[11]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[11]]].ParaPos[2] = node_coodinate[2];
	dualVertexOnce[related_cell[11]] = 1;

	TwentyOneVertices(related_cell[12], node_coodinate, 12, direction);
	hexVerts[vtxIdxArray[related_cell[12]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[12]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[12]]].ParaPos[2] = node_coodinate[2];

	if (dualVertexOnce[related_cell[13]] == -1)
	{
		TwentyOneVertices(related_cell[13], node_coodinate, 13, direction);
		hexVerts[vtxIdxArray[related_cell[13]]].ParaPos[0] = node_coodinate[0];
		hexVerts[vtxIdxArray[related_cell[13]]].ParaPos[1] = node_coodinate[1];
		hexVerts[vtxIdxArray[related_cell[13]]].ParaPos[2] = node_coodinate[2];
	}

	if (dualVertexOnce[related_cell[14]] == -1)
	{
		TwentyOneVertices(related_cell[14], node_coodinate, 14, direction);
		hexVerts[vtxIdxArray[related_cell[14]]].ParaPos[0] = node_coodinate[0];
		hexVerts[vtxIdxArray[related_cell[14]]].ParaPos[1] = node_coodinate[1];
		hexVerts[vtxIdxArray[related_cell[14]]].ParaPos[2] = node_coodinate[2];
	}

	TwentyOneVertices(related_cell[15], node_coodinate, 15, direction);
	hexVerts[vtxIdxArray[related_cell[15]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[15]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[15]]].ParaPos[2] = node_coodinate[2];

	//first hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[15]]);
	hexIdx.push_back(vtxIdxArray[related_cell[12]]);
	hexIdx.push_back(vtxIdxArray[related_cell[16]]);
	hexIdx.push_back(vtxIdxArray[related_cell[17]]);
	hexIdx.push_back(vtxIdxArray[related_cell[19]]);
	hexIdx.push_back(vtxIdxArray[related_cell[18]]);
	//second hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[1]]);
	hexIdx.push_back(vtxIdxArray[related_cell[2]]);
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);
	hexIdx.push_back(vtxIdxArray[related_cell[5]]);
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	//third hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[5]]);
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);
	hexIdx.push_back(vtxIdxArray[related_cell[10]]);
	hexIdx.push_back(vtxIdxArray[related_cell[9]]);
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);
	//fourth hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[9]]);
	hexIdx.push_back(vtxIdxArray[related_cell[10]]);
	hexIdx.push_back(vtxIdxArray[related_cell[14]]);
	hexIdx.push_back(vtxIdxArray[related_cell[13]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	hexIdx.push_back(vtxIdxArray[related_cell[15]]);
	hexIdx.push_back(vtxIdxArray[related_cell[12]]);
	//fifth hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[15]]);
	hexIdx.push_back(vtxIdxArray[related_cell[12]]);

}


void CVTBasedPolycube::AddThirteenHexTypeOneSecond(int x, int y, int z, int level, int num_hexa, int direction)
{

	int related_cell[20];

	related_cell[0] = XYZToOctreeidx(x * 2 - 2, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[1] = XYZToOctreeidx(x * 2 - 1, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[2] = XYZToOctreeidx(x * 2 - 0, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[3] = XYZToOctreeidx(x * 2 + 1, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[4] = XYZToOctreeidx(x * 2 - 2, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[5] = XYZToOctreeidx(x * 2 - 1, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[6] = XYZToOctreeidx(x * 2 - 0, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[7] = XYZToOctreeidx(x * 2 + 1, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[8] = XYZToOctreeidx(x * 2 - 2, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[9] = XYZToOctreeidx(x * 2 - 1, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[10] = XYZToOctreeidx(x * 2 - 0, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[11] = XYZToOctreeidx(x * 2 + 1, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[12] = XYZToOctreeidx(x * 2 - 2, y * 2 + 1, z * 2 - 1, level + 1, direction);
	related_cell[13] = XYZToOctreeidx(x * 2 - 1, y * 2 + 1, z * 2 - 1, level + 1, direction);
	related_cell[14] = XYZToOctreeidx(x * 2 - 0, y * 2 + 1, z * 2 - 1, level + 1, direction);
	related_cell[15] = XYZToOctreeidx(x * 2 + 1, y * 2 + 1, z * 2 - 1, level + 1, direction);

	related_cell[16] = XYZToOctreeidx(x - 1, y - 1, z, level, direction);
	related_cell[17] = XYZToOctreeidx(x, y - 1, z, level, direction);
	related_cell[18] = XYZToOctreeidx(x - 1, y, z, level, direction);
	related_cell[19] = XYZToOctreeidx(x, y, z, level, direction);

	double node_coodinate[3];

	TwentyOneVertices(related_cell[0], node_coodinate, 0, direction);
	hexVerts[vtxIdxArray[related_cell[0]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[0]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[0]]].ParaPos[2] = node_coodinate[2];

	if (dualVertexOnce[related_cell[1]] == -1)
	{
		TwentyOneVertices(related_cell[1], node_coodinate, 1, direction);
		hexVerts[vtxIdxArray[related_cell[1]]].ParaPos[0] = node_coodinate[0];
		hexVerts[vtxIdxArray[related_cell[1]]].ParaPos[1] = node_coodinate[1];
		hexVerts[vtxIdxArray[related_cell[1]]].ParaPos[2] = node_coodinate[2];
	}

	if (dualVertexOnce[related_cell[2]] == -1)
	{
		TwentyOneVertices(related_cell[2], node_coodinate, 2, direction);
		hexVerts[vtxIdxArray[related_cell[2]]].ParaPos[0] = node_coodinate[0];
		hexVerts[vtxIdxArray[related_cell[2]]].ParaPos[1] = node_coodinate[1];
		hexVerts[vtxIdxArray[related_cell[2]]].ParaPos[2] = node_coodinate[2];
	}

	TwentyOneVertices(related_cell[3], node_coodinate, 3, direction);
	hexVerts[vtxIdxArray[related_cell[3]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[3]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[3]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[4], node_coodinate, 4, direction);
	hexVerts[vtxIdxArray[related_cell[4]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[4]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[4]]].ParaPos[2] = node_coodinate[2];
	dualVertexOnce[related_cell[4]] = 1;

	TwentyOneVertices(related_cell[5], node_coodinate, 5, direction);
	hexVerts[vtxIdxArray[related_cell[5]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[5]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[5]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[6], node_coodinate, 6, direction);
	hexVerts[vtxIdxArray[related_cell[6]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[6]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[6]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[7], node_coodinate, 1007, direction);
	hexVerts[vtxIdxArray[related_cell[7]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[7]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[7]]].ParaPos[2] = node_coodinate[2];
	dualVertexOnce[related_cell[7]] = 1;

	TwentyOneVertices(related_cell[8], node_coodinate, 8, direction);
	hexVerts[vtxIdxArray[related_cell[8]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[8]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[8]]].ParaPos[2] = node_coodinate[2];
	dualVertexOnce[related_cell[8]] = 1;

	TwentyOneVertices(related_cell[9], node_coodinate, 9, direction);
	hexVerts[vtxIdxArray[related_cell[9]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[9]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[9]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[10], node_coodinate, 10, direction);
	hexVerts[vtxIdxArray[related_cell[10]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[10]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[10]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[11], node_coodinate, 1011, direction);
	hexVerts[vtxIdxArray[related_cell[11]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[11]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[11]]].ParaPos[2] = node_coodinate[2];
	dualVertexOnce[related_cell[11]] = 1;

	TwentyOneVertices(related_cell[12], node_coodinate, 12, direction);
	hexVerts[vtxIdxArray[related_cell[12]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[12]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[12]]].ParaPos[2] = node_coodinate[2];

	if (dualVertexOnce[related_cell[13]] == -1)
	{
		TwentyOneVertices(related_cell[13], node_coodinate, 13, direction);
		hexVerts[vtxIdxArray[related_cell[13]]].ParaPos[0] = node_coodinate[0];
		hexVerts[vtxIdxArray[related_cell[13]]].ParaPos[1] = node_coodinate[1];
		hexVerts[vtxIdxArray[related_cell[13]]].ParaPos[2] = node_coodinate[2];
	}

	if (dualVertexOnce[related_cell[14]] == -1)
	{
		TwentyOneVertices(related_cell[14], node_coodinate, 14, direction);
		hexVerts[vtxIdxArray[related_cell[14]]].ParaPos[0] = node_coodinate[0];
		hexVerts[vtxIdxArray[related_cell[14]]].ParaPos[1] = node_coodinate[1];
		hexVerts[vtxIdxArray[related_cell[14]]].ParaPos[2] = node_coodinate[2];
	}

	TwentyOneVertices(related_cell[15], node_coodinate, 15, direction);
	hexVerts[vtxIdxArray[related_cell[15]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[15]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[15]]].ParaPos[2] = node_coodinate[2];

	//first hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[15]]);
	hexIdx.push_back(vtxIdxArray[related_cell[12]]);
	hexIdx.push_back(vtxIdxArray[related_cell[16]]);
	hexIdx.push_back(vtxIdxArray[related_cell[17]]);
	hexIdx.push_back(vtxIdxArray[related_cell[19]]);
	hexIdx.push_back(vtxIdxArray[related_cell[18]]);
	//second hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[1]]);
	hexIdx.push_back(vtxIdxArray[related_cell[2]]);
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);
	hexIdx.push_back(vtxIdxArray[related_cell[5]]);
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	//third hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[5]]);
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);
	hexIdx.push_back(vtxIdxArray[related_cell[10]]);
	hexIdx.push_back(vtxIdxArray[related_cell[9]]);
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);
	//fourth hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[9]]);
	hexIdx.push_back(vtxIdxArray[related_cell[10]]);
	hexIdx.push_back(vtxIdxArray[related_cell[14]]);
	hexIdx.push_back(vtxIdxArray[related_cell[13]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	hexIdx.push_back(vtxIdxArray[related_cell[15]]);
	hexIdx.push_back(vtxIdxArray[related_cell[12]]);
	//fifth hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[15]]);
	hexIdx.push_back(vtxIdxArray[related_cell[12]]);

}

void CVTBasedPolycube::AddThirteenHexTypeOneThird(int x, int y, int z, int level, int num_hexa, int direction)
{

	int related_cell[20];

	related_cell[0] = XYZToOctreeidx(x * 2 - 2, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[1] = XYZToOctreeidx(x * 2 - 1, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[2] = XYZToOctreeidx(x * 2 - 0, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[3] = XYZToOctreeidx(x * 2 + 1, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[4] = XYZToOctreeidx(x * 2 - 2, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[5] = XYZToOctreeidx(x * 2 - 1, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[6] = XYZToOctreeidx(x * 2 - 0, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[7] = XYZToOctreeidx(x * 2 + 1, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[8] = XYZToOctreeidx(x * 2 - 2, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[9] = XYZToOctreeidx(x * 2 - 1, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[10] = XYZToOctreeidx(x * 2 - 0, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[11] = XYZToOctreeidx(x * 2 + 1, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[12] = XYZToOctreeidx(x * 2 - 2, y * 2 + 1, z * 2 - 1, level + 1, direction);
	related_cell[13] = XYZToOctreeidx(x * 2 - 1, y * 2 + 1, z * 2 - 1, level + 1, direction);
	related_cell[14] = XYZToOctreeidx(x * 2 - 0, y * 2 + 1, z * 2 - 1, level + 1, direction);
	related_cell[15] = XYZToOctreeidx(x * 2 + 1, y * 2 + 1, z * 2 - 1, level + 1, direction);

	related_cell[16] = XYZToOctreeidx(x - 1, y - 1, z, level, direction);
	related_cell[17] = XYZToOctreeidx(x, y - 1, z, level, direction);
	related_cell[18] = XYZToOctreeidx(x - 1, y, z, level, direction);
	related_cell[19] = XYZToOctreeidx(x, y, z, level, direction);

	double node_coodinate[3];

	TwentyOneVertices(related_cell[0], node_coodinate, 0, direction);
	hexVerts[vtxIdxArray[related_cell[0]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[0]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[0]]].ParaPos[2] = node_coodinate[2];

	if (dualVertexOnce[related_cell[1]] == -1)
	{
		TwentyOneVertices(related_cell[1], node_coodinate, 1, direction);
		hexVerts[vtxIdxArray[related_cell[1]]].ParaPos[0] = node_coodinate[0];
		hexVerts[vtxIdxArray[related_cell[1]]].ParaPos[1] = node_coodinate[1];
		hexVerts[vtxIdxArray[related_cell[1]]].ParaPos[2] = node_coodinate[2];
	}

	if (dualVertexOnce[related_cell[2]] == -1)
	{
		TwentyOneVertices(related_cell[2], node_coodinate, 2, direction);
		hexVerts[vtxIdxArray[related_cell[2]]].ParaPos[0] = node_coodinate[0];
		hexVerts[vtxIdxArray[related_cell[2]]].ParaPos[1] = node_coodinate[1];
		hexVerts[vtxIdxArray[related_cell[2]]].ParaPos[2] = node_coodinate[2];
	}

	TwentyOneVertices(related_cell[3], node_coodinate, 3, direction);
	hexVerts[vtxIdxArray[related_cell[3]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[3]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[3]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[4], node_coodinate, 1004, direction);
	hexVerts[vtxIdxArray[related_cell[4]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[4]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[4]]].ParaPos[2] = node_coodinate[2];
	dualVertexOnce[related_cell[4]] = 1;

	TwentyOneVertices(related_cell[5], node_coodinate, 5, direction);
	hexVerts[vtxIdxArray[related_cell[5]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[5]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[5]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[6], node_coodinate, 6, direction);
	hexVerts[vtxIdxArray[related_cell[6]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[6]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[6]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[7], node_coodinate, 7, direction);
	hexVerts[vtxIdxArray[related_cell[7]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[7]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[7]]].ParaPos[2] = node_coodinate[2];
	dualVertexOnce[related_cell[7]] = 1;

	TwentyOneVertices(related_cell[8], node_coodinate, 1008, direction);
	hexVerts[vtxIdxArray[related_cell[8]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[8]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[8]]].ParaPos[2] = node_coodinate[2];
	dualVertexOnce[related_cell[8]] = 1;

	TwentyOneVertices(related_cell[9], node_coodinate, 9, direction);
	hexVerts[vtxIdxArray[related_cell[9]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[9]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[9]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[10], node_coodinate, 10, direction);
	hexVerts[vtxIdxArray[related_cell[10]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[10]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[10]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[11], node_coodinate, 11, direction);
	hexVerts[vtxIdxArray[related_cell[11]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[11]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[11]]].ParaPos[2] = node_coodinate[2];
	dualVertexOnce[related_cell[11]] = 1;

	TwentyOneVertices(related_cell[12], node_coodinate, 12, direction);
	hexVerts[vtxIdxArray[related_cell[12]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[12]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[12]]].ParaPos[2] = node_coodinate[2];

	if (dualVertexOnce[related_cell[13]] == -1)
	{
		TwentyOneVertices(related_cell[13], node_coodinate, 13, direction);
		hexVerts[vtxIdxArray[related_cell[13]]].ParaPos[0] = node_coodinate[0];
		hexVerts[vtxIdxArray[related_cell[13]]].ParaPos[1] = node_coodinate[1];
		hexVerts[vtxIdxArray[related_cell[13]]].ParaPos[2] = node_coodinate[2];
	}

	if (dualVertexOnce[related_cell[14]] == -1)
	{
		TwentyOneVertices(related_cell[14], node_coodinate, 14, direction);
		hexVerts[vtxIdxArray[related_cell[14]]].ParaPos[0] = node_coodinate[0];
		hexVerts[vtxIdxArray[related_cell[14]]].ParaPos[1] = node_coodinate[1];
		hexVerts[vtxIdxArray[related_cell[14]]].ParaPos[2] = node_coodinate[2];
	}

	TwentyOneVertices(related_cell[15], node_coodinate, 15, direction);
	hexVerts[vtxIdxArray[related_cell[15]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[15]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[15]]].ParaPos[2] = node_coodinate[2];

	//first hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[15]]);
	hexIdx.push_back(vtxIdxArray[related_cell[12]]);
	hexIdx.push_back(vtxIdxArray[related_cell[16]]);
	hexIdx.push_back(vtxIdxArray[related_cell[17]]);
	hexIdx.push_back(vtxIdxArray[related_cell[19]]);
	hexIdx.push_back(vtxIdxArray[related_cell[18]]);
	//second hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[1]]);
	hexIdx.push_back(vtxIdxArray[related_cell[2]]);
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);
	hexIdx.push_back(vtxIdxArray[related_cell[5]]);
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	//third hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[5]]);
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);
	hexIdx.push_back(vtxIdxArray[related_cell[10]]);
	hexIdx.push_back(vtxIdxArray[related_cell[9]]);
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);
	//fourth hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[9]]);
	hexIdx.push_back(vtxIdxArray[related_cell[10]]);
	hexIdx.push_back(vtxIdxArray[related_cell[14]]);
	hexIdx.push_back(vtxIdxArray[related_cell[13]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	hexIdx.push_back(vtxIdxArray[related_cell[15]]);
	hexIdx.push_back(vtxIdxArray[related_cell[12]]);
	//fifth hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[15]]);
	hexIdx.push_back(vtxIdxArray[related_cell[12]]);

}

void CVTBasedPolycube::AddThirteenHexTypeOneFourth(int x, int y, int z, int level, int num_hexa, int direction)
{

	int related_cell[20];

	related_cell[0] = XYZToOctreeidx(x * 2 - 2, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[1] = XYZToOctreeidx(x * 2 - 1, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[2] = XYZToOctreeidx(x * 2 - 0, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[3] = XYZToOctreeidx(x * 2 + 1, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[4] = XYZToOctreeidx(x * 2 - 2, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[5] = XYZToOctreeidx(x * 2 - 1, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[6] = XYZToOctreeidx(x * 2 - 0, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[7] = XYZToOctreeidx(x * 2 + 1, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[8] = XYZToOctreeidx(x * 2 - 2, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[9] = XYZToOctreeidx(x * 2 - 1, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[10] = XYZToOctreeidx(x * 2 - 0, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[11] = XYZToOctreeidx(x * 2 + 1, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[12] = XYZToOctreeidx(x * 2 - 2, y * 2 + 1, z * 2 - 1, level + 1, direction);
	related_cell[13] = XYZToOctreeidx(x * 2 - 1, y * 2 + 1, z * 2 - 1, level + 1, direction);
	related_cell[14] = XYZToOctreeidx(x * 2 - 0, y * 2 + 1, z * 2 - 1, level + 1, direction);
	related_cell[15] = XYZToOctreeidx(x * 2 + 1, y * 2 + 1, z * 2 - 1, level + 1, direction);

	related_cell[16] = XYZToOctreeidx(x - 1, y - 1, z, level, direction);
	related_cell[17] = XYZToOctreeidx(x, y - 1, z, level, direction);
	related_cell[18] = XYZToOctreeidx(x - 1, y, z, level, direction);
	related_cell[19] = XYZToOctreeidx(x, y, z, level, direction);

	//int xx, yy, zz;
	//xx = x, yy = y, zz = z;

	//switch (direction)
	//{
	//case 0:
	//	x = xx; y = yy; z = zz;
	//	break;
	//case 1:
	//	x = zz; y = xx; z = yy;
	//	break;
	//case 2:
	//	x = yy; y = zz; z = xx;
	//	break;
	//}

	double node_coodinate[3];

	TwentyOneVertices(related_cell[0], node_coodinate, 0, direction);
	hexVerts[vtxIdxArray[related_cell[0]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[0]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[0]]].ParaPos[2] = node_coodinate[2];

	if (dualVertexOnce[related_cell[1]] == -1)
	{
		TwentyOneVertices(related_cell[1], node_coodinate, 1, direction);
		hexVerts[vtxIdxArray[related_cell[1]]].ParaPos[0] = node_coodinate[0];
		hexVerts[vtxIdxArray[related_cell[1]]].ParaPos[1] = node_coodinate[1];
		hexVerts[vtxIdxArray[related_cell[1]]].ParaPos[2] = node_coodinate[2];
	}

	if (dualVertexOnce[related_cell[2]] == -1)
	{
		TwentyOneVertices(related_cell[2], node_coodinate, 2, direction);
		hexVerts[vtxIdxArray[related_cell[2]]].ParaPos[0] = node_coodinate[0];
		hexVerts[vtxIdxArray[related_cell[2]]].ParaPos[1] = node_coodinate[1];
		hexVerts[vtxIdxArray[related_cell[2]]].ParaPos[2] = node_coodinate[2];
	}

	TwentyOneVertices(related_cell[3], node_coodinate, 3, direction);
	hexVerts[vtxIdxArray[related_cell[3]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[3]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[3]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[4], node_coodinate, 1004, direction);
	hexVerts[vtxIdxArray[related_cell[4]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[4]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[4]]].ParaPos[2] = node_coodinate[2];
	dualVertexOnce[related_cell[4]] = 1;

	TwentyOneVertices(related_cell[5], node_coodinate, 5, direction);
	hexVerts[vtxIdxArray[related_cell[5]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[5]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[5]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[6], node_coodinate, 6, direction);
	hexVerts[vtxIdxArray[related_cell[6]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[6]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[6]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[7], node_coodinate, 1007, direction);
	hexVerts[vtxIdxArray[related_cell[7]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[7]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[7]]].ParaPos[2] = node_coodinate[2];
	dualVertexOnce[related_cell[7]] = 1;

	TwentyOneVertices(related_cell[8], node_coodinate, 1008, direction);
	hexVerts[vtxIdxArray[related_cell[8]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[8]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[8]]].ParaPos[2] = node_coodinate[2];
	dualVertexOnce[related_cell[8]] = 1;

	TwentyOneVertices(related_cell[9], node_coodinate, 9, direction);
	hexVerts[vtxIdxArray[related_cell[9]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[9]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[9]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[10], node_coodinate, 10, direction);
	hexVerts[vtxIdxArray[related_cell[10]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[10]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[10]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[11], node_coodinate, 1011, direction);
	hexVerts[vtxIdxArray[related_cell[11]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[11]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[11]]].ParaPos[2] = node_coodinate[2];
	dualVertexOnce[related_cell[11]] = 1;

	TwentyOneVertices(related_cell[12], node_coodinate, 12, direction);
	hexVerts[vtxIdxArray[related_cell[12]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[12]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[12]]].ParaPos[2] = node_coodinate[2];

	if (dualVertexOnce[related_cell[13]] == -1)
	{
		TwentyOneVertices(related_cell[13], node_coodinate, 13, direction);
		hexVerts[vtxIdxArray[related_cell[13]]].ParaPos[0] = node_coodinate[0];
		hexVerts[vtxIdxArray[related_cell[13]]].ParaPos[1] = node_coodinate[1];
		hexVerts[vtxIdxArray[related_cell[13]]].ParaPos[2] = node_coodinate[2];
	}

	if (dualVertexOnce[related_cell[14]] == -1)
	{
		TwentyOneVertices(related_cell[14], node_coodinate, 14, direction);
		hexVerts[vtxIdxArray[related_cell[14]]].ParaPos[0] = node_coodinate[0];
		hexVerts[vtxIdxArray[related_cell[14]]].ParaPos[1] = node_coodinate[1];
		hexVerts[vtxIdxArray[related_cell[14]]].ParaPos[2] = node_coodinate[2];
	}

	TwentyOneVertices(related_cell[15], node_coodinate, 15, direction);
	hexVerts[vtxIdxArray[related_cell[15]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[15]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[15]]].ParaPos[2] = node_coodinate[2];

	//first hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[15]]);
	hexIdx.push_back(vtxIdxArray[related_cell[12]]);
	hexIdx.push_back(vtxIdxArray[related_cell[16]]);
	hexIdx.push_back(vtxIdxArray[related_cell[17]]);
	hexIdx.push_back(vtxIdxArray[related_cell[19]]);
	hexIdx.push_back(vtxIdxArray[related_cell[18]]);
	//second hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[1]]);
	hexIdx.push_back(vtxIdxArray[related_cell[2]]);
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);
	hexIdx.push_back(vtxIdxArray[related_cell[5]]);
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	//third hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[5]]);
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);
	hexIdx.push_back(vtxIdxArray[related_cell[10]]);
	hexIdx.push_back(vtxIdxArray[related_cell[9]]);
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);
	//fourth hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[9]]);
	hexIdx.push_back(vtxIdxArray[related_cell[10]]);
	hexIdx.push_back(vtxIdxArray[related_cell[14]]);
	hexIdx.push_back(vtxIdxArray[related_cell[13]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	hexIdx.push_back(vtxIdxArray[related_cell[15]]);
	hexIdx.push_back(vtxIdxArray[related_cell[12]]);
	//fifth hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[15]]);
	hexIdx.push_back(vtxIdxArray[related_cell[12]]);


}

void CVTBasedPolycube::AddThirteenHexTypeOneFifth(int x, int y, int z, int level, int num_hexa, int direction)
{
	int related_cell[20];

	related_cell[0] = XYZToOctreeidx(x - 2, y - 2, z, level, direction);
	related_cell[1] = XYZToOctreeidx(x - 1, y - 2, z, level, direction);
	related_cell[2] = XYZToOctreeidx(x - 0, y - 2, z, level, direction);
	related_cell[3] = XYZToOctreeidx(x + 1, y - 2, z, level, direction);
	related_cell[4] = XYZToOctreeidx(x - 2, y - 1, z, level, direction);
	related_cell[5] = XYZToOctreeidx(x - 1, y - 1, z, level, direction);
	related_cell[6] = XYZToOctreeidx(x - 0, y - 1, z, level, direction);
	related_cell[7] = XYZToOctreeidx(x + 1, y - 1, z, level, direction);
	related_cell[8] = XYZToOctreeidx(x - 2, y - 0, z, level, direction);
	related_cell[9] = XYZToOctreeidx(x - 1, y - 0, z, level, direction);
	related_cell[10] = XYZToOctreeidx(x - 0, y - 0, z, level, direction);
	related_cell[11] = XYZToOctreeidx(x + 1, y - 0, z, level, direction);
	related_cell[12] = XYZToOctreeidx(x - 2, y + 1, z, level, direction);
	related_cell[13] = XYZToOctreeidx(x - 1, y + 1, z, level, direction);
	related_cell[14] = XYZToOctreeidx(x - 0, y + 1, z, level, direction);
	related_cell[15] = XYZToOctreeidx(x + 1, y + 1, z, level, direction);

	related_cell[16] = XYZToOctreeidx(x / 2 - 1, y / 2 - 1, z / 2 - 1, level - 1, direction);
	related_cell[17] = XYZToOctreeidx(x / 2, y / 2 - 1, z / 2 - 1, level - 1, direction);
	related_cell[18] = XYZToOctreeidx(x / 2 - 1, y / 2, z / 2 - 1, level - 1, direction);
	related_cell[19] = XYZToOctreeidx(x / 2, y / 2, z / 2 - 1, level - 1, direction);

	double node_coodinate[3];

	TwentyOneVertices(related_cell[0], node_coodinate, 100, direction);
	hexVerts[vtxIdxArray[related_cell[0]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[0]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[0]]].ParaPos[2] = node_coodinate[2];

	if (dualVertexOnce[related_cell[1]] == -1)
	{
		TwentyOneVertices(related_cell[1], node_coodinate, 101, direction);
		hexVerts[vtxIdxArray[related_cell[1]]].ParaPos[0] = node_coodinate[0];
		hexVerts[vtxIdxArray[related_cell[1]]].ParaPos[1] = node_coodinate[1];
		hexVerts[vtxIdxArray[related_cell[1]]].ParaPos[2] = node_coodinate[2];
	}

	if (dualVertexOnce[related_cell[2]] == -1)
	{
		TwentyOneVertices(related_cell[2], node_coodinate, 102, direction);
		hexVerts[vtxIdxArray[related_cell[2]]].ParaPos[0] = node_coodinate[0];
		hexVerts[vtxIdxArray[related_cell[2]]].ParaPos[1] = node_coodinate[1];
		hexVerts[vtxIdxArray[related_cell[2]]].ParaPos[2] = node_coodinate[2];
	}

	TwentyOneVertices(related_cell[3], node_coodinate, 103, direction);
	hexVerts[vtxIdxArray[related_cell[3]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[3]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[3]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[4], node_coodinate, 104, direction);
	hexVerts[vtxIdxArray[related_cell[4]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[4]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[4]]].ParaPos[2] = node_coodinate[2];
	dualVertexOnce[related_cell[4]] = 1;

	TwentyOneVertices(related_cell[5], node_coodinate, 105, direction);
	hexVerts[vtxIdxArray[related_cell[5]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[5]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[5]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[6], node_coodinate, 106, direction);
	hexVerts[vtxIdxArray[related_cell[6]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[6]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[6]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[7], node_coodinate, 107, direction);
	hexVerts[vtxIdxArray[related_cell[7]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[7]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[7]]].ParaPos[2] = node_coodinate[2];
	dualVertexOnce[related_cell[7]] = 1;

	TwentyOneVertices(related_cell[8], node_coodinate, 108, direction);
	hexVerts[vtxIdxArray[related_cell[8]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[8]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[8]]].ParaPos[2] = node_coodinate[2];
	dualVertexOnce[related_cell[8]] = 1;

	TwentyOneVertices(related_cell[9], node_coodinate, 109, direction);
	hexVerts[vtxIdxArray[related_cell[9]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[9]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[9]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[10], node_coodinate, 110, direction);
	hexVerts[vtxIdxArray[related_cell[10]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[10]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[10]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[11], node_coodinate, 111, direction);
	hexVerts[vtxIdxArray[related_cell[11]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[11]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[11]]].ParaPos[2] = node_coodinate[2];
	dualVertexOnce[related_cell[11]] = 1;

	TwentyOneVertices(related_cell[12], node_coodinate, 112, direction);
	hexVerts[vtxIdxArray[related_cell[12]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[12]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[12]]].ParaPos[2] = node_coodinate[2];

	if (dualVertexOnce[related_cell[13]] == -1)
	{
		TwentyOneVertices(related_cell[13], node_coodinate, 113, direction);
		hexVerts[vtxIdxArray[related_cell[13]]].ParaPos[0] = node_coodinate[0];
		hexVerts[vtxIdxArray[related_cell[13]]].ParaPos[1] = node_coodinate[1];
		hexVerts[vtxIdxArray[related_cell[13]]].ParaPos[2] = node_coodinate[2];
	}

	if (dualVertexOnce[related_cell[14]] == -1)
	{
		TwentyOneVertices(related_cell[14], node_coodinate, 114, direction);
		hexVerts[vtxIdxArray[related_cell[14]]].ParaPos[0] = node_coodinate[0];
		hexVerts[vtxIdxArray[related_cell[14]]].ParaPos[1] = node_coodinate[1];
		hexVerts[vtxIdxArray[related_cell[14]]].ParaPos[2] = node_coodinate[2];
	}

	TwentyOneVertices(related_cell[15], node_coodinate, 115, direction);
	hexVerts[vtxIdxArray[related_cell[15]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[15]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[15]]].ParaPos[2] = node_coodinate[2];

	//first hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[16]]);
	hexIdx.push_back(vtxIdxArray[related_cell[17]]);
	hexIdx.push_back(vtxIdxArray[related_cell[19]]);
	hexIdx.push_back(vtxIdxArray[related_cell[18]]);
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[15]]);
	hexIdx.push_back(vtxIdxArray[related_cell[12]]);
	//second hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[1]]);
	hexIdx.push_back(vtxIdxArray[related_cell[2]]);
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);
	hexIdx.push_back(vtxIdxArray[related_cell[5]]);

	//third hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);
	hexIdx.push_back(vtxIdxArray[related_cell[5]]);
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);
	hexIdx.push_back(vtxIdxArray[related_cell[10]]);
	hexIdx.push_back(vtxIdxArray[related_cell[9]]);

	//fourth hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	hexIdx.push_back(vtxIdxArray[related_cell[15]]);
	hexIdx.push_back(vtxIdxArray[related_cell[12]]);
	hexIdx.push_back(vtxIdxArray[related_cell[9]]);
	hexIdx.push_back(vtxIdxArray[related_cell[10]]);
	hexIdx.push_back(vtxIdxArray[related_cell[14]]);
	hexIdx.push_back(vtxIdxArray[related_cell[13]]);

	//fifth hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[15]]);
	hexIdx.push_back(vtxIdxArray[related_cell[12]]);
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);

}

void CVTBasedPolycube::AddThirteenHexTypeOneSixth(int x, int y, int z, int level, int num_hexa, int direction)
{
	int related_cell[20];

	related_cell[0] = XYZToOctreeidx(x - 2, y - 2, z, level, direction);
	related_cell[1] = XYZToOctreeidx(x - 1, y - 2, z, level, direction);
	related_cell[2] = XYZToOctreeidx(x - 0, y - 2, z, level, direction);
	related_cell[3] = XYZToOctreeidx(x + 1, y - 2, z, level, direction);
	related_cell[4] = XYZToOctreeidx(x - 2, y - 1, z, level, direction);
	related_cell[5] = XYZToOctreeidx(x - 1, y - 1, z, level, direction);
	related_cell[6] = XYZToOctreeidx(x - 0, y - 1, z, level, direction);
	related_cell[7] = XYZToOctreeidx(x + 1, y - 1, z, level, direction);
	related_cell[8] = XYZToOctreeidx(x - 2, y - 0, z, level, direction);
	related_cell[9] = XYZToOctreeidx(x - 1, y - 0, z, level, direction);
	related_cell[10] = XYZToOctreeidx(x - 0, y - 0, z, level, direction);
	related_cell[11] = XYZToOctreeidx(x + 1, y - 0, z, level, direction);
	related_cell[12] = XYZToOctreeidx(x - 2, y + 1, z, level, direction);
	related_cell[13] = XYZToOctreeidx(x - 1, y + 1, z, level, direction);
	related_cell[14] = XYZToOctreeidx(x - 0, y + 1, z, level, direction);
	related_cell[15] = XYZToOctreeidx(x + 1, y + 1, z, level, direction);

	related_cell[16] = XYZToOctreeidx(x / 2 - 1, y / 2 - 1, z / 2 - 1, level - 1, direction);
	related_cell[17] = XYZToOctreeidx(x / 2, y / 2 - 1, z / 2 - 1, level - 1, direction);
	related_cell[18] = XYZToOctreeidx(x / 2 - 1, y / 2, z / 2 - 1, level - 1, direction);
	related_cell[19] = XYZToOctreeidx(x / 2, y / 2, z / 2 - 1, level - 1, direction);

	double node_coodinate[3];

	TwentyOneVertices(related_cell[0], node_coodinate, 100, direction);
	hexVerts[vtxIdxArray[related_cell[0]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[0]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[0]]].ParaPos[2] = node_coodinate[2];

	if (dualVertexOnce[related_cell[1]] == -1)
	{
		TwentyOneVertices(related_cell[1], node_coodinate, 101, direction);
		hexVerts[vtxIdxArray[related_cell[1]]].ParaPos[0] = node_coodinate[0];
		hexVerts[vtxIdxArray[related_cell[1]]].ParaPos[1] = node_coodinate[1];
		hexVerts[vtxIdxArray[related_cell[1]]].ParaPos[2] = node_coodinate[2];
	}

	if (dualVertexOnce[related_cell[2]] == -1)
	{
		TwentyOneVertices(related_cell[2], node_coodinate, 102, direction);
		hexVerts[vtxIdxArray[related_cell[2]]].ParaPos[0] = node_coodinate[0];
		hexVerts[vtxIdxArray[related_cell[2]]].ParaPos[1] = node_coodinate[1];
		hexVerts[vtxIdxArray[related_cell[2]]].ParaPos[2] = node_coodinate[2];
	}

	TwentyOneVertices(related_cell[3], node_coodinate, 103, direction);
	hexVerts[vtxIdxArray[related_cell[3]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[3]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[3]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[4], node_coodinate, 104, direction);
	hexVerts[vtxIdxArray[related_cell[4]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[4]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[4]]].ParaPos[2] = node_coodinate[2];
	dualVertexOnce[related_cell[4]] = 1;

	TwentyOneVertices(related_cell[5], node_coodinate, 105, direction);
	hexVerts[vtxIdxArray[related_cell[5]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[5]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[5]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[6], node_coodinate, 106, direction);
	hexVerts[vtxIdxArray[related_cell[6]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[6]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[6]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[7], node_coodinate, 1107, direction);
	hexVerts[vtxIdxArray[related_cell[7]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[7]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[7]]].ParaPos[2] = node_coodinate[2];
	dualVertexOnce[related_cell[7]] = 1;

	TwentyOneVertices(related_cell[8], node_coodinate, 108, direction);
	hexVerts[vtxIdxArray[related_cell[8]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[8]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[8]]].ParaPos[2] = node_coodinate[2];
	dualVertexOnce[related_cell[8]] = 1;

	TwentyOneVertices(related_cell[9], node_coodinate, 109, direction);
	hexVerts[vtxIdxArray[related_cell[9]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[9]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[9]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[10], node_coodinate, 110, direction);
	hexVerts[vtxIdxArray[related_cell[10]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[10]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[10]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[11], node_coodinate, 1111, direction);
	hexVerts[vtxIdxArray[related_cell[11]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[11]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[11]]].ParaPos[2] = node_coodinate[2];
	dualVertexOnce[related_cell[11]] = 1;

	TwentyOneVertices(related_cell[12], node_coodinate, 112, direction);
	hexVerts[vtxIdxArray[related_cell[12]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[12]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[12]]].ParaPos[2] = node_coodinate[2];

	if (dualVertexOnce[related_cell[13]] == -1)
	{
		TwentyOneVertices(related_cell[13], node_coodinate, 113, direction);
		hexVerts[vtxIdxArray[related_cell[13]]].ParaPos[0] = node_coodinate[0];
		hexVerts[vtxIdxArray[related_cell[13]]].ParaPos[1] = node_coodinate[1];
		hexVerts[vtxIdxArray[related_cell[13]]].ParaPos[2] = node_coodinate[2];
	}

	if (dualVertexOnce[related_cell[14]] == -1)
	{
		TwentyOneVertices(related_cell[14], node_coodinate, 114, direction);
		hexVerts[vtxIdxArray[related_cell[14]]].ParaPos[0] = node_coodinate[0];
		hexVerts[vtxIdxArray[related_cell[14]]].ParaPos[1] = node_coodinate[1];
		hexVerts[vtxIdxArray[related_cell[14]]].ParaPos[2] = node_coodinate[2];
	}

	TwentyOneVertices(related_cell[15], node_coodinate, 115, direction);
	hexVerts[vtxIdxArray[related_cell[15]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[15]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[15]]].ParaPos[2] = node_coodinate[2];

	//first hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[16]]);
	hexIdx.push_back(vtxIdxArray[related_cell[17]]);
	hexIdx.push_back(vtxIdxArray[related_cell[19]]);
	hexIdx.push_back(vtxIdxArray[related_cell[18]]);
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[15]]);
	hexIdx.push_back(vtxIdxArray[related_cell[12]]);
	//second hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[1]]);
	hexIdx.push_back(vtxIdxArray[related_cell[2]]);
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);
	hexIdx.push_back(vtxIdxArray[related_cell[5]]);

	//third hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);
	hexIdx.push_back(vtxIdxArray[related_cell[5]]);
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);
	hexIdx.push_back(vtxIdxArray[related_cell[10]]);
	hexIdx.push_back(vtxIdxArray[related_cell[9]]);

	//fourth hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	hexIdx.push_back(vtxIdxArray[related_cell[15]]);
	hexIdx.push_back(vtxIdxArray[related_cell[12]]);
	hexIdx.push_back(vtxIdxArray[related_cell[9]]);
	hexIdx.push_back(vtxIdxArray[related_cell[10]]);
	hexIdx.push_back(vtxIdxArray[related_cell[14]]);
	hexIdx.push_back(vtxIdxArray[related_cell[13]]);

	//fifth hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[15]]);
	hexIdx.push_back(vtxIdxArray[related_cell[12]]);
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);

}

void CVTBasedPolycube::AddThirteenHexTypeOneSeventh(int x, int y, int z, int level, int num_hexa, int direction)
{
	int related_cell[20];

	related_cell[0] = XYZToOctreeidx(x - 2, y - 2, z, level, direction);
	related_cell[1] = XYZToOctreeidx(x - 1, y - 2, z, level, direction);
	related_cell[2] = XYZToOctreeidx(x - 0, y - 2, z, level, direction);
	related_cell[3] = XYZToOctreeidx(x + 1, y - 2, z, level, direction);
	related_cell[4] = XYZToOctreeidx(x - 2, y - 1, z, level, direction);
	related_cell[5] = XYZToOctreeidx(x - 1, y - 1, z, level, direction);
	related_cell[6] = XYZToOctreeidx(x - 0, y - 1, z, level, direction);
	related_cell[7] = XYZToOctreeidx(x + 1, y - 1, z, level, direction);
	related_cell[8] = XYZToOctreeidx(x - 2, y - 0, z, level, direction);
	related_cell[9] = XYZToOctreeidx(x - 1, y - 0, z, level, direction);
	related_cell[10] = XYZToOctreeidx(x - 0, y - 0, z, level, direction);
	related_cell[11] = XYZToOctreeidx(x + 1, y - 0, z, level, direction);
	related_cell[12] = XYZToOctreeidx(x - 2, y + 1, z, level, direction);
	related_cell[13] = XYZToOctreeidx(x - 1, y + 1, z, level, direction);
	related_cell[14] = XYZToOctreeidx(x - 0, y + 1, z, level, direction);
	related_cell[15] = XYZToOctreeidx(x + 1, y + 1, z, level, direction);

	related_cell[16] = XYZToOctreeidx(x / 2 - 1, y / 2 - 1, z / 2 - 1, level - 1, direction);
	related_cell[17] = XYZToOctreeidx(x / 2, y / 2 - 1, z / 2 - 1, level - 1, direction);
	related_cell[18] = XYZToOctreeidx(x / 2 - 1, y / 2, z / 2 - 1, level - 1, direction);
	related_cell[19] = XYZToOctreeidx(x / 2, y / 2, z / 2 - 1, level - 1, direction);

	double node_coodinate[3];

	TwentyOneVertices(related_cell[0], node_coodinate, 100, direction);
	hexVerts[vtxIdxArray[related_cell[0]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[0]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[0]]].ParaPos[2] = node_coodinate[2];

	if (dualVertexOnce[related_cell[1]] == -1)
	{
		TwentyOneVertices(related_cell[1], node_coodinate, 101, direction);
		hexVerts[vtxIdxArray[related_cell[1]]].ParaPos[0] = node_coodinate[0];
		hexVerts[vtxIdxArray[related_cell[1]]].ParaPos[1] = node_coodinate[1];
		hexVerts[vtxIdxArray[related_cell[1]]].ParaPos[2] = node_coodinate[2];
	}

	if (dualVertexOnce[related_cell[2]] == -1)
	{
		TwentyOneVertices(related_cell[2], node_coodinate, 102, direction);
		hexVerts[vtxIdxArray[related_cell[2]]].ParaPos[0] = node_coodinate[0];
		hexVerts[vtxIdxArray[related_cell[2]]].ParaPos[1] = node_coodinate[1];
		hexVerts[vtxIdxArray[related_cell[2]]].ParaPos[2] = node_coodinate[2];
	}

	TwentyOneVertices(related_cell[3], node_coodinate, 103, direction);
	hexVerts[vtxIdxArray[related_cell[3]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[3]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[3]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[4], node_coodinate, 1104, direction);
	hexVerts[vtxIdxArray[related_cell[4]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[4]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[4]]].ParaPos[2] = node_coodinate[2];
	dualVertexOnce[related_cell[4]] = 1;

	TwentyOneVertices(related_cell[5], node_coodinate, 105, direction);
	hexVerts[vtxIdxArray[related_cell[5]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[5]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[5]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[6], node_coodinate, 106, direction);
	hexVerts[vtxIdxArray[related_cell[6]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[6]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[6]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[7], node_coodinate, 107, direction);
	hexVerts[vtxIdxArray[related_cell[7]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[7]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[7]]].ParaPos[2] = node_coodinate[2];
	dualVertexOnce[related_cell[7]] = 1;

	TwentyOneVertices(related_cell[8], node_coodinate, 1108, direction);
	hexVerts[vtxIdxArray[related_cell[8]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[8]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[8]]].ParaPos[2] = node_coodinate[2];
	dualVertexOnce[related_cell[8]] = 1;

	TwentyOneVertices(related_cell[9], node_coodinate, 109, direction);
	hexVerts[vtxIdxArray[related_cell[9]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[9]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[9]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[10], node_coodinate, 110, direction);
	hexVerts[vtxIdxArray[related_cell[10]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[10]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[10]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[11], node_coodinate, 111, direction);
	hexVerts[vtxIdxArray[related_cell[11]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[11]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[11]]].ParaPos[2] = node_coodinate[2];
	dualVertexOnce[related_cell[11]] = 1;

	TwentyOneVertices(related_cell[12], node_coodinate, 112, direction);
	hexVerts[vtxIdxArray[related_cell[12]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[12]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[12]]].ParaPos[2] = node_coodinate[2];

	if (dualVertexOnce[related_cell[13]] == -1)
	{
		TwentyOneVertices(related_cell[13], node_coodinate, 113, direction);
		hexVerts[vtxIdxArray[related_cell[13]]].ParaPos[0] = node_coodinate[0];
		hexVerts[vtxIdxArray[related_cell[13]]].ParaPos[1] = node_coodinate[1];
		hexVerts[vtxIdxArray[related_cell[13]]].ParaPos[2] = node_coodinate[2];
	}

	if (dualVertexOnce[related_cell[14]] == -1)
	{
		TwentyOneVertices(related_cell[14], node_coodinate, 114, direction);
		hexVerts[vtxIdxArray[related_cell[14]]].ParaPos[0] = node_coodinate[0];
		hexVerts[vtxIdxArray[related_cell[14]]].ParaPos[1] = node_coodinate[1];
		hexVerts[vtxIdxArray[related_cell[14]]].ParaPos[2] = node_coodinate[2];
	}

	TwentyOneVertices(related_cell[15], node_coodinate, 115, direction);
	hexVerts[vtxIdxArray[related_cell[15]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[15]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[15]]].ParaPos[2] = node_coodinate[2];

	//first hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[16]]);
	hexIdx.push_back(vtxIdxArray[related_cell[17]]);
	hexIdx.push_back(vtxIdxArray[related_cell[19]]);
	hexIdx.push_back(vtxIdxArray[related_cell[18]]);
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[15]]);
	hexIdx.push_back(vtxIdxArray[related_cell[12]]);
	//second hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[1]]);
	hexIdx.push_back(vtxIdxArray[related_cell[2]]);
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);
	hexIdx.push_back(vtxIdxArray[related_cell[5]]);

	//third hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);
	hexIdx.push_back(vtxIdxArray[related_cell[5]]);
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);
	hexIdx.push_back(vtxIdxArray[related_cell[10]]);
	hexIdx.push_back(vtxIdxArray[related_cell[9]]);

	//fourth hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	hexIdx.push_back(vtxIdxArray[related_cell[15]]);
	hexIdx.push_back(vtxIdxArray[related_cell[12]]);
	hexIdx.push_back(vtxIdxArray[related_cell[9]]);
	hexIdx.push_back(vtxIdxArray[related_cell[10]]);
	hexIdx.push_back(vtxIdxArray[related_cell[14]]);
	hexIdx.push_back(vtxIdxArray[related_cell[13]]);

	//fifth hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[15]]);
	hexIdx.push_back(vtxIdxArray[related_cell[12]]);
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);

}

void CVTBasedPolycube::AddThirteenHexTypeOneEighth(int x, int y, int z, int level, int num_hexa, int direction)
{
	int related_cell[20];

	related_cell[0] = XYZToOctreeidx(x - 2, y - 2, z, level, direction);
	related_cell[1] = XYZToOctreeidx(x - 1, y - 2, z, level, direction);
	related_cell[2] = XYZToOctreeidx(x - 0, y - 2, z, level, direction);
	related_cell[3] = XYZToOctreeidx(x + 1, y - 2, z, level, direction);
	related_cell[4] = XYZToOctreeidx(x - 2, y - 1, z, level, direction);
	related_cell[5] = XYZToOctreeidx(x - 1, y - 1, z, level, direction);
	related_cell[6] = XYZToOctreeidx(x - 0, y - 1, z, level, direction);
	related_cell[7] = XYZToOctreeidx(x + 1, y - 1, z, level, direction);
	related_cell[8] = XYZToOctreeidx(x - 2, y - 0, z, level, direction);
	related_cell[9] = XYZToOctreeidx(x - 1, y - 0, z, level, direction);
	related_cell[10] = XYZToOctreeidx(x - 0, y - 0, z, level, direction);
	related_cell[11] = XYZToOctreeidx(x + 1, y - 0, z, level, direction);
	related_cell[12] = XYZToOctreeidx(x - 2, y + 1, z, level, direction);
	related_cell[13] = XYZToOctreeidx(x - 1, y + 1, z, level, direction);
	related_cell[14] = XYZToOctreeidx(x - 0, y + 1, z, level, direction);
	related_cell[15] = XYZToOctreeidx(x + 1, y + 1, z, level, direction);

	related_cell[16] = XYZToOctreeidx(x / 2 - 1, y / 2 - 1, z / 2 - 1, level - 1, direction);
	related_cell[17] = XYZToOctreeidx(x / 2, y / 2 - 1, z / 2 - 1, level - 1, direction);
	related_cell[18] = XYZToOctreeidx(x / 2 - 1, y / 2, z / 2 - 1, level - 1, direction);
	related_cell[19] = XYZToOctreeidx(x / 2, y / 2, z / 2 - 1, level - 1, direction);

	double node_coodinate[3];

	TwentyOneVertices(related_cell[0], node_coodinate, 100, direction);
	hexVerts[vtxIdxArray[related_cell[0]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[0]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[0]]].ParaPos[2] = node_coodinate[2];

	if (dualVertexOnce[related_cell[1]] == -1)
	{
		TwentyOneVertices(related_cell[1], node_coodinate, 101, direction);
		hexVerts[vtxIdxArray[related_cell[1]]].ParaPos[0] = node_coodinate[0];
		hexVerts[vtxIdxArray[related_cell[1]]].ParaPos[1] = node_coodinate[1];
		hexVerts[vtxIdxArray[related_cell[1]]].ParaPos[2] = node_coodinate[2];
	}

	if (dualVertexOnce[related_cell[2]] == -1)
	{
		TwentyOneVertices(related_cell[2], node_coodinate, 102, direction);
		hexVerts[vtxIdxArray[related_cell[2]]].ParaPos[0] = node_coodinate[0];
		hexVerts[vtxIdxArray[related_cell[2]]].ParaPos[1] = node_coodinate[1];
		hexVerts[vtxIdxArray[related_cell[2]]].ParaPos[2] = node_coodinate[2];
	}

	TwentyOneVertices(related_cell[3], node_coodinate, 103, direction);
	hexVerts[vtxIdxArray[related_cell[3]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[3]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[3]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[4], node_coodinate, 1104, direction);
	hexVerts[vtxIdxArray[related_cell[4]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[4]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[4]]].ParaPos[2] = node_coodinate[2];
	dualVertexOnce[related_cell[4]] = 1;

	TwentyOneVertices(related_cell[5], node_coodinate, 105, direction);
	hexVerts[vtxIdxArray[related_cell[5]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[5]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[5]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[6], node_coodinate, 106, direction);
	hexVerts[vtxIdxArray[related_cell[6]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[6]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[6]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[7], node_coodinate, 1107, direction);
	hexVerts[vtxIdxArray[related_cell[7]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[7]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[7]]].ParaPos[2] = node_coodinate[2];
	dualVertexOnce[related_cell[7]] = 1;

	TwentyOneVertices(related_cell[8], node_coodinate, 1108, direction);
	hexVerts[vtxIdxArray[related_cell[8]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[8]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[8]]].ParaPos[2] = node_coodinate[2];
	dualVertexOnce[related_cell[8]] = 1;

	TwentyOneVertices(related_cell[9], node_coodinate, 109, direction);
	hexVerts[vtxIdxArray[related_cell[9]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[9]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[9]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[10], node_coodinate, 110, direction);
	hexVerts[vtxIdxArray[related_cell[10]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[10]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[10]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[11], node_coodinate, 1111, direction);
	hexVerts[vtxIdxArray[related_cell[11]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[11]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[11]]].ParaPos[2] = node_coodinate[2];
	dualVertexOnce[related_cell[11]] = 1;

	TwentyOneVertices(related_cell[12], node_coodinate, 112, direction);
	hexVerts[vtxIdxArray[related_cell[12]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[12]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[12]]].ParaPos[2] = node_coodinate[2];

	if (dualVertexOnce[related_cell[13]] == -1)
	{
		TwentyOneVertices(related_cell[13], node_coodinate, 113, direction);
		hexVerts[vtxIdxArray[related_cell[13]]].ParaPos[0] = node_coodinate[0];
		hexVerts[vtxIdxArray[related_cell[13]]].ParaPos[1] = node_coodinate[1];
		hexVerts[vtxIdxArray[related_cell[13]]].ParaPos[2] = node_coodinate[2];
	}

	if (dualVertexOnce[related_cell[14]] == -1)
	{
		TwentyOneVertices(related_cell[14], node_coodinate, 114, direction);
		hexVerts[vtxIdxArray[related_cell[14]]].ParaPos[0] = node_coodinate[0];
		hexVerts[vtxIdxArray[related_cell[14]]].ParaPos[1] = node_coodinate[1];
		hexVerts[vtxIdxArray[related_cell[14]]].ParaPos[2] = node_coodinate[2];
	}

	TwentyOneVertices(related_cell[15], node_coodinate, 115, direction);
	hexVerts[vtxIdxArray[related_cell[15]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[15]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[15]]].ParaPos[2] = node_coodinate[2];

	//first hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[16]]);
	hexIdx.push_back(vtxIdxArray[related_cell[17]]);
	hexIdx.push_back(vtxIdxArray[related_cell[19]]);
	hexIdx.push_back(vtxIdxArray[related_cell[18]]);
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[15]]);
	hexIdx.push_back(vtxIdxArray[related_cell[12]]);
	//second hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[1]]);
	hexIdx.push_back(vtxIdxArray[related_cell[2]]);
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);
	hexIdx.push_back(vtxIdxArray[related_cell[5]]);

	//third hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);
	hexIdx.push_back(vtxIdxArray[related_cell[5]]);
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);
	hexIdx.push_back(vtxIdxArray[related_cell[10]]);
	hexIdx.push_back(vtxIdxArray[related_cell[9]]);

	//fourth hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	hexIdx.push_back(vtxIdxArray[related_cell[15]]);
	hexIdx.push_back(vtxIdxArray[related_cell[12]]);
	hexIdx.push_back(vtxIdxArray[related_cell[9]]);
	hexIdx.push_back(vtxIdxArray[related_cell[10]]);
	hexIdx.push_back(vtxIdxArray[related_cell[14]]);
	hexIdx.push_back(vtxIdxArray[related_cell[13]]);

	//fifth hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[15]]);
	hexIdx.push_back(vtxIdxArray[related_cell[12]]);
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);

}

void CVTBasedPolycube::AddFiveHexTypeOneFirst(int x, int y, int z, int level, int num_hexa, int direction)
{
	int related_cell[10];

	related_cell[0] = XYZToOctreeidx(x * 2 - 1, 2 * y + 1, 2 * z - 1, level + 1, direction);
	related_cell[1] = XYZToOctreeidx(x * 2 - 1, 2 * y - 0, 2 * z - 1, level + 1, direction);
	related_cell[2] = XYZToOctreeidx(x * 2 - 1, 2 * y - 1, 2 * z - 1, level + 1, direction);
	related_cell[3] = XYZToOctreeidx(x * 2 - 1, 2 * y - 2, 2 * z - 1, level + 1, direction);

	related_cell[4] = XYZToOctreeidx(x, y, z - 1, level, direction);
	related_cell[5] = XYZToOctreeidx(x, y - 1, z - 1, level, direction);
	related_cell[6] = XYZToOctreeidx(x - 1, y, z, level, direction);
	related_cell[7] = XYZToOctreeidx(x - 1, y - 1, z, level, direction);
	related_cell[8] = XYZToOctreeidx(x, y, z, level, direction);
	related_cell[9] = XYZToOctreeidx(x, y - 1, z, level, direction);

	double node_coodinate[3];

	//first hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[5]]);
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[9]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);

}

void CVTBasedPolycube::AddFourHexTypeOneSecond(int x, int y, int z, int level, int num_hexa, int direction)
{
	int related_cell[12];

	related_cell[0] = XYZToOctreeidx(x * 2 - 1, 2 * y + 1, 2 * z - 1, level + 1, direction);
	related_cell[1] = XYZToOctreeidx(x * 2 - 1, 2 * y - 0, 2 * z - 1, level + 1, direction);
	related_cell[2] = XYZToOctreeidx(x * 2 - 1, 2 * y - 1, 2 * z - 1, level + 1, direction);
	related_cell[3] = XYZToOctreeidx(x * 2 - 1, 2 * y - 2, 2 * z - 1, level + 1, direction);

	related_cell[4] = XYZToOctreeidx(x * 2, 2 * y + 1, 2 * z - 1, level + 1, direction);
	related_cell[5] = XYZToOctreeidx(x * 2, 2 * y - 0, 2 * z - 1, level + 1, direction);
	related_cell[6] = XYZToOctreeidx(x * 2, 2 * y - 1, 2 * z - 1, level + 1, direction);
	related_cell[7] = XYZToOctreeidx(x * 2, 2 * y - 2, 2 * z - 1, level + 1, direction);

	related_cell[8] = XYZToOctreeidx(x - 1, y, z, level, direction);
	related_cell[9] = XYZToOctreeidx(x - 1, y - 1, z, level, direction);
	related_cell[10] = XYZToOctreeidx(x, y, z, level, direction);
	related_cell[11] = XYZToOctreeidx(x, y - 1, z, level, direction);

	double node_coodinate[3];

	//first hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[1]]);
	hexIdx.push_back(vtxIdxArray[related_cell[2]]);
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);
	hexIdx.push_back(vtxIdxArray[related_cell[5]]);
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);

	//second hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);
	hexIdx.push_back(vtxIdxArray[related_cell[9]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	hexIdx.push_back(vtxIdxArray[related_cell[10]]);
}

void CVTBasedPolycube::AddFourHexTypeOneThird(int x, int y, int z, int level, int num_hexa, int direction)
{
	int related_cell[14];

	related_cell[0] = XYZToOctreeidx(x - 1, y + 1, z - 1, level, direction);
	related_cell[1] = XYZToOctreeidx(x - 1, y - 0, z - 1, level, direction);
	related_cell[2] = XYZToOctreeidx(x - 1, y - 1, z - 1, level, direction);
	related_cell[3] = XYZToOctreeidx(x - 1, y - 2, z - 1, level, direction);

	related_cell[4] = XYZToOctreeidx(x, y + 1, z - 1, level, direction);
	related_cell[5] = XYZToOctreeidx(x, y - 0, z - 1, level, direction);
	related_cell[6] = XYZToOctreeidx(x, y - 1, z - 1, level, direction);
	related_cell[7] = XYZToOctreeidx(x, y - 2, z - 1, level, direction);

	related_cell[8] = XYZToOctreeidx(x / 2 - 1, y / 2, z / 2, level - 1, direction);
	related_cell[9] = XYZToOctreeidx(x / 2 - 1, y / 2 - 1, z / 2, level - 1, direction);

	related_cell[10] = XYZToOctreeidx(x, y + 1, z, level, direction);
	related_cell[11] = XYZToOctreeidx(x, y - 0, z, level, direction);
	related_cell[12] = XYZToOctreeidx(x, y - 1, z, level, direction);
	related_cell[13] = XYZToOctreeidx(x, y - 2, z, level, direction);

	double node_coodinate[3];

	TwentyOneVertices(related_cell[4], node_coodinate, 10004, direction);
	hexVerts[vtxIdxArray[related_cell[4]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[4]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[4]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[5], node_coodinate, 10005, direction);
	hexVerts[vtxIdxArray[related_cell[5]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[5]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[5]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[6], node_coodinate, 10006, direction);
	hexVerts[vtxIdxArray[related_cell[6]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[6]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[6]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[7], node_coodinate, 10007, direction);
	hexVerts[vtxIdxArray[related_cell[7]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[7]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[7]]].ParaPos[2] = node_coodinate[2];

	//first hex mesh
	//hexIdx.push_back(vtxIdxArray[related_cell[5]]);
	//hexIdx.push_back(vtxIdxArray[related_cell[6]]);
	//hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	//hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	//hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	//hexIdx.push_back(vtxIdxArray[related_cell[12]]);
	//hexIdx.push_back(vtxIdxArray[related_cell[13]]);
	//hexIdx.push_back(vtxIdxArray[related_cell[10]]);

	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);
	hexIdx.push_back(vtxIdxArray[related_cell[5]]);
	hexIdx.push_back(vtxIdxArray[related_cell[10]]);
	hexIdx.push_back(vtxIdxArray[related_cell[13]]);
	hexIdx.push_back(vtxIdxArray[related_cell[12]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);

	//first hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[1]]);
	hexIdx.push_back(vtxIdxArray[related_cell[2]]);
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);
	hexIdx.push_back(vtxIdxArray[related_cell[5]]);
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);

	//first hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);
	hexIdx.push_back(vtxIdxArray[related_cell[9]]);
	hexIdx.push_back(vtxIdxArray[related_cell[13]]);
	hexIdx.push_back(vtxIdxArray[related_cell[10]]);

}

void CVTBasedPolycube::AddFiveHexTypeOneFourth(int x, int y, int z, int level, int num_hexa, int direction)
{
	int related_cell[12];

	related_cell[0] = XYZToOctreeidx(x - 1, y + 1, z - 1, level, direction);
	related_cell[1] = XYZToOctreeidx(x - 1, y - 0, z - 1, level, direction);
	related_cell[2] = XYZToOctreeidx(x - 1, y - 1, z - 1, level, direction);
	related_cell[3] = XYZToOctreeidx(x - 1, y - 2, z - 1, level, direction);

	related_cell[4] = XYZToOctreeidx(x / 2, y / 2, z / 2 - 1, level - 1, direction);
	related_cell[5] = XYZToOctreeidx(x / 2, y / 2 - 1, z / 2 - 1, level - 1, direction);
	related_cell[6] = XYZToOctreeidx(x / 2 - 1, y / 2, z / 2, level - 1, direction);
	related_cell[7] = XYZToOctreeidx(x / 2 - 1, y / 2 - 1, z / 2, level - 1, direction);

	related_cell[8] = XYZToOctreeidx(x, y + 1, z, level, direction);
	related_cell[9] = XYZToOctreeidx(x, y - 0, z, level, direction);
	related_cell[10] = XYZToOctreeidx(x, y - 1, z, level, direction);
	related_cell[11] = XYZToOctreeidx(x, y - 2, z, level, direction);

	double node_coodinate[3];

	//first hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[5]]);
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);

}

void CVTBasedPolycube::AddFiveHexTypeOneFifth(int x, int y, int z, int level, int num_hexa, int direction)
{
	int related_cell[10];

	related_cell[0] = XYZToOctreeidx(x - 1, y, z - 1, level, direction);
	related_cell[1] = XYZToOctreeidx(x - 1, y - 1, z - 1, level, direction);
	related_cell[2] = XYZToOctreeidx(x, y, z - 1, level, direction);
	related_cell[3] = XYZToOctreeidx(x, y - 1, z - 1, level, direction);

	related_cell[4] = XYZToOctreeidx(x * 2 - 1, 2 * y + 1, 2 * z, level + 1, direction);
	related_cell[5] = XYZToOctreeidx(x * 2 - 1, 2 * y - 0, 2 * z, level + 1, direction);
	related_cell[6] = XYZToOctreeidx(x * 2 - 1, 2 * y - 1, 2 * z, level + 1, direction);
	related_cell[7] = XYZToOctreeidx(x * 2 - 1, 2 * y - 2, 2 * z, level + 1, direction);

	related_cell[8] = XYZToOctreeidx(x, y, z, level, direction);
	related_cell[9] = XYZToOctreeidx(x, y - 1, z, level, direction);


	double node_coodinate[3];

	//first hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[1]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[2]]);
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[9]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);

}

void CVTBasedPolycube::AddFourHexTypeOneSixth(int x, int y, int z, int level, int num_hexa, int direction)
{

	int related_cell[12];

	related_cell[0] = XYZToOctreeidx(x / 2 - 1, y / 2, z / 2 - 1, level - 1, direction);
	related_cell[1] = XYZToOctreeidx(x / 2 - 1, y / 2 - 1, z / 2 - 1, level - 1, direction);
	related_cell[2] = XYZToOctreeidx(x / 2, y / 2, z / 2 - 1, level - 1, direction);
	related_cell[3] = XYZToOctreeidx(x / 2, y / 2 - 1, z / 2 - 1, level - 1, direction);

	related_cell[4] = XYZToOctreeidx(x - 1, y + 1, z, level, direction);
	related_cell[5] = XYZToOctreeidx(x - 1, y - 0, z, level, direction);
	related_cell[6] = XYZToOctreeidx(x - 1, y - 1, z, level, direction);
	related_cell[7] = XYZToOctreeidx(x - 1, y - 2, z, level, direction);
	related_cell[8] = XYZToOctreeidx(x, y + 1, z, level, direction);
	related_cell[9] = XYZToOctreeidx(x, y - 0, z, level, direction);
	related_cell[10] = XYZToOctreeidx(x, y - 1, z, level, direction);
	related_cell[11] = XYZToOctreeidx(x, y - 2, z, level, direction);

	double node_coodinate[3];

	//first hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[1]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[2]]);
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);

	//second hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);
	hexIdx.push_back(vtxIdxArray[related_cell[5]]);
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);
	hexIdx.push_back(vtxIdxArray[related_cell[10]]);
	hexIdx.push_back(vtxIdxArray[related_cell[9]]);

}

void CVTBasedPolycube::AddFourHexTypeOneSeventh(int x, int y, int z, int level, int num_hexa, int direction)
{
	int related_cell[14];

	related_cell[0] = XYZToOctreeidx(x / 2 - 1, y / 2 - 0, z / 2 - 1, level - 1, direction);
	related_cell[1] = XYZToOctreeidx(x / 2 - 1, y / 2 - 1, z / 2 - 1, level - 1, direction);

	related_cell[2] = XYZToOctreeidx(x, y + 1, z - 1, level, direction);
	related_cell[3] = XYZToOctreeidx(x, y - 0, z - 1, level, direction);
	related_cell[4] = XYZToOctreeidx(x, y - 1, z - 1, level, direction);
	related_cell[5] = XYZToOctreeidx(x, y - 2, z - 1, level, direction);
	related_cell[6] = XYZToOctreeidx(x - 1, y + 1, z, level, direction);
	related_cell[7] = XYZToOctreeidx(x - 1, y - 0, z, level, direction);
	related_cell[8] = XYZToOctreeidx(x - 1, y - 1, z, level, direction);
	related_cell[9] = XYZToOctreeidx(x - 1, y - 2, z, level, direction);
	related_cell[10] = XYZToOctreeidx(x, y + 1, z, level, direction);
	related_cell[11] = XYZToOctreeidx(x, y - 0, z, level, direction);
	related_cell[12] = XYZToOctreeidx(x, y - 1, z, level, direction);
	related_cell[13] = XYZToOctreeidx(x, y - 2, z, level, direction);

	double node_coodinate[3];

	TwentyOneVertices(related_cell[10], node_coodinate, 10012, direction);
	hexVerts[vtxIdxArray[related_cell[10]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[10]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[10]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[11], node_coodinate, 10013, direction);
	hexVerts[vtxIdxArray[related_cell[11]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[11]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[11]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[12], node_coodinate, 10014, direction);
	hexVerts[vtxIdxArray[related_cell[12]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[12]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[12]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[13], node_coodinate, 10015, direction);
	hexVerts[vtxIdxArray[related_cell[13]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[13]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[13]]].ParaPos[2] = node_coodinate[2];

	//first hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[1]]);
	hexIdx.push_back(vtxIdxArray[related_cell[5]]);
	hexIdx.push_back(vtxIdxArray[related_cell[2]]);
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);
	hexIdx.push_back(vtxIdxArray[related_cell[9]]);
	hexIdx.push_back(vtxIdxArray[related_cell[13]]);
	hexIdx.push_back(vtxIdxArray[related_cell[10]]);

	//second hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[2]]);
	hexIdx.push_back(vtxIdxArray[related_cell[5]]);
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[10]]);
	hexIdx.push_back(vtxIdxArray[related_cell[13]]);
	hexIdx.push_back(vtxIdxArray[related_cell[12]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);

	//third hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);
	hexIdx.push_back(vtxIdxArray[related_cell[9]]);
	hexIdx.push_back(vtxIdxArray[related_cell[13]]);
	hexIdx.push_back(vtxIdxArray[related_cell[10]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);
	hexIdx.push_back(vtxIdxArray[related_cell[12]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);

}

void CVTBasedPolycube::AddFourHexTypeOneEighth(int x, int y, int z, int level, int num_hexa, int direction)
{
	int related_cell[12];

	related_cell[0] = XYZToOctreeidx(x * 2 - 1, y * 2 + 1, z * 2 - 1, level + 1, direction);
	related_cell[1] = XYZToOctreeidx(x * 2 - 1, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[2] = XYZToOctreeidx(x * 2 - 1, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[3] = XYZToOctreeidx(x * 2 - 1, y * 2 - 2, z * 2 - 1, level + 1, direction);

	related_cell[4] = XYZToOctreeidx(x, y - 0, z - 1, level, direction);
	related_cell[5] = XYZToOctreeidx(x, y - 1, z - 1, level, direction);

	related_cell[6] = XYZToOctreeidx(x * 2 - 1, y * 2 + 1, z * 2, level + 1, direction);
	related_cell[7] = XYZToOctreeidx(x * 2 - 1, y * 2 - 0, z * 2, level + 1, direction);
	related_cell[8] = XYZToOctreeidx(x * 2 - 1, y * 2 - 1, z * 2, level + 1, direction);
	related_cell[9] = XYZToOctreeidx(x * 2 - 1, y * 2 - 2, z * 2, level + 1, direction);

	related_cell[10] = XYZToOctreeidx(x, y - 0, z, level, direction);
	related_cell[11] = XYZToOctreeidx(x, y - 1, z, level, direction);

	double node_coodinate[3];

	//first hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[5]]);
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);
	hexIdx.push_back(vtxIdxArray[related_cell[9]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	hexIdx.push_back(vtxIdxArray[related_cell[10]]);

	//second hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[1]]);
	hexIdx.push_back(vtxIdxArray[related_cell[2]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);
	hexIdx.push_back(vtxIdxArray[related_cell[9]]);
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);
}

void CVTBasedPolycube::AddFourHexTypeOneNinth(int x, int y, int z, int level, int num_hexa, int direction)
{

	int related_cell[14];

	related_cell[0] = XYZToOctreeidx(x * 2 - 1, y * 2 + 1, z * 2 - 1, level + 1, direction);
	related_cell[1] = XYZToOctreeidx(x * 2 - 1, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[2] = XYZToOctreeidx(x * 2 - 1, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[3] = XYZToOctreeidx(x * 2 - 1, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[4] = XYZToOctreeidx(x * 2, y * 2 + 1, z * 2 - 1, level + 1, direction);
	related_cell[5] = XYZToOctreeidx(x * 2, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[6] = XYZToOctreeidx(x * 2, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[7] = XYZToOctreeidx(x * 2, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[8] = XYZToOctreeidx(x * 2 - 1, y * 2 + 1, z * 2, level + 1, direction);
	related_cell[9] = XYZToOctreeidx(x * 2 - 1, y * 2 - 0, z * 2, level + 1, direction);
	related_cell[10] = XYZToOctreeidx(x * 2 - 1, y * 2 - 1, z * 2, level + 1, direction);
	related_cell[11] = XYZToOctreeidx(x * 2 - 1, y * 2 - 2, z * 2, level + 1, direction);

	related_cell[12] = XYZToOctreeidx(x, y - 0, z, level, direction);
	related_cell[13] = XYZToOctreeidx(x, y - 1, z, level, direction);

	double node_coodinate[3];

	TwentyOneVertices(related_cell[0], node_coodinate, 10000, direction);
	hexVerts[vtxIdxArray[related_cell[0]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[0]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[0]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[1], node_coodinate, 10001, direction);
	hexVerts[vtxIdxArray[related_cell[1]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[1]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[1]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[2], node_coodinate, 10002, direction);
	hexVerts[vtxIdxArray[related_cell[2]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[2]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[2]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[3], node_coodinate, 10003, direction);
	hexVerts[vtxIdxArray[related_cell[3]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[3]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[3]]].ParaPos[2] = node_coodinate[2];

	//first hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[1]]);
	hexIdx.push_back(vtxIdxArray[related_cell[2]]);
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);
	hexIdx.push_back(vtxIdxArray[related_cell[5]]);
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);

	//second hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[1]]);
	hexIdx.push_back(vtxIdxArray[related_cell[2]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[9]]);
	hexIdx.push_back(vtxIdxArray[related_cell[10]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);

	//third hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	hexIdx.push_back(vtxIdxArray[related_cell[13]]);
	hexIdx.push_back(vtxIdxArray[related_cell[12]]);
}

void CVTBasedPolycube::AddFourHexTypeOneTenth(int x, int y, int z, int level, int num_hexa, int direction)
{

	int related_cell[14];

	related_cell[0] = XYZToOctreeidx(x - 1, y + 1, z - 1, level, direction);
	related_cell[1] = XYZToOctreeidx(x - 1, y - 0, z - 1, level, direction);
	related_cell[2] = XYZToOctreeidx(x - 1, y - 1, z - 1, level, direction);
	related_cell[3] = XYZToOctreeidx(x - 1, y - 2, z - 1, level, direction);

	related_cell[4] = XYZToOctreeidx(x / 2, y / 2 - 0, z / 2 - 1, level - 1, direction);
	related_cell[5] = XYZToOctreeidx(x / 2, y / 2 - 1, z / 2 - 1, level - 1, direction);

	related_cell[6] = XYZToOctreeidx(x - 1, y + 1, z, level, direction);
	related_cell[7] = XYZToOctreeidx(x - 1, y - 0, z, level, direction);
	related_cell[8] = XYZToOctreeidx(x - 1, y - 1, z, level, direction);
	related_cell[9] = XYZToOctreeidx(x - 1, y - 2, z, level, direction);
	related_cell[10] = XYZToOctreeidx(x, y + 1, z, level, direction);
	related_cell[11] = XYZToOctreeidx(x, y - 0, z, level, direction);
	related_cell[12] = XYZToOctreeidx(x, y - 1, z, level, direction);
	related_cell[13] = XYZToOctreeidx(x, y - 2, z, level, direction);

	double node_coodinate[3];

	TwentyOneVertices(related_cell[6], node_coodinate, 10008, direction);
	hexVerts[vtxIdxArray[related_cell[6]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[6]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[6]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[7], node_coodinate, 10009, direction);
	hexVerts[vtxIdxArray[related_cell[7]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[7]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[7]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[8], node_coodinate, 10010, direction);
	hexVerts[vtxIdxArray[related_cell[8]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[8]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[8]]].ParaPos[2] = node_coodinate[2];

	TwentyOneVertices(related_cell[9], node_coodinate, 10011, direction);
	hexVerts[vtxIdxArray[related_cell[9]]].ParaPos[0] = node_coodinate[0];
	hexVerts[vtxIdxArray[related_cell[9]]].ParaPos[1] = node_coodinate[1];
	hexVerts[vtxIdxArray[related_cell[9]]].ParaPos[2] = node_coodinate[2];

	//first hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[1]]);
	hexIdx.push_back(vtxIdxArray[related_cell[2]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);
	hexIdx.push_back(vtxIdxArray[related_cell[9]]);
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);

	//second hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[5]]);
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);
	hexIdx.push_back(vtxIdxArray[related_cell[9]]);
	hexIdx.push_back(vtxIdxArray[related_cell[13]]);
	hexIdx.push_back(vtxIdxArray[related_cell[10]]);

	//third hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);
	hexIdx.push_back(vtxIdxArray[related_cell[9]]);
	hexIdx.push_back(vtxIdxArray[related_cell[13]]);
	hexIdx.push_back(vtxIdxArray[related_cell[10]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);
	hexIdx.push_back(vtxIdxArray[related_cell[12]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);

}

void CVTBasedPolycube::AddFiveHexTypeOneEleventh(int x, int y, int z, int level, int num_hexa, int direction)
{
	int related_cell[12];

	related_cell[0] = XYZToOctreeidx(x - 1, y - 0, z - 1, level, direction);
	related_cell[1] = XYZToOctreeidx(x - 1, y - 1, z - 1, level, direction);

	related_cell[2] = XYZToOctreeidx(x * 2, y * 2 + 1, z * 2 - 1, level + 1, direction);
	related_cell[3] = XYZToOctreeidx(x * 2, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[4] = XYZToOctreeidx(x * 2, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[5] = XYZToOctreeidx(x * 2, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[6] = XYZToOctreeidx(x * 2 - 1, y * 2 + 1, z * 2, level + 1, direction);
	related_cell[7] = XYZToOctreeidx(x * 2 - 1, y * 2 - 0, z * 2, level + 1, direction);
	related_cell[8] = XYZToOctreeidx(x * 2 - 1, y * 2 - 1, z * 2, level + 1, direction);
	related_cell[9] = XYZToOctreeidx(x * 2 - 1, y * 2 - 2, z * 2, level + 1, direction);

	related_cell[10] = XYZToOctreeidx(x, y - 0, z, level, direction);
	related_cell[11] = XYZToOctreeidx(x, y - 1, z, level, direction);

	double node_coodinate[3];

	//first hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[1]]);
	hexIdx.push_back(vtxIdxArray[related_cell[5]]);
	hexIdx.push_back(vtxIdxArray[related_cell[2]]);
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);
	hexIdx.push_back(vtxIdxArray[related_cell[9]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	hexIdx.push_back(vtxIdxArray[related_cell[10]]);

}

void CVTBasedPolycube::AddFiveHexTypeOneTwelfth(int x, int y, int z, int level, int num_hexa, int direction)
{
	int related_cell[10];

	related_cell[0] = XYZToOctreeidx(x - 1, y, z - 1, level, direction);
	related_cell[1] = XYZToOctreeidx(x - 1, y - 1, z - 1, level, direction);

	related_cell[2] = XYZToOctreeidx(x * 2, 2 * y + 1, 2 * z - 1, level + 1, direction);
	related_cell[3] = XYZToOctreeidx(x * 2, 2 * y - 0, 2 * z - 1, level + 1, direction);
	related_cell[4] = XYZToOctreeidx(x * 2, 2 * y - 1, 2 * z - 1, level + 1, direction);
	related_cell[5] = XYZToOctreeidx(x * 2, 2 * y - 2, 2 * z - 1, level + 1, direction);

	related_cell[6] = XYZToOctreeidx(x - 1, y, z, level, direction);
	related_cell[7] = XYZToOctreeidx(x - 1, y - 1, z, level, direction);
	related_cell[8] = XYZToOctreeidx(x, y, z, level, direction);
	related_cell[9] = XYZToOctreeidx(x, y - 1, z, level, direction);

	double node_coodinate[3];

	//first hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[1]]);
	hexIdx.push_back(vtxIdxArray[related_cell[5]]);
	hexIdx.push_back(vtxIdxArray[related_cell[2]]);
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[9]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);
}

void CVTBasedPolycube::AddFiveHexTypeOneThirteenth(int x, int y, int z, int level, int num_hexa, int direction)
{
	int related_cell[10];

	related_cell[0] = XYZToOctreeidx(x / 2 - 1, y / 2, z / 2 - 1, level - 1, direction);
	related_cell[1] = XYZToOctreeidx(x / 2 - 1, y / 2 - 1, z / 2 - 1, level - 1, direction);
	related_cell[2] = XYZToOctreeidx(x / 2, y / 2, z / 2 - 1, level - 1, direction);
	related_cell[3] = XYZToOctreeidx(x / 2, y / 2 - 1, z / 2 - 1, level - 1, direction);
	related_cell[4] = XYZToOctreeidx(x / 2 - 1, y / 2, z / 2, level - 1, direction);
	related_cell[5] = XYZToOctreeidx(x / 2 - 1, y / 2 - 1, z / 2, level - 1, direction);

	related_cell[6] = XYZToOctreeidx(x, y + 1, z, level, direction);
	related_cell[7] = XYZToOctreeidx(x, y - 0, z, level, direction);
	related_cell[8] = XYZToOctreeidx(x, y - 1, z, level, direction);
	related_cell[9] = XYZToOctreeidx(x, y - 2, z, level, direction);

	double node_coodinate[3];

	//first hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[1]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[2]]);
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[5]]);
	hexIdx.push_back(vtxIdxArray[related_cell[9]]);
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);

}

void CVTBasedPolycube::AddFourHexTypeOneFourteenth(int x, int y, int z, int level, int num_hexa, int direction)
{
	int related_cell[12];

	related_cell[0] = XYZToOctreeidx(x / 2 - 1, y / 2, z / 2 - 1, level - 1, direction);
	related_cell[1] = XYZToOctreeidx(x / 2 - 1, y / 2 - 1, z / 2 - 1, level - 1, direction);

	related_cell[2] = XYZToOctreeidx(x, y + 1, z - 1, level, direction);
	related_cell[3] = XYZToOctreeidx(x, y - 0, z - 1, level, direction);
	related_cell[4] = XYZToOctreeidx(x, y - 1, z - 1, level, direction);
	related_cell[5] = XYZToOctreeidx(x, y - 2, z - 1, level, direction);

	related_cell[6] = XYZToOctreeidx(x / 2 - 1, y / 2, z / 2, level - 1, direction);
	related_cell[7] = XYZToOctreeidx(x / 2 - 1, y / 2 - 1, z / 2, level - 1, direction);

	related_cell[8] = XYZToOctreeidx(x, y + 1, z, level, direction);
	related_cell[9] = XYZToOctreeidx(x, y - 0, z, level, direction);
	related_cell[10] = XYZToOctreeidx(x, y - 1, z, level, direction);
	related_cell[11] = XYZToOctreeidx(x, y - 2, z, level, direction);

	double node_coodinate[3];

	//first hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[0]]);
	hexIdx.push_back(vtxIdxArray[related_cell[1]]);
	hexIdx.push_back(vtxIdxArray[related_cell[5]]);
	hexIdx.push_back(vtxIdxArray[related_cell[2]]);
	hexIdx.push_back(vtxIdxArray[related_cell[6]]);
	hexIdx.push_back(vtxIdxArray[related_cell[7]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);

	//second hex mesh
	hexIdx.push_back(vtxIdxArray[related_cell[2]]);
	hexIdx.push_back(vtxIdxArray[related_cell[5]]);
	hexIdx.push_back(vtxIdxArray[related_cell[4]]);
	hexIdx.push_back(vtxIdxArray[related_cell[3]]);
	hexIdx.push_back(vtxIdxArray[related_cell[8]]);
	hexIdx.push_back(vtxIdxArray[related_cell[11]]);
	hexIdx.push_back(vtxIdxArray[related_cell[10]]);
	hexIdx.push_back(vtxIdxArray[related_cell[9]]);

}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//Marechal's method for Hex meshing

bool CVTBasedPolycube::AdaptiveHexMeshExtractionMarechal(const char *outputName)
{

	int i, j, k;
	int x, y, z, xx, yy, zz;
	//int cell_size;
	int level;
	int leafcell_idx;

	vector<int> eight_cells;
	Node tempVert;

	hexVerts.resize(octreeCellNum * 8); 
	hexIdxM.resize(octreeCellNum);

	//leafNum = nElement;
	vtxIdxArray.resize(octreeCellNum, -1);
	//dualVertexOnce.resize(octreeCellNum, -1);

	int num_hexa = 0;
	
	for (i = 0; i < nElement; i++)
	{
		leafcell_idx = Elements[i].OctreeID;
		vtxIdxArray[leafcell_idx] = i;
	}

	for (i = 0; i < nElement; i++)
	{

		leafcell_idx = Elements[i].OctreeID;

		if (leafcell_idx == level_id[OCTREE_MAX_LEVEL])
		{

			int index = Elements[i].NodeIndex[2];
			int eight_vert[8];
			//double tempCenter[3] = {0.f, 0.f, 0.f};

			if (Nodes[index].NeighborElement.size() == 8)
			{

				for (int l = 0; l < 8; l++)
				{

					int tempIndex = Nodes[index].NeighborElement[l];

					double tempCenter[3] = {0.f, 0.f, 0.f};
					double tempCenterReal[3] = {0.f, 0.f, 0.f};

					Node tempVertOne;
					for (int m = 0; m < 8; m++)
					{

						tempCenter[0] += 0.125 * Nodes[Elements[tempIndex].NodeIndex[m]].ParaPos[0];
						tempCenter[1] += 0.125 * Nodes[Elements[tempIndex].NodeIndex[m]].ParaPos[1];
						tempCenter[2] += 0.125 * Nodes[Elements[tempIndex].NodeIndex[m]].ParaPos[2];
					}

					for (int m = 0; m < 3; m++)
					{
						tempVertOne.ParaPos[m] = tempCenter[m];
					}

					for (int m = 0; m < 8; m++)
					{

						tempCenterReal[0] += 0.125 * Nodes[Elements[tempIndex].NodeIndex[m]].Coords[0];
						tempCenterReal[1] += 0.125 * Nodes[Elements[tempIndex].NodeIndex[m]].Coords[1];
						tempCenterReal[2] += 0.125 * Nodes[Elements[tempIndex].NodeIndex[m]].Coords[2];
					}

					for (int m = 0; m < 3; m++)
					{
						tempVertOne.Coords[m] = tempCenterReal[m];
					}

					CalculateCenterPoint(Elements[tempIndex], tempVertOne);

					//Necessary for sharp feature preservation, do not do it in Para space.
					for (int m = 0; m < 3; m++)
					{
						tempVertOne.ParaPos[m] = tempCenter[m];
					}

					for (int m = 0; m < 8; m++)
					{

						int position;

						if (Elements[tempIndex].NodeIndex[m] == index)
						{
							position = (m + 4) % 8; // get the correct position

							hexVerts[num_hexa * 8 + position].ParaPos[0] = tempVertOne.ParaPos[0];
							hexVerts[num_hexa * 8 + position].ParaPos[1] = tempVertOne.ParaPos[1];
							hexVerts[num_hexa * 8 + position].ParaPos[2] = tempVertOne.ParaPos[2];

							hexVerts[num_hexa * 8 + position].Coords[0] = tempVertOne.Coords[0];
							hexVerts[num_hexa * 8 + position].Coords[1] = tempVertOne.Coords[1];
							hexVerts[num_hexa * 8 + position].Coords[2] = tempVertOne.Coords[2];

						}


					}


					//////////////////////Not a good method
					/*if (tempCenter[0] < Nodes[index].ParaPos[0] && tempCenter[1] < Nodes[index].ParaPos[1] && tempCenter[2] < Nodes[index].ParaPos[2])
					{
						hexVerts[num_hexa * 8 + 0].ParaPos[0] = tempVertOne.ParaPos[0];
						hexVerts[num_hexa * 8 + 0].ParaPos[1] = tempVertOne.ParaPos[1];
						hexVerts[num_hexa * 8 + 0].ParaPos[2] = tempVertOne.ParaPos[2];

						hexVerts[num_hexa * 8 + 0].Coords[0] = tempVertOne.Coords[0];
						hexVerts[num_hexa * 8 + 0].Coords[1] = tempVertOne.Coords[1];
						hexVerts[num_hexa * 8 + 0].Coords[2] = tempVertOne.Coords[2];
					}
					else if (tempCenter[0] > Nodes[index].ParaPos[0] && tempCenter[1] < Nodes[index].ParaPos[1] && tempCenter[2] < Nodes[index].ParaPos[2])
					{
						hexVerts[num_hexa * 8 + 1].ParaPos[0] = tempVertOne.ParaPos[0];
						hexVerts[num_hexa * 8 + 1].ParaPos[1] = tempVertOne.ParaPos[1];
						hexVerts[num_hexa * 8 + 1].ParaPos[2] = tempVertOne.ParaPos[2];

						hexVerts[num_hexa * 8 + 1].Coords[0] = tempVertOne.Coords[0];
						hexVerts[num_hexa * 8 + 1].Coords[1] = tempVertOne.Coords[1];
						hexVerts[num_hexa * 8 + 1].Coords[2] = tempVertOne.Coords[2];

					}
					else if (tempCenter[0] > Nodes[index].ParaPos[0] && tempCenter[1] > Nodes[index].ParaPos[1] && tempCenter[2] < Nodes[index].ParaPos[2])
					{
						hexVerts[num_hexa * 8 + 2].ParaPos[0] = tempVertOne.ParaPos[0];
						hexVerts[num_hexa * 8 + 2].ParaPos[1] = tempVertOne.ParaPos[1];
						hexVerts[num_hexa * 8 + 2].ParaPos[2] = tempVertOne.ParaPos[2];

						hexVerts[num_hexa * 8 + 2].Coords[0] = tempVertOne.Coords[0];
						hexVerts[num_hexa * 8 + 2].Coords[1] = tempVertOne.Coords[1];
						hexVerts[num_hexa * 8 + 2].Coords[2] = tempVertOne.Coords[2];
					}
					else if (tempCenter[0] < Nodes[index].ParaPos[0] && tempCenter[1] > Nodes[index].ParaPos[1] && tempCenter[2] < Nodes[index].ParaPos[2])
					{
						hexVerts[num_hexa * 8 + 3].ParaPos[0] = tempVertOne.ParaPos[0];
						hexVerts[num_hexa * 8 + 3].ParaPos[1] = tempVertOne.ParaPos[1];
						hexVerts[num_hexa * 8 + 3].ParaPos[2] = tempVertOne.ParaPos[2];

						hexVerts[num_hexa * 8 + 3].Coords[0] = tempVertOne.Coords[0];
						hexVerts[num_hexa * 8 + 3].Coords[1] = tempVertOne.Coords[1];
						hexVerts[num_hexa * 8 + 3].Coords[2] = tempVertOne.Coords[2];
					}
					else if (tempCenter[0] < Nodes[index].ParaPos[0] && tempCenter[1] < Nodes[index].ParaPos[1] && tempCenter[2] > Nodes[index].ParaPos[2])
					{
						hexVerts[num_hexa * 8 + 4].ParaPos[0] = tempVertOne.ParaPos[0];
						hexVerts[num_hexa * 8 + 4].ParaPos[1] = tempVertOne.ParaPos[1];
						hexVerts[num_hexa * 8 + 4].ParaPos[2] = tempVertOne.ParaPos[2];

						hexVerts[num_hexa * 8 + 4].Coords[0] = tempVertOne.Coords[0];
						hexVerts[num_hexa * 8 + 4].Coords[1] = tempVertOne.Coords[1];
						hexVerts[num_hexa * 8 + 4].Coords[2] = tempVertOne.Coords[2];
					}
					else if (tempCenter[0] > Nodes[index].ParaPos[0] && tempCenter[1] < Nodes[index].ParaPos[1] && tempCenter[2] > Nodes[index].ParaPos[2])
					{
						hexVerts[num_hexa * 8 + 5].ParaPos[0] = tempVertOne.ParaPos[0];
						hexVerts[num_hexa * 8 + 5].ParaPos[1] = tempVertOne.ParaPos[1];
						hexVerts[num_hexa * 8 + 5].ParaPos[2] = tempVertOne.ParaPos[2];

						hexVerts[num_hexa * 8 + 5].Coords[0] = tempVertOne.Coords[0];
						hexVerts[num_hexa * 8 + 5].Coords[1] = tempVertOne.Coords[1];
						hexVerts[num_hexa * 8 + 5].Coords[2] = tempVertOne.Coords[2];
					}
					else if (tempCenter[0] > Nodes[index].ParaPos[0] && tempCenter[1] > Nodes[index].ParaPos[1] && tempCenter[2] > Nodes[index].ParaPos[2])
					{
						hexVerts[num_hexa * 8 + 6].ParaPos[0] = tempVertOne.ParaPos[0];
						hexVerts[num_hexa * 8 + 6].ParaPos[1] = tempVertOne.ParaPos[1];
						hexVerts[num_hexa * 8 + 6].ParaPos[2] = tempVertOne.ParaPos[2];

						hexVerts[num_hexa * 8 + 6].Coords[0] = tempVertOne.Coords[0];
						hexVerts[num_hexa * 8 + 6].Coords[1] = tempVertOne.Coords[1];
						hexVerts[num_hexa * 8 + 6].Coords[2] = tempVertOne.Coords[2];
					}
					else if (tempCenter[0] < Nodes[index].ParaPos[0] && tempCenter[1] > Nodes[index].ParaPos[1] && tempCenter[2] > Nodes[index].ParaPos[2])
					{
						hexVerts[num_hexa * 8 + 7].ParaPos[0] = tempVertOne.ParaPos[0];
						hexVerts[num_hexa * 8 + 7].ParaPos[1] = tempVertOne.ParaPos[1];
						hexVerts[num_hexa * 8 + 7].ParaPos[2] = tempVertOne.ParaPos[2];

						hexVerts[num_hexa * 8 + 7].Coords[0] = tempVertOne.Coords[0];
						hexVerts[num_hexa * 8 + 7].Coords[1] = tempVertOne.Coords[1];
						hexVerts[num_hexa * 8 + 7].Coords[2] = tempVertOne.Coords[2];
					}*/

				}

				for (int p = 0; p < 8; p++)
				{
					hexIdxM[num_hexa].push_back(num_hexa * 8 + p);
				}

				num_hexa++;
			}

			continue;

		}

		level = GetLevel(leafcell_idx);

		OctreeidxToXYZ(leafcell_idx, x, y, z, level);

		xx = x; yy = y; zz = z;

		int transition_type;

		if (IsRegularNode(x, y, z, level) == 1)
		{

			AddOneHexRegularMarechal(x, y, z, level, num_hexa);
			num_hexa++;

		}
		else if (IsIrregularNode(x, y, z, level, eight_cells) == 1)
		{
			AddOneHexIrregularMarechal(x, y, z, level, num_hexa, eight_cells);
			num_hexa++;
		}
		else
		{

			for (int direction = 0; direction < 3; direction++)
			{

				switch (direction)
				{
				case 0:
					x = xx; y = yy; z = zz;
					break;
				case 1:
					z = xx; x = yy; y = zz;
					break;
				case 2:
					y = xx; z = yy; x = zz;
					break;
				}

				transition_type = IsTransitionNodeMarechal(x, y, z, level, direction);

				if (transition_type != 0)
				{

					switch (transition_type)
					{

					case 1:

						AddThirteenHexTypeOneFirstMarechal(x, y, z, level, num_hexa, direction);
						num_hexa += 13;
						break;
					case 2:

						AddThirteenHexTypeOneSecondMarechal(x, y, z, level, num_hexa, direction);
						num_hexa += 13;
						break;
					case 3:

						AddThirteenHexTypeOneThirdMarechal(x, y, z, level, num_hexa, direction);
						num_hexa += 13;
						break;
					case 4:

						AddThirteenHexTypeOneFourthMarechal(x, y, z, level, num_hexa, direction);
						num_hexa += 13;
						break;
					case 5:

						AddThirteenHexTypeOneFifthMarechal(x, y, z, level, num_hexa, direction);
						num_hexa += 13;
						break;
					case 6:

						AddThirteenHexTypeOneSixthMarechal(x, y, z, level, num_hexa, direction);
						num_hexa += 13;
						break;
					case 7:

						AddThirteenHexTypeOneSeventhMarechal(x, y, z, level, num_hexa, direction);
						num_hexa += 13;
						break;
					case 8:

						AddThirteenHexTypeOneEighthMarechal(x, y, z, level, num_hexa, direction);
						num_hexa += 13;
						break;

					case 11:

						AddFiveHexTypeOneFirstMarechal(x, y, z, level, num_hexa, direction);
						num_hexa += 5;
						break;
					case 12:

						AddFourHexTypeOneSecondMarechal(x, y, z, level, num_hexa, direction);
						num_hexa += 4;
						break;
					case 13:

						AddFourHexTypeOneThirdMarechal(x, y, z, level, num_hexa, direction);
						num_hexa += 3;
						break;
					case 14:

						AddFiveHexTypeOneFourthMarechal(x, y, z, level, num_hexa, direction);
						num_hexa += 3;
						break;
					case 15:

						AddFiveHexTypeOneFifthMarechal(x, y, z, level, num_hexa, direction);
						num_hexa += 5;
						break;
					case 16:

						AddFourHexTypeOneSixthMarechal(x, y, z, level, num_hexa, direction);
						num_hexa += 4;
						break;
					case 17:

						AddFourHexTypeOneSeventhMarechal(x, y, z, level, num_hexa, direction);
						num_hexa += 3;
						break;
					case 18:

						AddFourHexTypeOneEighthMarechal(x, y, z, level, num_hexa, direction);
						num_hexa += 4;
						break;
					case 19:

						AddFourHexTypeOneNinthMarechal(x, y, z, level, num_hexa, direction);
						num_hexa += 3;
						break;

					case 110:

						AddFourHexTypeOneTenthMarechal(x, y, z, level, num_hexa, direction);
						num_hexa += 3;
						break;
					case 111:

						AddFiveHexTypeOneEleventhMarechal(x, y, z, level, num_hexa, direction);
						num_hexa += 3;
						break;
					case 112:

						AddFiveHexTypeOneTwelfthMarechal(x, y, z, level, num_hexa, direction);
						num_hexa += 5;
						break;
					case 113:

						AddFiveHexTypeOneThirteenthMarechal(x, y, z, level, num_hexa, direction);
						num_hexa += 5;
						break;
					case 114:

						AddFourHexTypeOneFourteenthMarechal(x, y, z, level, num_hexa, direction);
						num_hexa += 4;
						break;

					}

				}

			}

		}

	}

	///////////////////////////////////////////////////////////////////////////////////////////////////
	//output adaptive hex mesh
	numElems = num_hexa;

	numVerts = num_hexa * 8;

	adaptiveFinalHex.CreateNewMesh(HEXAHEDRON, numVerts, numElems);

	for (i = 0; i < numVerts; i += 8)
	{

		adaptiveFinalHex.vertex[i][0] = hexVerts[i].ParaPos[0];
		adaptiveFinalHex.vertex[i][1] = hexVerts[i].ParaPos[1];
		adaptiveFinalHex.vertex[i][2] = hexVerts[i].ParaPos[2];

		adaptiveFinalHex.vertex[i + 1][0] = hexVerts[i + 1].ParaPos[0];
		adaptiveFinalHex.vertex[i + 1][1] = hexVerts[i + 1].ParaPos[1];
		adaptiveFinalHex.vertex[i + 1][2] = hexVerts[i + 1].ParaPos[2];

		adaptiveFinalHex.vertex[i + 2][0] = hexVerts[i + 2].ParaPos[0];
		adaptiveFinalHex.vertex[i + 2][1] = hexVerts[i + 2].ParaPos[1];
		adaptiveFinalHex.vertex[i + 2][2] = hexVerts[i + 2].ParaPos[2];

		adaptiveFinalHex.vertex[i + 3][0] = hexVerts[i + 3].ParaPos[0];
		adaptiveFinalHex.vertex[i + 3][1] = hexVerts[i + 3].ParaPos[1];
		adaptiveFinalHex.vertex[i + 3][2] = hexVerts[i + 3].ParaPos[2];

		adaptiveFinalHex.vertex[i + 4][0] = hexVerts[i + 4].ParaPos[0];
		adaptiveFinalHex.vertex[i + 4][1] = hexVerts[i + 4].ParaPos[1];
		adaptiveFinalHex.vertex[i + 4][2] = hexVerts[i + 4].ParaPos[2];

		adaptiveFinalHex.vertex[i + 5][0] = hexVerts[i + 5].ParaPos[0];
		adaptiveFinalHex.vertex[i + 5][1] = hexVerts[i + 5].ParaPos[1];
		adaptiveFinalHex.vertex[i + 5][2] = hexVerts[i + 5].ParaPos[2];

		adaptiveFinalHex.vertex[i + 6][0] = hexVerts[i + 6].ParaPos[0];
		adaptiveFinalHex.vertex[i + 6][1] = hexVerts[i + 6].ParaPos[1];
		adaptiveFinalHex.vertex[i + 6][2] = hexVerts[i + 6].ParaPos[2];

		adaptiveFinalHex.vertex[i + 7][0] = hexVerts[i + 7].ParaPos[0];
		adaptiveFinalHex.vertex[i + 7][1] = hexVerts[i + 7].ParaPos[1];
		adaptiveFinalHex.vertex[i + 7][2] = hexVerts[i + 7].ParaPos[2];

	}

	for (i = 0; i < numElems; i++)
	{

		for (j = 0; j < 8; j++)
		{
			adaptiveFinalHex.element[i][j] = hexIdxM[i][j];
		}

	}

	adaptiveFinalHex.DeleteDuplicatedPoint();

	adaptiveFinalHex.Write("FinalPara_hex.raw");

	double DUP_ERR = 1.0e-6;

	for (i = 0; i < adaptiveFinalHex.vertexNumber; i++)
	{

		for (j = 0; j < numVerts; j++)
		{

			if (fabs(adaptiveFinalHex.vertex[i][0]-hexVerts[j].ParaPos[0])<DUP_ERR && fabs(adaptiveFinalHex.vertex[i][1]-hexVerts[j].ParaPos[1])<DUP_ERR && fabs(adaptiveFinalHex.vertex[i][2]-hexVerts[j].ParaPos[2])<DUP_ERR)
			{

				for (k = 0; k < 3; k++)
				{
					adaptiveFinalHex.vertex[i][k] = hexVerts[j].Coords[k];
				}

				break;
			}

		}

	}

	//Pillowing();

	adaptiveFinalHex.Write(outputName);

	return true;

}

int CVTBasedPolycube::IsTransitionNodeMarechal(int x, int y, int z, int level, int direction /* = 0 */)
{

	int xx, yy, zz;
	int cell_size;
	//cell_size = voxelSize.x / (1 << level);
	cell_size = voxelSize / (1 << level);

	xx = x;
	yy = y;
	zz = z;

	if (IsLeafCell(xx, yy, zz, level, direction) == true 
		&& IsLeafCell(xx - 1, yy, zz, level, direction) == true 
		&& IsLeafCell(xx - 1, yy - 1, zz, level, direction) == true 
		&& IsLeafCell(xx, yy - 1, zz, level, direction) == true

		&& IsLeafCell(xx, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx - 1, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz - 1, level, direction) == false
		&& IsLeafCell(xx, yy - 1, zz - 1, level, direction) == false

		&& IsLeafCell(xx * 2, yy * 2, zz * 2 - 1, level + 1, direction) == true
		&& IsLeafCell(xx * 2 - 1, yy * 2, zz * 2 - 1, level + 1, direction) == true
		&& IsLeafCell(xx * 2 - 1, yy * 2 - 1, zz * 2 - 1, level + 1, direction) == true
		&& IsLeafCell(xx * 2, yy * 2 - 1, zz * 2 - 1, level + 1, direction) == true

		&& ((xx * 2 + 1) / 4 == (xx * 2 - 2) / 4)
		&& ((yy * 2 + 1) / 4 == (yy * 2 - 2) / 4)//good way to represent it
		)
	{
		if (IsLeafCell((xx + 1) * 2, yy * 2, zz * 2, level + 1, direction) == false
			&& IsLeafCell((xx - 2) * 2, yy * 2, zz * 2, level + 1, direction) == false
			)
		{		
			return 1;
		}

		else if (IsLeafCell((xx + 1) * 2, yy * 2, zz * 2, level + 1, direction) == true
			&& IsLeafCell((xx - 2) * 2, yy * 2, zz * 2, level + 1, direction) == false)
		{
			return 2;
		}

		else if (IsLeafCell((xx + 1) * 2, yy * 2, zz * 2, level + 1, direction) == false
			&& IsLeafCell((xx - 2) * 2, yy * 2, zz * 2, level + 1, direction) == true)
		{
			return 3;
		}

		else
			return 4;

	}

	else if (IsLeafCell(xx, yy, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy - 1, zz, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz, level, direction) == true
		//be careful
		&& IsLeafCell(xx, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx - 1, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz - 1, level, direction) == false
		&& IsLeafCell(xx, yy - 1, zz - 1, level, direction) == false

		&& IsLeafCell(xx / 2, yy / 2, zz / 2 - 1, level - 1, direction) == true
		&& IsLeafCell(xx / 2 - 1, yy / 2, zz / 2 - 1, level - 1, direction) == true
		&& IsLeafCell(xx / 2 - 1, yy / 2 - 1, zz / 2 - 1, level - 1, direction) == true
		&& IsLeafCell(xx / 2, yy / 2 - 1, zz / 2 - 1, level - 1, direction) == true

		&& ((xx + 1) / 4 == (xx - 2) / 4)
		&& ((yy + 1) / 4 == (yy - 2) / 4)

		)
	{
		if (IsLeafCell(xx / 2 + 1, yy / 2, zz / 2 - 1, level - 1, direction) == true
			&& IsLeafCell(xx / 2 - 2, yy / 2, zz / 2 - 1, level - 1, direction) == true
			)
		{
			return 5;
		}

		else if (IsLeafCell(xx / 2 + 1, yy / 2, zz / 2 - 1, level - 1, direction) == false
			&& IsLeafCell(xx / 2 - 2, yy / 2, zz / 2 - 1, level - 1, direction) == true
			)
		{
			return 6;
		}

		else if (IsLeafCell(xx / 2 + 1, yy / 2, zz / 2 - 1, level - 1, direction) == true
			&& IsLeafCell(xx / 2 - 2, yy / 2, zz / 2 - 1, level - 1, direction) == false
			)
		{
			return 7;
		}

		else
			return 8;
	}

	else if (IsLeafCell(xx, yy, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy - 1, zz, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz, level, direction) == true
		&& IsLeafCell(xx, yy, zz - 1, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz - 1, level, direction) == true

		&& IsLeafCell(xx - 1, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz - 1, level, direction) == false
		&& IsLeafCell(xx * 2 - 1, yy * 2, zz * 2 - 1, level + 1, direction) == true
		&& IsLeafCell(xx * 2 - 1, yy * 2 - 1, zz * 2 - 1, level + 1, direction) == true

		&& ((yy * 2 + 1) / 4 == (yy * 2 - 2) / 4)
		)
	{
		return 11;
	}


	else if (IsLeafCell(xx, yy, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy - 1, zz, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz, level, direction) == true

		&& IsLeafCell(xx, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx, yy - 1, zz - 1, level, direction) == false
		&& IsLeafCell(xx - 1, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz - 1, level, direction) == false

		&& IsLeafCell(xx * 2 - 1, yy * 2, zz * 2 - 1, level + 1, direction) == true
		&& IsLeafCell(xx * 2 - 1, yy * 2 - 1, zz * 2 - 1, level + 1, direction) == true
		&& IsLeafCell(xx * 2, yy * 2, zz * 2 - 1, level + 1, direction) == true
		&& IsLeafCell(xx * 2, yy * 2 - 1, zz * 2 - 1, level + 1, direction) == true

		&& ((yy * 2 + 1) / 4 == (yy * 2 - 2) / 4)
		&& ((xx * 2 + 1) / 4 != (xx * 2 - 2) / 4)
		)
	{
		return 12;
	}

	else if (IsLeafCell(xx, yy, zz, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz, level, direction) == true
		&& IsLeafCell(xx, yy, zz - 1, level, direction) == true
		&& IsLeafCell(xx - 1, yy, zz - 1, level, direction) == true
		&& IsLeafCell(xx - 1, yy - 1, zz - 1, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz - 1,level, direction) == true

		&& IsLeafCell(xx - 1, yy, zz, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz, level, direction) == false

		&& IsLeafCell(xx / 2 - 1, yy / 2, zz / 2, level - 1, direction) == true
		&& IsLeafCell(xx / 2 - 1, yy / 2 - 1, zz / 2, level - 1, direction) == true

		&& ((yy + 1) / 4 == (yy - 2) / 4)
		&& ((xx + 1) / 4 != (xx - 2) / 4)
		)
	{
		return 13;
	}

	else if (IsLeafCell(xx, yy, zz, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy, zz - 1, level, direction) == true
		&& IsLeafCell(xx - 1, yy - 1, zz - 1, level, direction) == true

		&& IsLeafCell(xx - 1, yy, zz, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz, level, direction) == false
		&& IsLeafCell(xx, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx, yy - 1, zz - 1, level, direction) == false

		&& IsLeafCell(xx / 2 - 1, yy / 2, zz / 2, level - 1, direction) == true
		&& IsLeafCell(xx / 2 - 1, yy / 2 - 1, zz / 2, level - 1, direction) == true
		&& IsLeafCell(xx / 2, yy / 2, zz / 2 - 1, level - 1, direction) == true
		&& IsLeafCell(xx / 2, yy / 2 - 1, zz / 2 - 1, level - 1, direction) == true

		&& ((yy + 1) / 4 == (yy - 2) / 4)
		&& ((xx + 1) / 4 != (xx - 2) / 4)
		)
	{
		return 14;
	}

	else if (IsLeafCell(xx, yy, zz, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz, level, direction) == true
		&& IsLeafCell(xx, yy, zz - 1, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz - 1, level, direction) == true
		&& IsLeafCell(xx - 1, yy, zz - 1, level, direction) == true
		&& IsLeafCell(xx - 1, yy - 1, zz - 1, level, direction) == true

		&& IsLeafCell(xx - 1, yy, zz, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz, level, direction) == false
		&& IsLeafCell(xx * 2 - 1, yy * 2, zz * 2, level + 1, direction) == true
		&& IsLeafCell(xx * 2 - 1, yy * 2 - 1, zz * 2, level + 1, direction) == true

		&& ((yy * 2 + 1) / 4 == (yy * 2 - 2) / 4)
		&& ((xx * 2 + 1) / 4 != (xx * 2 - 2) / 4) 
		)
	{
		return 15;
	}

	else if (IsLeafCell(xx, yy, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy - 1, zz, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz, level, direction) == true

		&& IsLeafCell(xx, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx - 1, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz - 1, level, direction) == false
		&& IsLeafCell(xx, yy - 1, zz - 1, level, direction) == false
		&& IsLeafCell(xx / 2, yy / 2, zz / 2 - 1, level - 1, direction) == true
		&& IsLeafCell(xx / 2 - 1, yy / 2, zz / 2 - 1, level - 1, direction) == true
		&& IsLeafCell(xx / 2 - 1, yy / 2 - 1, zz / 2 - 1, level - 1, direction) == true
		&& IsLeafCell(xx / 2, yy / 2 - 1, zz / 2 - 1, level - 1, direction) == true

		&& ((yy + 1) / 4 == (yy - 2) / 4)
		&& ((xx + 0) / 4 != (xx - 1) / 4)
		)
	{
		return 16;
	}

	else if (IsLeafCell(xx, yy, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy - 1, zz, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz, level, direction) == true
		&& IsLeafCell(xx, yy, zz - 1, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz - 1, level, direction) == true

		&& IsLeafCell(xx - 1, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz - 1, level, direction) == false
		&& IsLeafCell(xx / 2 - 1, yy / 2, zz / 2 - 1, level - 1, direction) == true
		&& IsLeafCell(xx / 2 - 1, yy / 2 - 1, zz / 2 - 1, level - 1, direction) == true

		&& ((yy + 1) / 4 == (yy - 2) / 4)
		&& ((xx + 0) / 4 != (xx - 1) / 4)
		)
	{
		return 17;
	}

	else if (IsLeafCell(xx, yy, zz, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz, level, direction) == true
		&& IsLeafCell(xx, yy, zz - 1, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz - 1, level, direction) == true

		&& IsLeafCell(xx - 1, yy, zz, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz, level, direction) == false
		&& IsLeafCell(xx - 1, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz - 1, level, direction) == false
		&& IsLeafCell(xx * 2 - 1, yy * 2, zz * 2, level + 1, direction) == true
		&& IsLeafCell(xx * 2 - 1, yy * 2 - 1, zz * 2, level + 1, direction) == true
		&& IsLeafCell(xx * 2 - 1, yy * 2, zz * 2 - 1, level + 1, direction) == true
		&& IsLeafCell(xx * 2 - 1, yy * 2 - 1, zz * 2 - 1, level + 1, direction) == true

		&& ((yy * 2 + 1) / 4 == (yy * 2 - 2) / 4)
		&& ((xx * 2 + 0) / 4 != (xx * 2 - 1) / 4)
		&& ((zz * 2 + 0) / 4 != (zz * 2 - 1) / 4)
		)
	{
		return 18;
	}

	else if (IsLeafCell(xx, yy, zz, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz, level, direction) == true

		&& IsLeafCell(xx - 1, yy, zz, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz, level, direction) == false
		&& IsLeafCell(xx, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx - 1, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz - 1, level, direction) == false
		&& IsLeafCell(xx, yy - 1, zz - 1, level, direction) == false
		&& IsLeafCell(xx * 2 - 1, yy * 2, zz * 2, level + 1, direction) == true
		&& IsLeafCell(xx * 2 - 1, yy * 2 - 1, zz * 2, level + 1, direction) == true
		&& IsLeafCell(xx * 2, yy * 2, zz * 2 - 1, level + 1, direction) == true
		&& IsLeafCell(xx * 2 - 1, yy * 2, zz * 2 - 1, level + 1, direction) == true
		&& IsLeafCell(xx * 2 - 1, yy * 2 - 1, zz * 2 - 1, level + 1, direction) == true
		&& IsLeafCell(xx * 2, yy * 2 - 1, zz * 2 - 1, level + 1, direction) == true

		&& ((yy * 2 + 1) / 4 == (yy * 2 - 2) / 4)
		&& ((xx * 2 + 0) / 4 != (xx * 2 - 1) / 4)
		)
	{
		return 19;
	}

	else if (IsLeafCell(xx, yy, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy - 1, zz, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy, zz - 1, level, direction) == true
		&& IsLeafCell(xx - 1, yy - 1, zz - 1, level, direction) == true

		&& IsLeafCell(xx, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx, yy - 1, zz - 1, level, direction) == false
		&& IsLeafCell(xx / 2, yy / 2, zz / 2 - 1, level - 1, direction) == true
		&& IsLeafCell(xx / 2, yy / 2 - 1, zz / 2 - 1, level - 1, direction) == true

		&& ((yy + 1) / 4 == (yy - 2) / 4)
		&& ((xx + 0) / 4 != (xx - 1) / 4)
		)
	{
		return 110;
	}

	else if (IsLeafCell(xx, yy, zz, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy, zz - 1, level, direction) == true
		&& IsLeafCell(xx - 1, yy - 1, zz - 1, level, direction) == true

		&& IsLeafCell(xx - 1, yy, zz, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz, level, direction) == false
		&& IsLeafCell(xx, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx, yy - 1, zz - 1, level, direction) == false
		&& IsLeafCell(xx * 2 - 1, yy * 2, zz * 2, level + 1, direction) == true
		&& IsLeafCell(xx * 2 - 1, yy * 2 - 1, zz * 2, level + 1, direction) == true
		&& IsLeafCell(xx * 2, yy * 2, zz * 2 - 1, level + 1, direction) == true
		&& IsLeafCell(xx * 2, yy * 2 - 1, zz * 2 - 1, level + 1, direction) == true

		&& ((yy * 2 + 1) / 4 == (yy * 2 - 2) / 4)
		&& ((xx * 2 + 0) / 4 != (xx * 2 - 1) / 4)
		)
	{
		return 111;
	}

	else if (IsLeafCell(xx, yy, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy - 1, zz, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz, level, direction) == true
		&& IsLeafCell(xx - 1, yy, zz - 1, level, direction) == true
		&& IsLeafCell(xx - 1, yy - 1, zz - 1, level, direction) == true

		&& IsLeafCell(xx, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx, yy - 1, zz - 1, level, direction) == false
		&& IsLeafCell(xx * 2, yy * 2, zz * 2 - 1, level + 1, direction) == true
		&& IsLeafCell(xx * 2, yy * 2 - 1, zz * 2 - 1, level + 1, direction) == true

		&& ((yy * 2 + 1) / 4 == (yy * 2 - 2) / 4)
		&& ((xx * 2 + 0) / 4 != (xx * 2 - 1) / 4)
		)
	{
		return 112;
	}

	else if (IsLeafCell(xx, yy, zz, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz, level, direction) == true

		&& IsLeafCell(xx - 1, yy, zz, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz, level, direction) == false
		&& IsLeafCell(xx, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx - 1, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz - 1, level, direction) == false
		&& IsLeafCell(xx, yy - 1, zz - 1, level, direction) == false
		&& IsLeafCell(xx / 2 - 1, yy / 2, zz / 2, level - 1, direction) == true
		&& IsLeafCell(xx / 2 - 1, yy / 2 - 1, zz / 2, level - 1, direction) == true
		&& IsLeafCell(xx / 2, yy / 2, zz / 2 - 1, level - 1, direction) == true
		&& IsLeafCell(xx / 2 - 1, yy / 2, zz / 2 - 1, level - 1, direction) == true
		&& IsLeafCell(xx / 2 - 1, yy / 2 - 1, zz / 2 - 1, level - 1, direction) == true
		&& IsLeafCell(xx / 2, yy / 2 - 1, zz / 2 - 1, level - 1, direction) == true

		&& ((yy + 1) / 4 == (yy - 2) / 4)
		&& ((xx + 0) / 4 != (xx - 1) / 4)
		)
	{
		return 113;
	}

	else if (IsLeafCell(xx, yy, zz, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz, level, direction) == true
		&& IsLeafCell(xx, yy, zz - 1, level, direction) == true
		&& IsLeafCell(xx, yy - 1, zz - 1, level, direction) == true

		&& IsLeafCell(xx - 1, yy, zz, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz, level, direction) == false
		&& IsLeafCell(xx - 1, yy, zz - 1, level, direction) == false
		&& IsLeafCell(xx - 1, yy - 1, zz - 1, level, direction) == false
		&& IsLeafCell(xx / 2 - 1, yy / 2, zz / 2, level - 1, direction) == true
		&& IsLeafCell(xx / 2 - 1, yy / 2 - 1, zz / 2, level - 1, direction) == true
		&& IsLeafCell(xx / 2 - 1, yy / 2, zz / 2 - 1, level - 1, direction) == true
		&& IsLeafCell(xx / 2 - 1, yy / 2 - 1, zz / 2 - 1, level - 1, direction) == true

		&& ((yy + 1) / 4 == (yy - 2) / 4)
		&& ((xx + 0) / 4 != (xx - 1) / 4)
		&& ((zz + 0) / 4 != (zz - 1) / 4)//be careful, this is necessary
		)
	{
		return 114;
	}

	else
		return 0;

}

void CVTBasedPolycube::TwentyOneVerticesMarechal(int octree_id, double *vertex_cood, int i, int direction /* = 0 */, int para_phy)
{

	int xx, yy, zz;
	int x, y, z;
	int level;
	int cell_size;

	int j, k, index;
	Node tempVert;

	level = GetLevel(octree_id);
	//cell_size = voxelSize.x / (1 << level);
	cell_size = voxelSize / (1 << level);
	OctreeidxToXYZ(octree_id, xx, yy, zz, level);

	x = xx; y = yy; z = zz;

	if (para_phy == 1)
	{

		for (j = 0; j < 3; j++)
		{
			vertex_cood[j] = 0.f;
		}

		index = vtxIdxArray[octree_id];
		for (j = 0; j < 8; j++)
		{
			for (k = 0; k < 3; k++)
			{
				vertex_cood[k] += Nodes[Elements[index].NodeIndex[j]].Coords[k];
			}
		}

		for (j = 0; j < 3; j++)
		{
			vertex_cood[j] /= 8.0f;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////
		//Preserve the feature

		for (j = 0; j < 3; j++)
		{
			tempVert.Coords[j] = vertex_cood[j];
		}

		CalculateCenterPoint(Elements[index], tempVert);

		for (j = 0; j < 3; j++)
		{
			vertex_cood[j] = tempVert.Coords[j];
		}

		return;
	}

	switch (direction)
	{
	case 0:
		//x = xx;	y = yy;	z = zz;
		switch (i)
		{
		case 0:
			vertex_cood[0] = origCood[0] + (x + 1 / 2.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 2.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 2.0f) * cell_size * cellSize;
			break;
		case 10:
			vertex_cood[0] = origCood[0] + (x + 1 / 8.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 8.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 8.0f) * cell_size * cellSize;
			break;
		case 11:
			vertex_cood[0] = origCood[0] + (x + 7 / 8.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 8.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 8.0f) * cell_size * cellSize;
			break;
		case 12:
			vertex_cood[0] = origCood[0] + (x + 7 / 8.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 8.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 7 / 8.0f) * cell_size * cellSize;
			break;
		case 13:
			vertex_cood[0] = origCood[0] + (x + 1 / 8.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 8.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 7 / 8.0f) * cell_size * cellSize;
			break;
		case 14:
			vertex_cood[0] = origCood[0] + (x + 1 / 8.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 7 / 8.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 8.0f) * cell_size * cellSize;
			break;
		case 15:
			vertex_cood[0] = origCood[0] + (x + 7 / 8.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 7 / 8.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 8.0f) * cell_size * cellSize;
			break;
		case 16:
			vertex_cood[0] = origCood[0] + (x + 7 / 8.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 7 / 8.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 7 / 8.0f) * cell_size * cellSize;
			break;
		case 17:
			vertex_cood[0] = origCood[0] + (x + 1 / 8.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 7 / 8.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 7 / 8.0f) * cell_size * cellSize;
			break;
		case 200:
			vertex_cood[0] = origCood[0] + (x + 1 / 2.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 6.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 6.0f) * cell_size * cellSize;
			break;
		case 201:
			vertex_cood[0] = origCood[0] + (x + 5 / 6.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 6.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 2.0f) * cell_size * cellSize;
			break;
		case 202:
			vertex_cood[0] = origCood[0] + (x + 1 / 2.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 6.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 5 / 6.0f) * cell_size * cellSize;
			break;
		case 203:
			vertex_cood[0] = origCood[0] + (x + 1 / 6.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 6.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 2.0f) * cell_size * cellSize;
			break;
		case 204:
			vertex_cood[0] = origCood[0] + (x + 1 / 2.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 5 / 6.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 6.0f) * cell_size * cellSize;
			break;
		case 205:
			vertex_cood[0] = origCood[0] + (x + 5 / 6.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 5 / 6.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 2.0f) * cell_size * cellSize;
			break;
		case 206:
			vertex_cood[0] = origCood[0] + (x + 1 / 2.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 5 / 6.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 5 / 6.0f) * cell_size * cellSize;
			break;
		case 207:
			vertex_cood[0] = origCood[0] + (x + 1 / 6.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 5 / 6.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 2.0f) * cell_size * cellSize;
			break;
		case 208:
			vertex_cood[0] = origCood[0] + (x + 1 / 6.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 2.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 6.0f) * cell_size * cellSize;
			break;
		case 209:
			vertex_cood[0] = origCood[0] + (x + 5 / 6.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 2.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 6.0f) * cell_size * cellSize;
			break;
		case 210:
			vertex_cood[0] = origCood[0] + (x + 5 / 6.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 2.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 5 / 6.0f) * cell_size * cellSize;
			break;
		case 211:
			vertex_cood[0] = origCood[0] + (x + 1 / 6.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 2.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 5 / 6.0f) * cell_size * cellSize;
			break;

		}
		break;
	case 1:
		//x = zz;	y = xx;	z = yy;
		switch (i)
		{
		case 0:
			vertex_cood[0] = origCood[0] + (x + 1 / 2.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 2.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 2.0f) * cell_size * cellSize;
			break;
		case 10:
			vertex_cood[0] = origCood[0] + (x + 1 / 8.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 8.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 8.0f) * cell_size * cellSize;
			break;
		case 11:
			vertex_cood[0] = origCood[0] + (x + 1 / 8.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 7 / 8.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 8.0f) * cell_size * cellSize;
			break;
		case 12:
			vertex_cood[0] = origCood[0] + (x + 7 / 8.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 7 / 8.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 8.0f) * cell_size * cellSize;
			break;
		case 13:
			vertex_cood[0] = origCood[0] + (x + 7 / 8.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 8.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 8.0f) * cell_size * cellSize;
			break;
		case 14:
			vertex_cood[0] = origCood[0] + (x + 1 / 8.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 8.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 7 / 8.0f) * cell_size * cellSize;
			break;
		case 15:
			vertex_cood[0] = origCood[0] + (x + 1 / 8.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 7 / 8.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 7 / 8.0f) * cell_size * cellSize;
			break;
		case 16:
			vertex_cood[0] = origCood[0] + (x + 7 / 8.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 7 / 8.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 7 / 8.0f) * cell_size * cellSize;
			break;
		case 17:
			vertex_cood[0] = origCood[0] + (x + 7 / 8.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 8.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 7 / 8.0f) * cell_size * cellSize;
			break;
		case 200:
			vertex_cood[0] = origCood[0] + (x + 1 / 6.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 2.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 6.0f) * cell_size * cellSize;
			break;
		case 201:
			vertex_cood[0] = origCood[0] + (x + 1 / 2.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 5 / 6.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 6.0f) * cell_size * cellSize;
			break;
		case 202:
			vertex_cood[0] = origCood[0] + (x + 5 / 6.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 2.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 6.0f) * cell_size * cellSize;
			break;
		case 203:
			vertex_cood[0] = origCood[0] + (x + 1 / 2.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 6.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 6.0f) * cell_size * cellSize;
			break;
		case 204:
			vertex_cood[0] = origCood[0] + (x + 1 / 6.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 2.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 5 / 6.0f) * cell_size * cellSize;
			break;
		case 205:
			vertex_cood[0] = origCood[0] + (x + 1 / 2.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 5 / 6.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 5 / 6.0f) * cell_size * cellSize;
			break;
		case 206:
			vertex_cood[0] = origCood[0] + (x + 5 / 6.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 2.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 5 / 6.0f) * cell_size * cellSize;
			break;
		case 207:
			vertex_cood[0] = origCood[0] + (x + 1 / 2.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 6.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 5 / 6.0f) * cell_size * cellSize;
			break;
		case 208:
			vertex_cood[0] = origCood[0] + (x + 1 / 6.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 6.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 2.0f) * cell_size * cellSize;
			break;
		case 209:
			vertex_cood[0] = origCood[0] + (x + 1 / 6.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 5 / 6.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 2.0f) * cell_size * cellSize;
			break;
		case 210:
			vertex_cood[0] = origCood[0] + (x + 5 / 6.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 5 / 6.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 2.0f) * cell_size * cellSize;
			break;
		case 211:
			vertex_cood[0] = origCood[0] + (x + 5 / 6.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 6.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 2.0f) * cell_size * cellSize;
			break;
		}
		break;
	case 2:
		//x = yy;	y = zz;	z = xx;
		switch (i)
		{
		case 0:
			vertex_cood[0] = origCood[0] + (x + 1 / 2.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 2.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 2.0f) * cell_size * cellSize;
			break;
		case 10:
			vertex_cood[0] = origCood[0] + (x + 1 / 8.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 8.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 8.0f) * cell_size * cellSize;
			break;
		case 11:
			vertex_cood[0] = origCood[0] + (x + 1 / 8.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 8.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 7 / 8.0f) * cell_size * cellSize;
			break;
		case 12:
			vertex_cood[0] = origCood[0] + (x + 1 / 8.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 7 / 8.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 7 / 8.0f) * cell_size * cellSize;
			break;
		case 13:
			vertex_cood[0] = origCood[0] + (x + 1 / 8.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 7 / 8.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 8.0f) * cell_size * cellSize;
			break;
		case 14:
			vertex_cood[0] = origCood[0] + (x + 7 / 8.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 8.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 8.0f) * cell_size * cellSize;
			break;
		case 15:
			vertex_cood[0] = origCood[0] + (x + 7 / 8.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 8.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 7 / 8.0f) * cell_size * cellSize;
			break;
		case 16:
			vertex_cood[0] = origCood[0] + (x + 7 / 8.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 7 / 8.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 7 / 8.0f) * cell_size * cellSize;
			break;
		case 17:
			vertex_cood[0] = origCood[0] + (x + 7 / 8.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 7 / 8.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 8.0f) * cell_size * cellSize;
			break;
		case 200:
			vertex_cood[0] = origCood[0] + (x + 1 / 6.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 6.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 2.0f) * cell_size * cellSize;
			break;
		case 201:
			vertex_cood[0] = origCood[0] + (x + 1 / 6.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 2.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 5 / 6.0f) * cell_size * cellSize;
			break;
		case 202:
			vertex_cood[0] = origCood[0] + (x + 1 / 6.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 5 / 6.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 2.0f) * cell_size * cellSize;
			break;
		case 203:
			vertex_cood[0] = origCood[0] + (x + 1 / 6.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 2.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 6.0f) * cell_size * cellSize;
			break;
		case 204:
			vertex_cood[0] = origCood[0] + (x + 5 / 6.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 6.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 2.0f) * cell_size * cellSize;
			break;
		case 205:
			vertex_cood[0] = origCood[0] + (x + 5 / 6.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 2.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 5 / 6.0f) * cell_size * cellSize;
			break;
		case 206:
			vertex_cood[0] = origCood[0] + (x + 5 / 6.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 5 / 6.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 2.0f) * cell_size * cellSize;
			break;
		case 207:
			vertex_cood[0] = origCood[0] + (x + 5 / 6.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 2.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 6.0f) * cell_size * cellSize;
			break;
		case 208:
			vertex_cood[0] = origCood[0] + (x + 1 / 2.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 6.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 6.0f) * cell_size * cellSize;
			break;
		case 209:
			vertex_cood[0] = origCood[0] + (x + 1 / 2.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 1 / 6.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 5 / 6.0f) * cell_size * cellSize;
			break;
		case 210:
			vertex_cood[0] = origCood[0] + (x + 1 / 2.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 5 / 6.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 5 / 6.0f) * cell_size * cellSize;
			break;
		case 211:
			vertex_cood[0] = origCood[0] + (x + 1 / 2.0f) * cell_size * cellSize;
			vertex_cood[1] = origCood[1] + (y + 5 / 6.0f) * cell_size * cellSize;
			vertex_cood[2] = origCood[2] + (z + 1 / 6.0f) * cell_size * cellSize;
			break;
		}
		break;
	}

}

void CVTBasedPolycube::AddOneHexRegularMarechal(int x, int y, int z, int level, int num_hexa)
{

	int related_cell[8];

	related_cell[0] = XYZToOctreeidx(x - 1, y - 1, z - 1, level);
	related_cell[1] = XYZToOctreeidx(x, y - 1, z - 1, level);
	related_cell[2] = XYZToOctreeidx(x - 1, y, z - 1, level);
	related_cell[3] = XYZToOctreeidx(x, y, z - 1, level);
	related_cell[4] = XYZToOctreeidx(x - 1, y - 1, z, level);
	related_cell[5] = XYZToOctreeidx(x, y - 1, z, level);
	related_cell[6] = XYZToOctreeidx(x - 1, y, z, level);
	related_cell[7] = XYZToOctreeidx(x, y, z, level);

	double node_coodinate[3];

	//first hex mesh

	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = node_coodinate[0];
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = node_coodinate[1];
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = node_coodinate[2];
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = node_coodinate[0];
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = node_coodinate[1];
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = node_coodinate[2];
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = node_coodinate[0];
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = node_coodinate[1];
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = node_coodinate[2];
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = node_coodinate[0];
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = node_coodinate[1];
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = node_coodinate[2];
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = node_coodinate[0];
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = node_coodinate[1];
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = node_coodinate[2];
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = node_coodinate[0];
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = node_coodinate[1];
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = node_coodinate[2];
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = node_coodinate[0];
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = node_coodinate[1];
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = node_coodinate[2];
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = node_coodinate[0];
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = node_coodinate[1];
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = node_coodinate[2];
	//
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, 0, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = node_coodinate[0];
	hexVerts[num_hexa * 8 + 0].Coords[1] = node_coodinate[1];
	hexVerts[num_hexa * 8 + 0].Coords[2] = node_coodinate[2];
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, 0, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = node_coodinate[0];
	hexVerts[num_hexa * 8 + 1].Coords[1] = node_coodinate[1];
	hexVerts[num_hexa * 8 + 1].Coords[2] = node_coodinate[2];
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, 0, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = node_coodinate[0];
	hexVerts[num_hexa * 8 + 2].Coords[1] = node_coodinate[1];
	hexVerts[num_hexa * 8 + 2].Coords[2] = node_coodinate[2];
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, 0, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = node_coodinate[0];
	hexVerts[num_hexa * 8 + 3].Coords[1] = node_coodinate[1];
	hexVerts[num_hexa * 8 + 3].Coords[2] = node_coodinate[2];
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, 0, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = node_coodinate[0];
	hexVerts[num_hexa * 8 + 4].Coords[1] = node_coodinate[1];
	hexVerts[num_hexa * 8 + 4].Coords[2] = node_coodinate[2];
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, 0, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = node_coodinate[0];
	hexVerts[num_hexa * 8 + 5].Coords[1] = node_coodinate[1];
	hexVerts[num_hexa * 8 + 5].Coords[2] = node_coodinate[2];
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, 0, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = node_coodinate[0];
	hexVerts[num_hexa * 8 + 6].Coords[1] = node_coodinate[1];
	hexVerts[num_hexa * 8 + 6].Coords[2] = node_coodinate[2];
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, 0, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = node_coodinate[0];
	hexVerts[num_hexa * 8 + 7].Coords[1] = node_coodinate[1];
	hexVerts[num_hexa * 8 + 7].Coords[2] = node_coodinate[2];

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

}

void CVTBasedPolycube::AddOneHexIrregularMarechal(int x, int y, int z, int level, int num_hexa, vector<int> &eight_cells)
{

	double node_coodinate[3];
	int f_eight_cells[8];
	int xx, yy, zz;//global coordinates
	int cell_size;

	int f_octree_id;
	int f_x, f_y, f_z;
	int f_xx, f_yy, f_zz;
	int f_level;
	int f_cell_size;

	//cell_size = voxelSize.x / (1 << level);
	cell_size = voxelSize / (1 << level);
	xx = x * cell_size;
	yy = y * cell_size;
	zz = z * cell_size;

	for (int i = 0; i < 8; i++)
	{
		f_octree_id = eight_cells[i];
		f_level = GetLevel(f_octree_id);
		//f_cell_size = voxelSize.x / (1 << f_level);
		f_cell_size = voxelSize / (1 << f_level);
		OctreeidxToXYZ(f_octree_id, f_x, f_y, f_z, f_level);
		f_xx = f_x * f_cell_size;
		f_yy = f_y * f_cell_size;
		f_zz = f_z * f_cell_size;

		if (f_xx - xx < 0 && f_yy - yy < 0 && f_zz - zz < 0)
		{
			f_eight_cells[0] = f_octree_id;
		}
		else if (f_xx - xx == 0 && f_yy - yy < 0 && f_zz - zz < 0)
		{
			f_eight_cells[1] = f_octree_id; 
		}
		else if (f_xx - xx == 0 && f_yy - yy == 0 && f_zz - zz < 0)
		{
			f_eight_cells[2] = f_octree_id;
		}
		else if (f_xx - xx < 0 && f_yy - yy == 0 && f_zz - zz < 0)
		{
			f_eight_cells[3] = f_octree_id;
		}
		else if (f_xx - xx < 0 && f_yy - yy < 0 && f_zz - zz == 0)
		{
			f_eight_cells[4] = f_octree_id;
		}
		else if (f_xx - xx == 0 && f_yy - yy < 0 && f_zz - zz == 0)
		{
			f_eight_cells[5] = f_octree_id;
		}
		else if (f_xx - xx == 0 && f_yy - yy == 0 && f_zz - zz == 0)
		{
			f_eight_cells[6] = f_octree_id;
		}
		else
		{
			f_eight_cells[7] = f_octree_id;
		}

	}

	for (int i = 0; i < 8; i++)
	{
		TwentyOneVerticesMarechal(f_eight_cells[i], node_coodinate, 0);
		hexVerts[num_hexa * 8 + i].ParaPos[0] = node_coodinate[0];
		hexVerts[num_hexa * 8 + i].ParaPos[1] = node_coodinate[1];
		hexVerts[num_hexa * 8 + i].ParaPos[2] = node_coodinate[2];

		TwentyOneVerticesMarechal(f_eight_cells[i], node_coodinate, 0, 0, 1);
		hexVerts[num_hexa * 8 + i].Coords[0] = node_coodinate[0];
		hexVerts[num_hexa * 8 + i].Coords[1] = node_coodinate[1];
		hexVerts[num_hexa * 8 + i].Coords[2] = node_coodinate[2];
	}

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	//num_hexa++;
}



void CVTBasedPolycube::AddThirteenHexTypeOneFirstMarechal(int x, int y, int z, int level, int num_hexa, int direction)
{

	int related_cell[20];

	related_cell[0] = XYZToOctreeidx(x * 2 - 2, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[1] = XYZToOctreeidx(x * 2 - 1, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[2] = XYZToOctreeidx(x * 2 - 0, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[3] = XYZToOctreeidx(x * 2 + 1, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[4] = XYZToOctreeidx(x * 2 - 2, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[5] = XYZToOctreeidx(x * 2 - 1, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[6] = XYZToOctreeidx(x * 2 - 0, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[7] = XYZToOctreeidx(x * 2 + 1, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[8] = XYZToOctreeidx(x * 2 - 2, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[9] = XYZToOctreeidx(x * 2 - 1, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[10] = XYZToOctreeidx(x * 2 - 0, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[11] = XYZToOctreeidx(x * 2 + 1, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[12] = XYZToOctreeidx(x * 2 - 2, y * 2 + 1, z * 2 - 1, level + 1, direction);
	related_cell[13] = XYZToOctreeidx(x * 2 - 1, y * 2 + 1, z * 2 - 1, level + 1, direction);
	related_cell[14] = XYZToOctreeidx(x * 2 - 0, y * 2 + 1, z * 2 - 1, level + 1, direction);
	related_cell[15] = XYZToOctreeidx(x * 2 + 1, y * 2 + 1, z * 2 - 1, level + 1, direction);

	related_cell[16] = XYZToOctreeidx(x - 1, y - 1, z, level, direction);
	related_cell[17] = XYZToOctreeidx(x, y - 1, z, level, direction);
	related_cell[18] = XYZToOctreeidx(x - 1, y, z, level, direction);
	related_cell[19] = XYZToOctreeidx(x, y, z, level, direction);

	double node_coodinate[3];

	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 209, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 204, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 209, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 204, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//second hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 209, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 208, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//second hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 209, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 208, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//third hex mesh
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 208, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 204, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//third hex mesh
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 208, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 204, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//fourth hex mesh
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 204, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 200, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//fourth hex mesh
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 204, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 200, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//fifth hex mesh
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//fifth hex mesh
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//sixth hex mesh
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 204, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 200, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//sixth hex mesh
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 204, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 200, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//seventh hex mesh
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[12], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 200, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 209, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//seventh hex mesh
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[12], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 200, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 209, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//eighth hex mesh
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[14], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 208, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 209, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//eighth hex mesh
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[14], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 208, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 209, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//ninth hex mesh
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[15], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[14], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 200, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 208, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//ninth hex mesh
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[15], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[14], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 200, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 208, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//tenth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 209, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 208, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 204, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 204, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//tenth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 209, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 208, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 204, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 204, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//eleventh hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 204, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 204, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 200, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 200, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//eleventh hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 204, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 204, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 200, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 200, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);
	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//twelfth hex mesh
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 208, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 209, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 200, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 200, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//twelfth hex mesh
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 208, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 209, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 200, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 200, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//thirteenth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 204, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 204, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 200, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 200, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//thirteenth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 204, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 204, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 200, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 200, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

}

void CVTBasedPolycube::AddThirteenHexTypeOneSecondMarechal(int x, int y, int z, int level, int num_hexa, int direction)
{

	int related_cell[20];

	related_cell[0] = XYZToOctreeidx(x * 2 - 2, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[1] = XYZToOctreeidx(x * 2 - 1, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[2] = XYZToOctreeidx(x * 2 - 0, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[3] = XYZToOctreeidx(x * 2 + 1, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[4] = XYZToOctreeidx(x * 2 - 2, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[5] = XYZToOctreeidx(x * 2 - 1, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[6] = XYZToOctreeidx(x * 2 - 0, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[7] = XYZToOctreeidx(x * 2 + 1, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[8] = XYZToOctreeidx(x * 2 - 2, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[9] = XYZToOctreeidx(x * 2 - 1, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[10] = XYZToOctreeidx(x * 2 - 0, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[11] = XYZToOctreeidx(x * 2 + 1, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[12] = XYZToOctreeidx(x * 2 - 2, y * 2 + 1, z * 2 - 1, level + 1, direction);
	related_cell[13] = XYZToOctreeidx(x * 2 - 1, y * 2 + 1, z * 2 - 1, level + 1, direction);
	related_cell[14] = XYZToOctreeidx(x * 2 - 0, y * 2 + 1, z * 2 - 1, level + 1, direction);
	related_cell[15] = XYZToOctreeidx(x * 2 + 1, y * 2 + 1, z * 2 - 1, level + 1, direction);

	related_cell[16] = XYZToOctreeidx(x - 1, y - 1, z, level, direction);
	related_cell[17] = XYZToOctreeidx(x, y - 1, z, level, direction);
	related_cell[18] = XYZToOctreeidx(x - 1, y, z, level, direction);
	related_cell[19] = XYZToOctreeidx(x, y, z, level, direction);

	//int xx, yy, zz;
	//xx = x, yy = y, zz = z;

	//switch (direction)
	//{
	//case 0:
	//	x = xx; y = yy; z = zz;
	//	break;
	//case 1:
	//	x = zz; y = xx; z = yy;
	//	break;
	//case 2:
	//	x = yy; y = zz; z = xx;
	//	break;
	//}

	double node_coodinate[3];

	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 209, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 204, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 209, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 204, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//second hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 209, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 208, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//second hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 209, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 208, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//third hex mesh
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 208, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//third hex mesh
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 208, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//fourth hex mesh
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 204, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 200, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//fourth hex mesh
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 204, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 200, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//fifth hex mesh
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//fifth hex mesh
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//sixth hex mesh
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//sixth hex mesh
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//seventh hex mesh
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[12], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 200, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 209, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//seventh hex mesh
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[12], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 200, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 209, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//eighth hex mesh
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[14], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 208, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 209, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//eighth hex mesh
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[14], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 208, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 209, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//ninth hex mesh
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[15], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[14], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 208, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//ninth hex mesh
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[15], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[14], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 208, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//tenth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 209, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 208, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 204, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//tenth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 209, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 208, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 204, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//eleventh hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 204, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 200, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//eleventh hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 204, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 200, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);
	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//twelfth hex mesh
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 208, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 209, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 200, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//twelfth hex mesh
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 208, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 209, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 200, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//thirteenth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 204, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 200, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//thirteenth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 204, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 200, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

}

void CVTBasedPolycube::AddThirteenHexTypeOneThirdMarechal(int x, int y, int z, int level, int num_hexa, int direction)
{

	int related_cell[20];

	related_cell[0] = XYZToOctreeidx(x * 2 - 2, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[1] = XYZToOctreeidx(x * 2 - 1, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[2] = XYZToOctreeidx(x * 2 - 0, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[3] = XYZToOctreeidx(x * 2 + 1, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[4] = XYZToOctreeidx(x * 2 - 2, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[5] = XYZToOctreeidx(x * 2 - 1, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[6] = XYZToOctreeidx(x * 2 - 0, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[7] = XYZToOctreeidx(x * 2 + 1, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[8] = XYZToOctreeidx(x * 2 - 2, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[9] = XYZToOctreeidx(x * 2 - 1, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[10] = XYZToOctreeidx(x * 2 - 0, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[11] = XYZToOctreeidx(x * 2 + 1, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[12] = XYZToOctreeidx(x * 2 - 2, y * 2 + 1, z * 2 - 1, level + 1, direction);
	related_cell[13] = XYZToOctreeidx(x * 2 - 1, y * 2 + 1, z * 2 - 1, level + 1, direction);
	related_cell[14] = XYZToOctreeidx(x * 2 - 0, y * 2 + 1, z * 2 - 1, level + 1, direction);
	related_cell[15] = XYZToOctreeidx(x * 2 + 1, y * 2 + 1, z * 2 - 1, level + 1, direction);

	related_cell[16] = XYZToOctreeidx(x - 1, y - 1, z, level, direction);
	related_cell[17] = XYZToOctreeidx(x, y - 1, z, level, direction);
	related_cell[18] = XYZToOctreeidx(x - 1, y, z, level, direction);
	related_cell[19] = XYZToOctreeidx(x, y, z, level, direction);

	//int xx, yy, zz;
	//xx = x, yy = y, zz = z;

	//switch (direction)
	//{
	//case 0:
	//	x = xx; y = yy; z = zz;
	//	break;
	//case 1:
	//	x = zz; y = xx; z = yy;
	//	break;
	//case 2:
	//	x = yy; y = zz; z = xx;
	//	break;
	//}

	double node_coodinate[3];

	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 209, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 209, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//second hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 209, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 208, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//second hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 209, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 208, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//third hex mesh
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 208, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 204, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//third hex mesh
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 208, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 204, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//fourth hex mesh
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//fourth hex mesh
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//fifth hex mesh
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//fifth hex mesh
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//sixth hex mesh
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 204, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 200, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//sixth hex mesh
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 204, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 200, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//seventh hex mesh
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[12], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 209, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//seventh hex mesh
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[12], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 209, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//eighth hex mesh
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[14], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 208, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 209, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//eighth hex mesh
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[14], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 208, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 209, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//ninth hex mesh
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[15], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[14], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 200, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 208, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//ninth hex mesh
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[15], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[14], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 200, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 208, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//tenth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 209, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 208, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 204, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//tenth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 209, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 208, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 204, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//eleventh hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 204, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 200, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//eleventh hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 204, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 200, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);
	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//twelfth hex mesh
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 208, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 209, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 200, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//twelfth hex mesh
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 208, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 209, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 200, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//thirteenth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 204, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 200, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//thirteenth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 204, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 200, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

}

void CVTBasedPolycube::AddThirteenHexTypeOneFourthMarechal(int x, int y, int z, int level, int num_hexa, int direction)
{

	int related_cell[20];

	related_cell[0] = XYZToOctreeidx(x * 2 - 2, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[1] = XYZToOctreeidx(x * 2 - 1, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[2] = XYZToOctreeidx(x * 2 - 0, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[3] = XYZToOctreeidx(x * 2 + 1, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[4] = XYZToOctreeidx(x * 2 - 2, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[5] = XYZToOctreeidx(x * 2 - 1, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[6] = XYZToOctreeidx(x * 2 - 0, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[7] = XYZToOctreeidx(x * 2 + 1, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[8] = XYZToOctreeidx(x * 2 - 2, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[9] = XYZToOctreeidx(x * 2 - 1, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[10] = XYZToOctreeidx(x * 2 - 0, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[11] = XYZToOctreeidx(x * 2 + 1, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[12] = XYZToOctreeidx(x * 2 - 2, y * 2 + 1, z * 2 - 1, level + 1, direction);
	related_cell[13] = XYZToOctreeidx(x * 2 - 1, y * 2 + 1, z * 2 - 1, level + 1, direction);
	related_cell[14] = XYZToOctreeidx(x * 2 - 0, y * 2 + 1, z * 2 - 1, level + 1, direction);
	related_cell[15] = XYZToOctreeidx(x * 2 + 1, y * 2 + 1, z * 2 - 1, level + 1, direction);

	related_cell[16] = XYZToOctreeidx(x - 1, y - 1, z, level, direction);
	related_cell[17] = XYZToOctreeidx(x, y - 1, z, level, direction);
	related_cell[18] = XYZToOctreeidx(x - 1, y, z, level, direction);
	related_cell[19] = XYZToOctreeidx(x, y, z, level, direction);

	//int xx, yy, zz;
	//xx = x, yy = y, zz = z;

	//switch (direction)
	//{
	//case 0:
	//	x = xx; y = yy; z = zz;
	//	break;
	//case 1:
	//	x = zz; y = xx; z = yy;
	//	break;
	//case 2:
	//	x = yy; y = zz; z = xx;
	//	break;
	//}

	double node_coodinate[3];

	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 209, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 209, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//second hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 209, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 208, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//second hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 209, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 208, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//third hex mesh
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 208, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//third hex mesh
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 208, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//fourth hex mesh
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//fourth hex mesh
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//fifth hex mesh
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//fifth hex mesh
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//sixth hex mesh
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//sixth hex mesh
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//seventh hex mesh
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[12], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 209, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//seventh hex mesh
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[12], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 209, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//eighth hex mesh
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[14], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 208, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 209, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//eighth hex mesh
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[14], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 208, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 209, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//ninth hex mesh
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[15], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[14], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 208, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//ninth hex mesh
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[15], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[14], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 208, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//tenth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 209, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 208, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//tenth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 209, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 208, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//eleventh hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//eleventh hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 15, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 14, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);
	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//twelfth hex mesh
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 208, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 209, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//twelfth hex mesh
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 11, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 10, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 208, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 209, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//thirteenth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//thirteenth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;
	
}

void CVTBasedPolycube::AddThirteenHexTypeOneFifthMarechal(int x, int y, int z, int level, int num_hexa, int direction)
{
	int related_cell[20];

	related_cell[0] = XYZToOctreeidx(x - 2, y - 2, z, level, direction);
	related_cell[1] = XYZToOctreeidx(x - 1, y - 2, z, level, direction);
	related_cell[2] = XYZToOctreeidx(x - 0, y - 2, z, level, direction);
	related_cell[3] = XYZToOctreeidx(x + 1, y - 2, z, level, direction);
	related_cell[4] = XYZToOctreeidx(x - 2, y - 1, z, level, direction);
	related_cell[5] = XYZToOctreeidx(x - 1, y - 1, z, level, direction);
	related_cell[6] = XYZToOctreeidx(x - 0, y - 1, z, level, direction);
	related_cell[7] = XYZToOctreeidx(x + 1, y - 1, z, level, direction);
	related_cell[8] = XYZToOctreeidx(x - 2, y - 0, z, level, direction);
	related_cell[9] = XYZToOctreeidx(x - 1, y - 0, z, level, direction);
	related_cell[10] = XYZToOctreeidx(x - 0, y - 0, z, level, direction);
	related_cell[11] = XYZToOctreeidx(x + 1, y - 0, z, level, direction);
	related_cell[12] = XYZToOctreeidx(x - 2, y + 1, z, level, direction);
	related_cell[13] = XYZToOctreeidx(x - 1, y + 1, z, level, direction);
	related_cell[14] = XYZToOctreeidx(x - 0, y + 1, z, level, direction);
	related_cell[15] = XYZToOctreeidx(x + 1, y + 1, z, level, direction);

	related_cell[16] = XYZToOctreeidx(x / 2 - 1, y / 2 - 1, z / 2 - 1, level - 1, direction);
	related_cell[17] = XYZToOctreeidx(x / 2, y / 2 - 1, z / 2 - 1, level - 1, direction);
	related_cell[18] = XYZToOctreeidx(x / 2 - 1, y / 2, z / 2 - 1, level - 1, direction);
	related_cell[19] = XYZToOctreeidx(x / 2, y / 2, z / 2 - 1, level - 1, direction);

	double node_coodinate[3];

	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 210, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 206, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 210, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 206, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//second hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 210, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 211, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//second hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 210, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 211, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//third hex mesh
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 211, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 206, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//third hex mesh
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 211, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 206, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//fourth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 206, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 202, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//fourth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 206, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 202, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//fifth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//fifth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//sixth hex mesh
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 206, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 202, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//sixth hex mesh
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 206, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 202, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//seventh hex mesh
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 202, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 210, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[12], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//seventh hex mesh
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 202, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 210, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[12], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//eighth hex mesh
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 211, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 210, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[14], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//eighth hex mesh
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 211, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 210, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[14], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//ninth hex mesh
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 202, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 211, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[15], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[14], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//ninth hex mesh
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 202, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 211, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[15], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[14], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//tenth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 206, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 206, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 210, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 211, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//tenth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 206, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 206, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 210, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 211, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//eleventh hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 206, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 206, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 202, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 202, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//eleventh hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 206, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 206, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 202, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 202, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//twelfth hex mesh
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 202, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 202, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 211, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 210, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//twelfth hex mesh
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 202, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 202, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 211, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 210, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);


	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//thirteenth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 206, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 206, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 202, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 202, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//thirteenth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 206, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 206, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 202, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 202, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;
	
}

void CVTBasedPolycube::AddThirteenHexTypeOneSixthMarechal(int x, int y, int z, int level, int num_hexa, int direction)
{
	int related_cell[20];

	related_cell[0] = XYZToOctreeidx(x - 2, y - 2, z, level, direction);
	related_cell[1] = XYZToOctreeidx(x - 1, y - 2, z, level, direction);
	related_cell[2] = XYZToOctreeidx(x - 0, y - 2, z, level, direction);
	related_cell[3] = XYZToOctreeidx(x + 1, y - 2, z, level, direction);
	related_cell[4] = XYZToOctreeidx(x - 2, y - 1, z, level, direction);
	related_cell[5] = XYZToOctreeidx(x - 1, y - 1, z, level, direction);
	related_cell[6] = XYZToOctreeidx(x - 0, y - 1, z, level, direction);
	related_cell[7] = XYZToOctreeidx(x + 1, y - 1, z, level, direction);
	related_cell[8] = XYZToOctreeidx(x - 2, y - 0, z, level, direction);
	related_cell[9] = XYZToOctreeidx(x - 1, y - 0, z, level, direction);
	related_cell[10] = XYZToOctreeidx(x - 0, y - 0, z, level, direction);
	related_cell[11] = XYZToOctreeidx(x + 1, y - 0, z, level, direction);
	related_cell[12] = XYZToOctreeidx(x - 2, y + 1, z, level, direction);
	related_cell[13] = XYZToOctreeidx(x - 1, y + 1, z, level, direction);
	related_cell[14] = XYZToOctreeidx(x - 0, y + 1, z, level, direction);
	related_cell[15] = XYZToOctreeidx(x + 1, y + 1, z, level, direction);

	related_cell[16] = XYZToOctreeidx(x / 2 - 1, y / 2 - 1, z / 2 - 1, level - 1, direction);
	related_cell[17] = XYZToOctreeidx(x / 2, y / 2 - 1, z / 2 - 1, level - 1, direction);
	related_cell[18] = XYZToOctreeidx(x / 2 - 1, y / 2, z / 2 - 1, level - 1, direction);
	related_cell[19] = XYZToOctreeidx(x / 2, y / 2, z / 2 - 1, level - 1, direction);

	double node_coodinate[3];

	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 210, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 206, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 210, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 206, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//second hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 210, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 211, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//second hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 210, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 211, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//third hex mesh
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 211, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//third hex mesh
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 211, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//fourth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 206, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 202, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//fourth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 206, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 202, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//fifth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//fifth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//sixth hex mesh
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//sixth hex mesh
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//seventh hex mesh
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 202, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 210, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[12], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//seventh hex mesh
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 202, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 210, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[12], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//eighth hex mesh
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 211, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 210, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[14], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//eighth hex mesh
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 211, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 210, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[14], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//ninth hex mesh
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 211, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[15], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[14], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//ninth hex mesh
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 211, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[15], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[14], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//tenth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 206, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 210, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 211, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//tenth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 206, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 210, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 211, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//eleventh hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 206, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 202, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//eleventh hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 206, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 202, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//twelfth hex mesh
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 202, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 211, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 210, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//twelfth hex mesh
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 202, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 211, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 210, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);


	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//thirteenth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 206, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 202, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//thirteenth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 206, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 202, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

}

void CVTBasedPolycube::AddThirteenHexTypeOneSeventhMarechal(int x, int y, int z, int level, int num_hexa, int direction)
{
	int related_cell[20];

	related_cell[0] = XYZToOctreeidx(x - 2, y - 2, z, level, direction);
	related_cell[1] = XYZToOctreeidx(x - 1, y - 2, z, level, direction);
	related_cell[2] = XYZToOctreeidx(x - 0, y - 2, z, level, direction);
	related_cell[3] = XYZToOctreeidx(x + 1, y - 2, z, level, direction);
	related_cell[4] = XYZToOctreeidx(x - 2, y - 1, z, level, direction);
	related_cell[5] = XYZToOctreeidx(x - 1, y - 1, z, level, direction);
	related_cell[6] = XYZToOctreeidx(x - 0, y - 1, z, level, direction);
	related_cell[7] = XYZToOctreeidx(x + 1, y - 1, z, level, direction);
	related_cell[8] = XYZToOctreeidx(x - 2, y - 0, z, level, direction);
	related_cell[9] = XYZToOctreeidx(x - 1, y - 0, z, level, direction);
	related_cell[10] = XYZToOctreeidx(x - 0, y - 0, z, level, direction);
	related_cell[11] = XYZToOctreeidx(x + 1, y - 0, z, level, direction);
	related_cell[12] = XYZToOctreeidx(x - 2, y + 1, z, level, direction);
	related_cell[13] = XYZToOctreeidx(x - 1, y + 1, z, level, direction);
	related_cell[14] = XYZToOctreeidx(x - 0, y + 1, z, level, direction);
	related_cell[15] = XYZToOctreeidx(x + 1, y + 1, z, level, direction);

	related_cell[16] = XYZToOctreeidx(x / 2 - 1, y / 2 - 1, z / 2 - 1, level - 1, direction);
	related_cell[17] = XYZToOctreeidx(x / 2, y / 2 - 1, z / 2 - 1, level - 1, direction);
	related_cell[18] = XYZToOctreeidx(x / 2 - 1, y / 2, z / 2 - 1, level - 1, direction);
	related_cell[19] = XYZToOctreeidx(x / 2, y / 2, z / 2 - 1, level - 1, direction);

	double node_coodinate[3];

	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 210, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 210, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//second hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 210, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 211, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//second hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 210, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 211, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//third hex mesh
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 211, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 206, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//third hex mesh
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 211, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 206, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//fourth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//fourth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//fifth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//fifth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//sixth hex mesh
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 206, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 202, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//sixth hex mesh
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 206, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 202, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//seventh hex mesh
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 210, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[12], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//seventh hex mesh
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 210, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[12], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//eighth hex mesh
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 211, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 210, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[14], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//eighth hex mesh
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 211, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 210, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[14], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//ninth hex mesh
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 202, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 211, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[15], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[14], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//ninth hex mesh
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 202, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 211, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[15], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[14], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//tenth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 206, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 210, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 211, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//tenth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 206, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 210, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 211, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//eleventh hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 206, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 202, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//eleventh hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 206, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 202, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//twelfth hex mesh
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 202, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 211, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 210, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//twelfth hex mesh
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 202, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 211, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 210, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);


	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//thirteenth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 206, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 202, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//thirteenth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 206, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 202, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;


}

void CVTBasedPolycube::AddThirteenHexTypeOneEighthMarechal(int x, int y, int z, int level, int num_hexa, int direction)
{
	int related_cell[20];

	related_cell[0] = XYZToOctreeidx(x - 2, y - 2, z, level, direction);
	related_cell[1] = XYZToOctreeidx(x - 1, y - 2, z, level, direction);
	related_cell[2] = XYZToOctreeidx(x - 0, y - 2, z, level, direction);
	related_cell[3] = XYZToOctreeidx(x + 1, y - 2, z, level, direction);
	related_cell[4] = XYZToOctreeidx(x - 2, y - 1, z, level, direction);
	related_cell[5] = XYZToOctreeidx(x - 1, y - 1, z, level, direction);
	related_cell[6] = XYZToOctreeidx(x - 0, y - 1, z, level, direction);
	related_cell[7] = XYZToOctreeidx(x + 1, y - 1, z, level, direction);
	related_cell[8] = XYZToOctreeidx(x - 2, y - 0, z, level, direction);
	related_cell[9] = XYZToOctreeidx(x - 1, y - 0, z, level, direction);
	related_cell[10] = XYZToOctreeidx(x - 0, y - 0, z, level, direction);
	related_cell[11] = XYZToOctreeidx(x + 1, y - 0, z, level, direction);
	related_cell[12] = XYZToOctreeidx(x - 2, y + 1, z, level, direction);
	related_cell[13] = XYZToOctreeidx(x - 1, y + 1, z, level, direction);
	related_cell[14] = XYZToOctreeidx(x - 0, y + 1, z, level, direction);
	related_cell[15] = XYZToOctreeidx(x + 1, y + 1, z, level, direction);

	related_cell[16] = XYZToOctreeidx(x / 2 - 1, y / 2 - 1, z / 2 - 1, level - 1, direction);
	related_cell[17] = XYZToOctreeidx(x / 2, y / 2 - 1, z / 2 - 1, level - 1, direction);
	related_cell[18] = XYZToOctreeidx(x / 2 - 1, y / 2, z / 2 - 1, level - 1, direction);
	related_cell[19] = XYZToOctreeidx(x / 2, y / 2, z / 2 - 1, level - 1, direction);

	double node_coodinate[3];

	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 210, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 210, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//second hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 210, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 211, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//second hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 210, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 211, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//third hex mesh
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 211, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//third hex mesh
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 211, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//fourth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//fourth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//fifth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//fifth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//sixth hex mesh
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//sixth hex mesh
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//seventh hex mesh
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 210, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[12], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//seventh hex mesh
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 210, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[12], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//eighth hex mesh
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 211, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 210, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[14], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//eighth hex mesh
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 211, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 210, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[14], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//ninth hex mesh
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 211, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[15], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[14], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//ninth hex mesh
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 211, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[15], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[14], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//tenth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 210, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 211, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//tenth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 210, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 211, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//eleventh hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//eleventh hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 16, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 17, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//twelfth hex mesh
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 211, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 210, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//twelfth hex mesh
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 12, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 13, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 211, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 210, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);


	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//thirteenth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//thirteenth hex mesh
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[16], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[17], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[19], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[18], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

}

void CVTBasedPolycube::AddFiveHexTypeOneFirstMarechal(int x, int y, int z, int level, int num_hexa, int direction)
{
	int related_cell[10];

	related_cell[0] = XYZToOctreeidx(x * 2 - 1, 2 * y + 1, 2 * z - 1, level + 1, direction);
	related_cell[1] = XYZToOctreeidx(x * 2 - 1, 2 * y - 0, 2 * z - 1, level + 1, direction);
	related_cell[2] = XYZToOctreeidx(x * 2 - 1, 2 * y - 1, 2 * z - 1, level + 1, direction);
	related_cell[3] = XYZToOctreeidx(x * 2 - 1, 2 * y - 2, 2 * z - 1, level + 1, direction);

	related_cell[4] = XYZToOctreeidx(x, y, z - 1, level, direction);
	related_cell[5] = XYZToOctreeidx(x, y - 1, z - 1, level, direction);
	related_cell[6] = XYZToOctreeidx(x - 1, y, z, level, direction);
	related_cell[7] = XYZToOctreeidx(x - 1, y - 1, z, level, direction);
	related_cell[8] = XYZToOctreeidx(x, y, z, level, direction);
	related_cell[9] = XYZToOctreeidx(x, y - 1, z, level, direction);

	double node_coodinate[3];

	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 204, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 14, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 204, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 14, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//second hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 200, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 204, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 14, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 10, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 200, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 204, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 14, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 10, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;


	//third hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 200, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 10, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 200, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 10, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;


	//fourth hex mesh
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 200, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 204, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 14, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 10, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 200, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 204, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 14, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 10, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//fifth hex mesh
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 10, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 14, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 10, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 14, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

}

void CVTBasedPolycube::AddFourHexTypeOneSecondMarechal(int x, int y, int z, int level, int num_hexa, int direction)
{
	int related_cell[12];

	related_cell[0] = XYZToOctreeidx(x * 2 - 1, 2 * y + 1, 2 * z - 1, level + 1, direction);
	related_cell[1] = XYZToOctreeidx(x * 2 - 1, 2 * y - 0, 2 * z - 1, level + 1, direction);
	related_cell[2] = XYZToOctreeidx(x * 2 - 1, 2 * y - 1, 2 * z - 1, level + 1, direction);
	related_cell[3] = XYZToOctreeidx(x * 2 - 1, 2 * y - 2, 2 * z - 1, level + 1, direction);

	related_cell[4] = XYZToOctreeidx(x * 2, 2 * y + 1, 2 * z - 1, level + 1, direction);
	related_cell[5] = XYZToOctreeidx(x * 2, 2 * y - 0, 2 * z - 1, level + 1, direction);
	related_cell[6] = XYZToOctreeidx(x * 2, 2 * y - 1, 2 * z - 1, level + 1, direction);
	related_cell[7] = XYZToOctreeidx(x * 2, 2 * y - 2, 2 * z - 1, level + 1, direction);

	related_cell[8] = XYZToOctreeidx(x - 1, y, z, level, direction);
	related_cell[9] = XYZToOctreeidx(x - 1, y - 1, z, level, direction);
	related_cell[10] = XYZToOctreeidx(x, y, z, level, direction);
	related_cell[11] = XYZToOctreeidx(x, y - 1, z, level, direction);

	double node_coodinate[3];

	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 204, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 204, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 204, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 204, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//second hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 200, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 204, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 204, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 200, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 200, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 204, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 204, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 200, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;


	//third hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 200, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 200, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 200, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 200, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;


	//fourth hex mesh
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 200, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 204, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 204, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 200, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 200, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 204, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 204, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 200, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

}

void CVTBasedPolycube::AddFourHexTypeOneThirdMarechal(int x, int y, int z, int level, int num_hexa, int direction)
{
	int related_cell[14];

	related_cell[0] = XYZToOctreeidx(x - 1, y + 1, z - 1, level, direction);
	related_cell[1] = XYZToOctreeidx(x - 1, y - 0, z - 1, level, direction);
	related_cell[2] = XYZToOctreeidx(x - 1, y - 1, z - 1, level, direction);
	related_cell[3] = XYZToOctreeidx(x - 1, y - 2, z - 1, level, direction);

	related_cell[4] = XYZToOctreeidx(x, y + 1, z - 1, level, direction);
	related_cell[5] = XYZToOctreeidx(x, y - 0, z - 1, level, direction);
	related_cell[6] = XYZToOctreeidx(x, y - 1, z - 1, level, direction);
	related_cell[7] = XYZToOctreeidx(x, y - 2, z - 1, level, direction);

	related_cell[8] = XYZToOctreeidx(x / 2 - 1, y / 2, z / 2, level - 1, direction);
	related_cell[9] = XYZToOctreeidx(x / 2 - 1, y / 2 - 1, z / 2, level - 1, direction);

	related_cell[10] = XYZToOctreeidx(x, y + 1, z, level, direction);
	related_cell[11] = XYZToOctreeidx(x, y - 0, z, level, direction);
	related_cell[12] = XYZToOctreeidx(x, y - 1, z, level, direction);
	related_cell[13] = XYZToOctreeidx(x, y - 2, z, level, direction);

	double node_coodinate[3];

	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[12], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[12], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//second hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[12], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[12], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;


	//third hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

}

void CVTBasedPolycube::AddFiveHexTypeOneFourthMarechal(int x, int y, int z, int level, int num_hexa, int direction)
{
	int related_cell[12];

	related_cell[0] = XYZToOctreeidx(x - 1, y + 1, z - 1, level, direction);
	related_cell[1] = XYZToOctreeidx(x - 1, y - 0, z - 1, level, direction);
	related_cell[2] = XYZToOctreeidx(x - 1, y - 1, z - 1, level, direction);
	related_cell[3] = XYZToOctreeidx(x - 1, y - 2, z - 1, level, direction);

	related_cell[4] = XYZToOctreeidx(x / 2, y / 2, z / 2 - 1, level - 1, direction);
	related_cell[5] = XYZToOctreeidx(x / 2, y / 2 - 1, z / 2 - 1, level - 1, direction);
	related_cell[6] = XYZToOctreeidx(x / 2 - 1, y / 2, z / 2, level - 1, direction);
	related_cell[7] = XYZToOctreeidx(x / 2 - 1, y / 2 - 1, z / 2, level - 1, direction);

	related_cell[8] = XYZToOctreeidx(x, y + 1, z, level, direction);
	related_cell[9] = XYZToOctreeidx(x, y - 0, z, level, direction);
	related_cell[10] = XYZToOctreeidx(x, y - 1, z, level, direction);
	related_cell[11] = XYZToOctreeidx(x, y - 2, z, level, direction);

	double node_coodinate[3];

	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//second hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;


	//third hex mesh
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

}

void CVTBasedPolycube::AddFiveHexTypeOneFifthMarechal(int x, int y, int z, int level, int num_hexa, int direction)
{
	int related_cell[10];

	related_cell[0] = XYZToOctreeidx(x - 1, y, z - 1, level, direction);
	related_cell[1] = XYZToOctreeidx(x - 1, y - 1, z - 1, level, direction);
	related_cell[2] = XYZToOctreeidx(x, y, z - 1, level, direction);
	related_cell[3] = XYZToOctreeidx(x, y - 1, z - 1, level, direction);

	related_cell[4] = XYZToOctreeidx(x * 2 - 1, 2 * y + 1, 2 * z, level + 1, direction);
	related_cell[5] = XYZToOctreeidx(x * 2 - 1, 2 * y - 0, 2 * z, level + 1, direction);
	related_cell[6] = XYZToOctreeidx(x * 2 - 1, 2 * y - 1, 2 * z, level + 1, direction);
	related_cell[7] = XYZToOctreeidx(x * 2 - 1, 2 * y - 2, 2 * z, level + 1, direction);

	related_cell[8] = XYZToOctreeidx(x, y, z, level, direction);
	related_cell[9] = XYZToOctreeidx(x, y - 1, z, level, direction);


	double node_coodinate[3];

	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 202, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 13, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 202, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 13, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//second hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 202, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 206, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 17, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 13, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 202, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 206, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 17, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 13, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;


	//third hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 206, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 17, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 206, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 17, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;


	//fourth hex mesh
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 13, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 17, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 13, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 17, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//fifth hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 202, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 206, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 17, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 13, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 202, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 206, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 17, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 13, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

}

void CVTBasedPolycube::AddFourHexTypeOneSixthMarechal(int x, int y, int z, int level, int num_hexa, int direction)
{

	int related_cell[12];

	related_cell[0] = XYZToOctreeidx(x / 2 - 1, y / 2, z / 2 - 1, level - 1, direction);
	related_cell[1] = XYZToOctreeidx(x / 2 - 1, y / 2 - 1, z / 2 - 1, level - 1, direction);
	related_cell[2] = XYZToOctreeidx(x / 2, y / 2, z / 2 - 1, level - 1, direction);
	related_cell[3] = XYZToOctreeidx(x / 2, y / 2 - 1, z / 2 - 1, level - 1, direction);

	related_cell[4] = XYZToOctreeidx(x - 1, y + 1, z, level, direction);
	related_cell[5] = XYZToOctreeidx(x - 1, y - 0, z, level, direction);
	related_cell[6] = XYZToOctreeidx(x - 1, y - 1, z, level, direction);
	related_cell[7] = XYZToOctreeidx(x - 1, y - 2, z, level, direction);
	related_cell[8] = XYZToOctreeidx(x, y + 1, z, level, direction);
	related_cell[9] = XYZToOctreeidx(x, y - 0, z, level, direction);
	related_cell[10] = XYZToOctreeidx(x, y - 1, z, level, direction);
	related_cell[11] = XYZToOctreeidx(x, y - 2, z, level, direction);

	double node_coodinate[3];

	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 202, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 202, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 202, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 202, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//second hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 202, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 206, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 206, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 202, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 202, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 206, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 206, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 202, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;


	//third hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 206, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 206, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 206, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 206, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;


	//fourth hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 202, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 206, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 206, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 202, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 202, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 206, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 206, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 202, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

}

void CVTBasedPolycube::AddFourHexTypeOneSeventhMarechal(int x, int y, int z, int level, int num_hexa, int direction)
{
	int related_cell[14];

	related_cell[0] = XYZToOctreeidx(x / 2 - 1, y / 2 - 0, z / 2 - 1, level - 1, direction);
	related_cell[1] = XYZToOctreeidx(x / 2 - 1, y / 2 - 1, z / 2 - 1, level - 1, direction);

	related_cell[2] = XYZToOctreeidx(x, y + 1, z - 1, level, direction);
	related_cell[3] = XYZToOctreeidx(x, y - 0, z - 1, level, direction);
	related_cell[4] = XYZToOctreeidx(x, y - 1, z - 1, level, direction);
	related_cell[5] = XYZToOctreeidx(x, y - 2, z - 1, level, direction);
	related_cell[6] = XYZToOctreeidx(x - 1, y + 1, z, level, direction);
	related_cell[7] = XYZToOctreeidx(x - 1, y - 0, z, level, direction);
	related_cell[8] = XYZToOctreeidx(x - 1, y - 1, z, level, direction);
	related_cell[9] = XYZToOctreeidx(x - 1, y - 2, z, level, direction);
	related_cell[10] = XYZToOctreeidx(x, y + 1, z, level, direction);
	related_cell[11] = XYZToOctreeidx(x, y - 0, z, level, direction);
	related_cell[12] = XYZToOctreeidx(x, y - 1, z, level, direction);
	related_cell[13] = XYZToOctreeidx(x, y - 2, z, level, direction);

	double node_coodinate[3];

	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[12], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[12], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//second hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[12], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[12], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;


	//third hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

}

void CVTBasedPolycube::AddFourHexTypeOneEighthMarechal(int x, int y, int z, int level, int num_hexa, int direction)
{
	int related_cell[12];

	related_cell[0] = XYZToOctreeidx(x * 2 - 1, y * 2 + 1, z * 2 - 1, level + 1, direction);
	related_cell[1] = XYZToOctreeidx(x * 2 - 1, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[2] = XYZToOctreeidx(x * 2 - 1, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[3] = XYZToOctreeidx(x * 2 - 1, y * 2 - 2, z * 2 - 1, level + 1, direction);

	related_cell[4] = XYZToOctreeidx(x, y - 0, z - 1, level, direction);
	related_cell[5] = XYZToOctreeidx(x, y - 1, z - 1, level, direction);

	related_cell[6] = XYZToOctreeidx(x * 2 - 1, y * 2 + 1, z * 2, level + 1, direction);
	related_cell[7] = XYZToOctreeidx(x * 2 - 1, y * 2 - 0, z * 2, level + 1, direction);
	related_cell[8] = XYZToOctreeidx(x * 2 - 1, y * 2 - 1, z * 2, level + 1, direction);
	related_cell[9] = XYZToOctreeidx(x * 2 - 1, y * 2 - 2, z * 2, level + 1, direction);

	related_cell[10] = XYZToOctreeidx(x, y - 0, z, level, direction);
	related_cell[11] = XYZToOctreeidx(x, y - 1, z, level, direction);

	double node_coodinate[3];

	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//second hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;


	//third hex mesh
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;


	//fourth hex mesh
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

}

void CVTBasedPolycube::AddFourHexTypeOneNinthMarechal(int x, int y, int z, int level, int num_hexa, int direction)
{

	int related_cell[14];

	related_cell[0] = XYZToOctreeidx(x * 2 - 1, y * 2 + 1, z * 2 - 1, level + 1, direction);
	related_cell[1] = XYZToOctreeidx(x * 2 - 1, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[2] = XYZToOctreeidx(x * 2 - 1, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[3] = XYZToOctreeidx(x * 2 - 1, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[4] = XYZToOctreeidx(x * 2, y * 2 + 1, z * 2 - 1, level + 1, direction);
	related_cell[5] = XYZToOctreeidx(x * 2, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[6] = XYZToOctreeidx(x * 2, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[7] = XYZToOctreeidx(x * 2, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[8] = XYZToOctreeidx(x * 2 - 1, y * 2 + 1, z * 2, level + 1, direction);
	related_cell[9] = XYZToOctreeidx(x * 2 - 1, y * 2 - 0, z * 2, level + 1, direction);
	related_cell[10] = XYZToOctreeidx(x * 2 - 1, y * 2 - 1, z * 2, level + 1, direction);
	related_cell[11] = XYZToOctreeidx(x * 2 - 1, y * 2 - 2, z * 2, level + 1, direction);

	related_cell[12] = XYZToOctreeidx(x, y - 0, z, level, direction);
	related_cell[13] = XYZToOctreeidx(x, y - 1, z, level, direction);

	double node_coodinate[3];

	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[12], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[12], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[12], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[12], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//second hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[12], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[12], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;


	//third hex mesh
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

}

void CVTBasedPolycube::AddFourHexTypeOneTenthMarechal(int x, int y, int z, int level, int num_hexa, int direction)
{

	int related_cell[14];

	related_cell[0] = XYZToOctreeidx(x - 1, y + 1, z - 1, level, direction);
	related_cell[1] = XYZToOctreeidx(x - 1, y - 0, z - 1, level, direction);
	related_cell[2] = XYZToOctreeidx(x - 1, y - 1, z - 1, level, direction);
	related_cell[3] = XYZToOctreeidx(x - 1, y - 2, z - 1, level, direction);

	related_cell[4] = XYZToOctreeidx(x / 2, y / 2 - 0, z / 2 - 1, level - 1, direction);
	related_cell[5] = XYZToOctreeidx(x / 2, y / 2 - 1, z / 2 - 1, level - 1, direction);

	related_cell[6] = XYZToOctreeidx(x - 1, y + 1, z, level, direction);
	related_cell[7] = XYZToOctreeidx(x - 1, y - 0, z, level, direction);
	related_cell[8] = XYZToOctreeidx(x - 1, y - 1, z, level, direction);
	related_cell[9] = XYZToOctreeidx(x - 1, y - 2, z, level, direction);
	related_cell[10] = XYZToOctreeidx(x, y + 1, z, level, direction);
	related_cell[11] = XYZToOctreeidx(x, y - 0, z, level, direction);
	related_cell[12] = XYZToOctreeidx(x, y - 1, z, level, direction);
	related_cell[13] = XYZToOctreeidx(x, y - 2, z, level, direction);

	double node_coodinate[3];

	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//second hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[12], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[12], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;


	//third hex mesh
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[12], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[13], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[12], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

}

void CVTBasedPolycube::AddFiveHexTypeOneEleventhMarechal(int x, int y, int z, int level, int num_hexa, int direction)
{
	int related_cell[12];

	related_cell[0] = XYZToOctreeidx(x - 1, y - 0, z - 1, level, direction);
	related_cell[1] = XYZToOctreeidx(x - 1, y - 1, z - 1, level, direction);

	related_cell[2] = XYZToOctreeidx(x * 2, y * 2 + 1, z * 2 - 1, level + 1, direction);
	related_cell[3] = XYZToOctreeidx(x * 2, y * 2 - 0, z * 2 - 1, level + 1, direction);
	related_cell[4] = XYZToOctreeidx(x * 2, y * 2 - 1, z * 2 - 1, level + 1, direction);
	related_cell[5] = XYZToOctreeidx(x * 2, y * 2 - 2, z * 2 - 1, level + 1, direction);
	related_cell[6] = XYZToOctreeidx(x * 2 - 1, y * 2 + 1, z * 2, level + 1, direction);
	related_cell[7] = XYZToOctreeidx(x * 2 - 1, y * 2 - 0, z * 2, level + 1, direction);
	related_cell[8] = XYZToOctreeidx(x * 2 - 1, y * 2 - 1, z * 2, level + 1, direction);
	related_cell[9] = XYZToOctreeidx(x * 2 - 1, y * 2 - 2, z * 2, level + 1, direction);

	related_cell[10] = XYZToOctreeidx(x, y - 0, z, level, direction);
	related_cell[11] = XYZToOctreeidx(x, y - 1, z, level, direction);

	double node_coodinate[3];

	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//second hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 203, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 203, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;


	//third hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 207, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 207, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

}

void CVTBasedPolycube::AddFiveHexTypeOneTwelfthMarechal(int x, int y, int z, int level, int num_hexa, int direction)
{
	int related_cell[10];

	related_cell[0] = XYZToOctreeidx(x - 1, y, z - 1, level, direction);
	related_cell[1] = XYZToOctreeidx(x - 1, y - 1, z - 1, level, direction);

	related_cell[2] = XYZToOctreeidx(x * 2, 2 * y + 1, 2 * z - 1, level + 1, direction);
	related_cell[3] = XYZToOctreeidx(x * 2, 2 * y - 0, 2 * z - 1, level + 1, direction);
	related_cell[4] = XYZToOctreeidx(x * 2, 2 * y - 1, 2 * z - 1, level + 1, direction);
	related_cell[5] = XYZToOctreeidx(x * 2, 2 * y - 2, 2 * z - 1, level + 1, direction);

	related_cell[6] = XYZToOctreeidx(x - 1, y, z, level, direction);
	related_cell[7] = XYZToOctreeidx(x - 1, y - 1, z, level, direction);
	related_cell[8] = XYZToOctreeidx(x, y, z, level, direction);
	related_cell[9] = XYZToOctreeidx(x, y - 1, z, level, direction);

	double node_coodinate[3];

	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 11, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 200, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 11, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 200, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//second hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 11, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 15, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 204, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 200, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 11, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 15, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 204, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 200, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;


	//third hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 15, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 204, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 15, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 204, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;


	//fourth hex mesh
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 11, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 15, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 204, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 200, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 11, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 15, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 204, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 200, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//fifth hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 15, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 11, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 15, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 11, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

}

void CVTBasedPolycube::AddFiveHexTypeOneThirteenthMarechal(int x, int y, int z, int level, int num_hexa, int direction)
{
	int related_cell[10];

	related_cell[0] = XYZToOctreeidx(x / 2 - 1, y / 2, z / 2 - 1, level - 1, direction);
	related_cell[1] = XYZToOctreeidx(x / 2 - 1, y / 2 - 1, z / 2 - 1, level - 1, direction);
	related_cell[2] = XYZToOctreeidx(x / 2, y / 2, z / 2 - 1, level - 1, direction);
	related_cell[3] = XYZToOctreeidx(x / 2, y / 2 - 1, z / 2 - 1, level - 1, direction);
	related_cell[4] = XYZToOctreeidx(x / 2 - 1, y / 2, z / 2, level - 1, direction);
	related_cell[5] = XYZToOctreeidx(x / 2 - 1, y / 2 - 1, z / 2, level - 1, direction);

	related_cell[6] = XYZToOctreeidx(x, y + 1, z, level, direction);
	related_cell[7] = XYZToOctreeidx(x, y - 0, z, level, direction);
	related_cell[8] = XYZToOctreeidx(x, y - 1, z, level, direction);
	related_cell[9] = XYZToOctreeidx(x, y - 2, z, level, direction);

	double node_coodinate[3];

	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 16, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 206, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 16, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 206, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//second hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 12, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 16, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 206, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 202, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 12, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 16, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 206, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 202, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;


	//third hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 12, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 202, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 12, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 202, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;


	//fourth hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 16, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 12, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 16, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 12, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//fifth hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 12, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 16, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 206, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 202, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 12, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 16, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 206, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 202, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

}

void CVTBasedPolycube::AddFourHexTypeOneFourteenthMarechal(int x, int y, int z, int level, int num_hexa, int direction)
{
	int related_cell[12];

	related_cell[0] = XYZToOctreeidx(x / 2 - 1, y / 2, z / 2 - 1, level - 1, direction);
	related_cell[1] = XYZToOctreeidx(x / 2 - 1, y / 2 - 1, z / 2 - 1, level - 1, direction);

	related_cell[2] = XYZToOctreeidx(x, y + 1, z - 1, level, direction);
	related_cell[3] = XYZToOctreeidx(x, y - 0, z - 1, level, direction);
	related_cell[4] = XYZToOctreeidx(x, y - 1, z - 1, level, direction);
	related_cell[5] = XYZToOctreeidx(x, y - 2, z - 1, level, direction);

	related_cell[6] = XYZToOctreeidx(x / 2 - 1, y / 2, z / 2, level - 1, direction);
	related_cell[7] = XYZToOctreeidx(x / 2 - 1, y / 2 - 1, z / 2, level - 1, direction);

	related_cell[8] = XYZToOctreeidx(x, y + 1, z, level, direction);
	related_cell[9] = XYZToOctreeidx(x, y - 0, z, level, direction);
	related_cell[10] = XYZToOctreeidx(x, y - 1, z, level, direction);
	related_cell[11] = XYZToOctreeidx(x, y - 2, z, level, direction);

	double node_coodinate[3];

	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[2], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[8], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

	//second hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[3], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[9], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;


	//third hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[5], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[4], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[11], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[10], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;


	//fourth hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 0].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 1].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 2].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 3].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 4].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction);
	hexVerts[num_hexa * 8 + 5].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 205, direction);
	hexVerts[num_hexa * 8 + 6].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].ParaPos[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 201, direction);
	hexVerts[num_hexa * 8 + 7].ParaPos[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].ParaPos[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].ParaPos[2] = (node_coodinate[2]);
	//first hex mesh
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 0].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 0].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 0].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 1].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 1].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 1].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[1], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 2].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 2].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 2].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[0], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 3].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 3].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 3].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 4].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 4].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 4].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 0, direction, 1);
	hexVerts[num_hexa * 8 + 5].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 5].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 5].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[7], node_coodinate, 205, direction, 1);
	hexVerts[num_hexa * 8 + 6].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 6].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 6].Coords[2] = (node_coodinate[2]);
	TwentyOneVerticesMarechal(related_cell[6], node_coodinate, 201, direction, 1);
	hexVerts[num_hexa * 8 + 7].Coords[0] = (node_coodinate[0]);
	hexVerts[num_hexa * 8 + 7].Coords[1] = (node_coodinate[1]);
	hexVerts[num_hexa * 8 + 7].Coords[2] = (node_coodinate[2]);

	for (int i = 0; i < 8; i++)
	{
		hexIdxM[num_hexa].push_back(num_hexa * 8 + i);
	}

	num_hexa++;

}


bool CVTBasedPolycube::OutputPatchesVTK(const char *outputName)
{
	
	string inputFileName = outputName;

	fstream output(inputFileName, fstream::out);
	if (!output)
	{
		cout << "open input file error!!!" <<endl;
		return false;
	}

	int i, j;

	output << "# vtk DataFile Version 3.1 " << "\n";
	output << "for LSEConsole" << "\n";
	output << "ASCII" << "\n";
	output << "DATASET UNSTRUCTURED_GRID" << "\n";
	output << "POINTS " << vertexNumber<<" FLOAT"<<"\n";


	output.precision(9);
	for (i=0; i<vertexNumber; ++i)
		output <<vertex[i][0]<<"\t"<<vertex[i][1]<<"\t"<<vertex[i][2]<<"\n";
	output.unsetf(ostream::floatfield);
	output << "CELLS " << elementNumber <<" "<<(elementProperty.vertexNumber+1) * elementNumber<<"\n";

	for (i=0; i<elementNumber; ++i)
	{
		output << elementProperty.vertexNumber<<" ";
		for(j=0; j<elementProperty.vertexNumber; j++)
		{
			output<< element[i][j]<<" ";
		}
		output<<"\n";
	}
	output <<"CELL_TYPES "<<elementNumber<<endl;
	for (i=0; i<elementNumber; ++i)
	{
		if (elementProperty.elementType == NA)
		{
			continue;
		}
		else if (elementProperty.elementType == POINT)
		{
			output << 1 <<endl;
		}
		else if (elementProperty.elementType == LINE)
		{
			output << 3 <<endl;
		}
		else if (elementProperty.elementType == TRIANGLE)
		{
			output << 5 <<endl;
		}
		else if (elementProperty.elementType == TETRAHEDRON)
		{
			output << 10 <<endl;
		}
		else if (elementProperty.elementType == QUADRILATERAL)
		{
			output << 9 <<endl;
		}
		else if (elementProperty.elementType == HEXAHEDRON)
		{
			output << 12 <<endl;
		}
		else if (elementProperty.elementType == POLYGON)
		{
			output << 7 <<endl;
		}
		else if (elementProperty.elementType == HEXAGON)
		{
			continue;
		}

	}

	//start new stuff
	output <<"CELL_DATA "<<elementNumber<<endl;
	output <<"SCALARS patches float"<<endl;
	output <<"LOOKUP_TABLE default"<<endl;

	for (i = 0; i < elementNumber; i++)
	{

		float tempFloat = (float) elementArray[i].indexCluster;
		//float tempFloat = (float)elementArray[i].indexPatch;
		output << tempFloat <<endl;

	}

	//end new stuff

	output.close();


	return true;

}


bool CVTBasedPolycube::WriteKFileBeforePostProcessing(const char *outputName)
{

	int i, j;

	string outputFileName = outputName;

	fstream output(outputFileName, fstream::out);
	if (!output)
	{
		cout << "open input file error!!!" << endl;
		return false;
	}

	output << "$# LS-DYNA Keyword file" << "\n";
	output << "$# Created  " << "\n";

	output << "*KEYWORD" << "\n";
	output << "*ELEMENT_SHELL" << "\n";
	for (i = 0; i < elementNumber; i++)
	{
		output <<i + 1 << ", " << elementArray[i].indexCluster + 1 << ", " << element[i][0] + 1 << ", " << element[i][1] + 1 << ", " << element[i][2] + 1 << ", " << element[i][2] + 1 << ", " <<0 << ", " << 0 << ", " << 0 << ", " << 0<< "\n";
	}

	output << "*NODE" << "\n";
	for (i = 0; i < vertexNumber; i++)
	{
		output <<  i + 1 << ", " << vertex[i][0] << ", " << vertex[i][1] << ", " << vertex[i][2] << ", " << 0 << ", " << 0 << "\n";
	}

	output << "*END" << "\n";

	output.close();
	return true;

}



bool CVTBasedPolycube::OutputPatchesVTK_PatchID(const char *outputName)
{

	string inputFileName = outputName;

	fstream output(inputFileName, fstream::out);
	if (!output)
	{
		cout << "open input file error!!!" << endl;
		return false;
	}

	int i, j;

	output << "# vtk DataFile Version 3.1 " << "\n";
	output << "for LSEConsole" << "\n";
	output << "ASCII" << "\n";
	output << "DATASET UNSTRUCTURED_GRID" << "\n";
	output << "POINTS " << vertexNumber << " FLOAT" << "\n";


	output.precision(9);
	for (i = 0; i<vertexNumber; ++i)
		output << vertex[i][0] << "\t" << vertex[i][1] << "\t" << vertex[i][2] << "\n";
	output.unsetf(ostream::floatfield);
	output << "CELLS " << elementNumber << " " << (elementProperty.vertexNumber + 1) * elementNumber << "\n";

	for (i = 0; i<elementNumber; ++i)
	{
		output << elementProperty.vertexNumber << " ";
		for (j = 0; j<elementProperty.vertexNumber; j++)
		{
			output << element[i][j] << " ";
		}
		output << "\n";
	}
	output << "CELL_TYPES " << elementNumber << endl;
	for (i = 0; i<elementNumber; ++i)
	{
		if (elementProperty.elementType == NA)
		{
			continue;
		}
		else if (elementProperty.elementType == POINT)
		{
			output << 1 << endl;
		}
		else if (elementProperty.elementType == LINE)
		{
			output << 3 << endl;
		}
		else if (elementProperty.elementType == TRIANGLE)
		{
			output << 5 << endl;
		}
		else if (elementProperty.elementType == TETRAHEDRON)
		{
			output << 10 << endl;
		}
		else if (elementProperty.elementType == QUADRILATERAL)
		{
			output << 9 << endl;
		}
		else if (elementProperty.elementType == HEXAHEDRON)
		{
			output << 12 << endl;
		}
		else if (elementProperty.elementType == POLYGON)
		{
			output << 7 << endl;
		}
		else if (elementProperty.elementType == HEXAGON)
		{
			continue;
		}

	}

	//start new stuff
	output << "CELL_DATA " << elementNumber << endl;
	output << "SCALARS patches float" << endl;
	output << "LOOKUP_TABLE default" << endl;

	for (i = 0; i < elementNumber; i++)
	{

		//float tempFloat = (float) elementArray[i].indexCluster;
		float tempFloat = (float)elementArray[i].indexPatch;
		output << tempFloat << endl;

	}

	//end new stuff

	output.close();


	return true;

}


bool CVTBasedPolycube::OutputPatchesVTKPara(const char *outputName)
{

	string inputFileName = outputName;

	fstream output(inputFileName, fstream::out);
	if (!output)
	{
		cout << "open input file error!!!" <<endl;
		return false;
	}

	int i, j;

	output << "# vtk DataFile Version 3.1 " << "\n";
	output << "for LSEConsole" << "\n";
	output << "ASCII" << "\n";
	output << "DATASET UNSTRUCTURED_GRID" << "\n";
	output << "POINTS " << polycubePara->vertexNumber<<" FLOAT"<<"\n";


	output.precision(9);
	for (i=0; i<polycubePara->vertexNumber; ++i)
		output <<polycubePara->vertex[i][0]<<"\t"<<polycubePara->vertex[i][1]<<"\t"<<polycubePara->vertex[i][2]<<"\n";
	output.unsetf(ostream::floatfield);
	output << "CELLS " << polycubePara->elementNumber <<" "<<(polycubePara->elementProperty.vertexNumber+1) * polycubePara->elementNumber<<"\n";

	for (i=0; i<polycubePara->elementNumber; ++i)
	{
		output << polycubePara->elementProperty.vertexNumber<<" ";
		for(j=0; j<polycubePara->elementProperty.vertexNumber; j++)
		{
			output<< polycubePara->element[i][j]<<" ";
		}
		output<<"\n";
	}
	output <<"CELL_TYPES "<<polycubePara->elementNumber<<endl;
	for (i=0; i<polycubePara->elementNumber; ++i)
	{
		if (polycubePara->elementProperty.elementType == NA)
		{
			continue;
		}
		else if (polycubePara->elementProperty.elementType == POINT)
		{
			output << 1 <<endl;
		}
		else if (polycubePara->elementProperty.elementType == LINE)
		{
			output << 3 <<endl;
		}
		else if (polycubePara->elementProperty.elementType == TRIANGLE)
		{
			output << 5 <<endl;
		}
		else if (polycubePara->elementProperty.elementType == TETRAHEDRON)
		{
			output << 10 <<endl;
		}
		else if (polycubePara->elementProperty.elementType == QUADRILATERAL)
		{
			output << 9 <<endl;
		}
		else if (polycubePara->elementProperty.elementType == HEXAHEDRON)
		{
			output << 12 <<endl;
		}
		else if (polycubePara->elementProperty.elementType == POLYGON)
		{
			output << 7 <<endl;
		}
		else if (polycubePara->elementProperty.elementType == HEXAGON)
		{
			continue;
		}

	}

	//start new stuff
	output <<"CELL_DATA "<<polycubePara->elementNumber<<endl;
	output <<"SCALARS patches float"<<endl;
	output <<"LOOKUP_TABLE default"<<endl;

	for (i = 0; i < polycubePara->elementNumber; i++)
	{

		float tempFloat = (float) elementArray[i].indexCluster;
		//float tempFloat = (float)elementArray[i].indexPatch;
		output << tempFloat <<endl;

	}

	//end new stuff

	output.close();


	return true;

}

bool AddProgress(double progress)
{
	int barWidth = 70;

	std::cout << "[";
	int pos = barWidth * progress;
	for (int i = 0; i < barWidth; ++i) {
		if (i < pos) std::cout << "=";
		else if (i == pos) std::cout << ">";
		else std::cout << " ";
	}
	std::cout << "] " << int(progress * 100.0) << " %\r";
	std::cout.flush();

	//	progress += 0.16; // for demonstration only

	std::cout << std::endl;
	return true;
}